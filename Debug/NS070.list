
NS070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a8  080061a8  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  080061a8  080061a8  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061a8  080061a8  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  080061b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d5c  20000174  08006324  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed0  08006324  00020ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018700  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352f  00000000  00000000  0003889c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0003bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  0003ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000103df  00000000  00000000  0003d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011715  00000000  00000000  0004d987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00049b6e  00000000  00000000  0005f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a8c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b1c  00000000  00000000  000a8c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000174 	.word	0x20000174
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006034 	.word	0x08006034

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000178 	.word	0x20000178
 8000104:	08006034 	.word	0x08006034

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f005 f84d 	bl	80052d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f003 f830 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f90d 	bl	8000482 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200003b4 	.word	0x200003b4

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	200003b4 	.word	0x200003b4

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b004      	add	sp, #16
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	1e5a      	subs	r2, r3, #1
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	045b      	lsls	r3, r3, #17
 8000400:	429a      	cmp	r2, r3
 8000402:	d301      	bcc.n	8000408 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000404:	2301      	movs	r3, #1
 8000406:	e010      	b.n	800042a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <SysTick_Config+0x44>)
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	3a01      	subs	r2, #1
 800040e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000410:	2301      	movs	r3, #1
 8000412:	425b      	negs	r3, r3
 8000414:	2103      	movs	r1, #3
 8000416:	0018      	movs	r0, r3
 8000418:	f7ff ff7c 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <SysTick_Config+0x44>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000424:	2207      	movs	r2, #7
 8000426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000428:	2300      	movs	r3, #0
}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <NVIC_SetPriority>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	0002      	movs	r2, r0
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b25b      	sxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff37 	bl	80002e8 <NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ffaf 	bl	80003f0 <SysTick_Config>
 8000492:	0003      	movs	r3, r0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b2:	e14f      	b.n	8000754 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2101      	movs	r1, #1
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	4091      	lsls	r1, r2
 80004be:	000a      	movs	r2, r1
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d100      	bne.n	80004cc <HAL_GPIO_Init+0x30>
 80004ca:	e140      	b.n	800074e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d003      	beq.n	80004dc <HAL_GPIO_Init+0x40>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b12      	cmp	r3, #18
 80004da:	d123      	bne.n	8000524 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	08da      	lsrs	r2, r3, #3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3208      	adds	r2, #8
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	58d3      	ldr	r3, [r2, r3]
 80004e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2207      	movs	r2, #7
 80004ee:	4013      	ands	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	220f      	movs	r2, #15
 80004f4:	409a      	lsls	r2, r3
 80004f6:	0013      	movs	r3, r2
 80004f8:	43da      	mvns	r2, r3
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	691a      	ldr	r2, [r3, #16]
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	2107      	movs	r1, #7
 8000508:	400b      	ands	r3, r1
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	409a      	lsls	r2, r3
 800050e:	0013      	movs	r3, r2
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	08da      	lsrs	r2, r3, #3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3208      	adds	r2, #8
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	6939      	ldr	r1, [r7, #16]
 8000522:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2203      	movs	r2, #3
 8000530:	409a      	lsls	r2, r3
 8000532:	0013      	movs	r3, r2
 8000534:	43da      	mvns	r2, r3
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2203      	movs	r2, #3
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4313      	orrs	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00b      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d007      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056c:	2b11      	cmp	r3, #17
 800056e:	d003      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b12      	cmp	r3, #18
 8000576:	d130      	bne.n	80005da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2203      	movs	r2, #3
 8000584:	409a      	lsls	r2, r3
 8000586:	0013      	movs	r3, r2
 8000588:	43da      	mvns	r2, r3
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005ae:	2201      	movs	r2, #1
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0013      	movs	r3, r2
 80005b6:	43da      	mvns	r2, r3
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4013      	ands	r3, r2
 80005bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	2201      	movs	r2, #1
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0013      	movs	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2203      	movs	r2, #3
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	43da      	mvns	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4013      	ands	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0013      	movs	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	4313      	orrs	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	055b      	lsls	r3, r3, #21
 8000612:	4013      	ands	r3, r2
 8000614:	d100      	bne.n	8000618 <HAL_GPIO_Init+0x17c>
 8000616:	e09a      	b.n	800074e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	4b54      	ldr	r3, [pc, #336]	; (800076c <HAL_GPIO_Init+0x2d0>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	4b53      	ldr	r3, [pc, #332]	; (800076c <HAL_GPIO_Init+0x2d0>)
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	619a      	str	r2, [r3, #24]
 8000624:	4b51      	ldr	r3, [pc, #324]	; (800076c <HAL_GPIO_Init+0x2d0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	2201      	movs	r2, #1
 800062a:	4013      	ands	r3, r2
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000630:	4a4f      	ldr	r2, [pc, #316]	; (8000770 <HAL_GPIO_Init+0x2d4>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	3302      	adds	r3, #2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	589b      	ldr	r3, [r3, r2]
 800063c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2203      	movs	r2, #3
 8000642:	4013      	ands	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	220f      	movs	r2, #15
 8000648:	409a      	lsls	r2, r3
 800064a:	0013      	movs	r3, r2
 800064c:	43da      	mvns	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	429a      	cmp	r2, r3
 800065c:	d013      	beq.n	8000686 <HAL_GPIO_Init+0x1ea>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a44      	ldr	r2, [pc, #272]	; (8000774 <HAL_GPIO_Init+0x2d8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d00d      	beq.n	8000682 <HAL_GPIO_Init+0x1e6>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a43      	ldr	r2, [pc, #268]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d007      	beq.n	800067e <HAL_GPIO_Init+0x1e2>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a42      	ldr	r2, [pc, #264]	; (800077c <HAL_GPIO_Init+0x2e0>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d101      	bne.n	800067a <HAL_GPIO_Init+0x1de>
 8000676:	2303      	movs	r3, #3
 8000678:	e006      	b.n	8000688 <HAL_GPIO_Init+0x1ec>
 800067a:	2305      	movs	r3, #5
 800067c:	e004      	b.n	8000688 <HAL_GPIO_Init+0x1ec>
 800067e:	2302      	movs	r3, #2
 8000680:	e002      	b.n	8000688 <HAL_GPIO_Init+0x1ec>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <HAL_GPIO_Init+0x1ec>
 8000686:	2300      	movs	r3, #0
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	2103      	movs	r1, #3
 800068c:	400a      	ands	r2, r1
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	4093      	lsls	r3, r2
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	4313      	orrs	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000698:	4935      	ldr	r1, [pc, #212]	; (8000770 <HAL_GPIO_Init+0x2d4>)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	089b      	lsrs	r3, r3, #2
 800069e:	3302      	adds	r3, #2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	43da      	mvns	r2, r3
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	4013      	ands	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	025b      	lsls	r3, r3, #9
 80006be:	4013      	ands	r3, r2
 80006c0:	d003      	beq.n	80006ca <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	43da      	mvns	r2, r3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	029b      	lsls	r3, r3, #10
 80006e8:	4013      	ands	r3, r2
 80006ea:	d003      	beq.n	80006f4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	43da      	mvns	r2, r3
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	4013      	ands	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	035b      	lsls	r3, r3, #13
 8000712:	4013      	ands	r3, r2
 8000714:	d003      	beq.n	800071e <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4313      	orrs	r3, r2
 800071c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	43da      	mvns	r2, r3
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4013      	ands	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	039b      	lsls	r3, r3, #14
 800073c:	4013      	ands	r3, r2
 800073e:	d003      	beq.n	8000748 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000740:	693a      	ldr	r2, [r7, #16]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4313      	orrs	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	40da      	lsrs	r2, r3
 800075c:	1e13      	subs	r3, r2, #0
 800075e:	d000      	beq.n	8000762 <HAL_GPIO_Init+0x2c6>
 8000760:	e6a8      	b.n	80004b4 <HAL_GPIO_Init+0x18>
  } 
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b006      	add	sp, #24
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000
 8000774:	48000400 	.word	0x48000400
 8000778:	48000800 	.word	0x48000800
 800077c:	48000c00 	.word	0x48000c00
 8000780:	40010400 	.word	0x40010400

08000784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	0008      	movs	r0, r1
 800078e:	0011      	movs	r1, r2
 8000790:	1cbb      	adds	r3, r7, #2
 8000792:	1c02      	adds	r2, r0, #0
 8000794:	801a      	strh	r2, [r3, #0]
 8000796:	1c7b      	adds	r3, r7, #1
 8000798:	1c0a      	adds	r2, r1, #0
 800079a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800079c:	1c7b      	adds	r3, r7, #1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d004      	beq.n	80007ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a4:	1cbb      	adds	r3, r7, #2
 80007a6:	881a      	ldrh	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007ac:	e003      	b.n	80007b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ae:	1cbb      	adds	r3, r7, #2
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	000a      	movs	r2, r1
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	1cbb      	adds	r3, r7, #2
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	405a      	eors	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	615a      	str	r2, [r3, #20]
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80007e2:	b590      	push	{r4, r7, lr}
 80007e4:	b085      	sub	sp, #20
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e0de      	b.n	80009ba <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	23ea      	movs	r3, #234	; 0xea
 8000800:	33ff      	adds	r3, #255	; 0xff
 8000802:	5cd3      	ldrb	r3, [r2, r3]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d108      	bne.n	800081c <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	23f4      	movs	r3, #244	; 0xf4
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2100      	movs	r1, #0
 8000812:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	0018      	movs	r0, r3
 8000818:	f004 ff14 	bl	8005644 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	23ea      	movs	r3, #234	; 0xea
 8000820:	33ff      	adds	r3, #255	; 0xff
 8000822:	2103      	movs	r1, #3
 8000824:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e043      	b.n	80008b4 <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	2029      	movs	r0, #41	; 0x29
 8000832:	0013      	movs	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	1a9b      	subs	r3, r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	18cb      	adds	r3, r1, r3
 800083c:	181b      	adds	r3, r3, r0
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	b2dc      	uxtb	r4, r3
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	2028      	movs	r0, #40	; 0x28
 800084c:	0013      	movs	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	18cb      	adds	r3, r1, r3
 8000856:	181b      	adds	r3, r3, r0
 8000858:	1c22      	adds	r2, r4, #0
 800085a:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	202b      	movs	r0, #43	; 0x2b
 8000862:	0013      	movs	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	18cb      	adds	r3, r1, r3
 800086c:	181b      	adds	r3, r3, r0
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	0013      	movs	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	18cb      	adds	r3, r1, r3
 8000880:	3334      	adds	r3, #52	; 0x34
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	0013      	movs	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	18cb      	adds	r3, r1, r3
 8000894:	3338      	adds	r3, #56	; 0x38
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	0013      	movs	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	18cb      	adds	r3, r1, r3
 80008a8:	333c      	adds	r3, #60	; 0x3c
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d3b6      	bcc.n	800082c <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e04e      	b.n	8000962 <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	230a      	movs	r3, #10
 80008ca:	33ff      	adds	r3, #255	; 0xff
 80008cc:	0019      	movs	r1, r3
 80008ce:	0013      	movs	r3, r2
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	18c3      	adds	r3, r0, r3
 80008d8:	185b      	adds	r3, r3, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	b2dc      	uxtb	r4, r3
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	2384      	movs	r3, #132	; 0x84
 80008e8:	0059      	lsls	r1, r3, #1
 80008ea:	0013      	movs	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18c3      	adds	r3, r0, r3
 80008f4:	185b      	adds	r3, r3, r1
 80008f6:	1c22      	adds	r2, r4, #0
 80008f8:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	230c      	movs	r3, #12
 8000900:	33ff      	adds	r3, #255	; 0xff
 8000902:	0019      	movs	r1, r3
 8000904:	0013      	movs	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	18c3      	adds	r3, r0, r3
 800090e:	185b      	adds	r3, r3, r1
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	238a      	movs	r3, #138	; 0x8a
 800091a:	0059      	lsls	r1, r3, #1
 800091c:	0013      	movs	r3, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	18c3      	adds	r3, r0, r3
 8000926:	185b      	adds	r3, r3, r1
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	238c      	movs	r3, #140	; 0x8c
 8000932:	0059      	lsls	r1, r3, #1
 8000934:	0013      	movs	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	18c3      	adds	r3, r0, r3
 800093e:	185b      	adds	r3, r3, r1
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	238e      	movs	r3, #142	; 0x8e
 800094a:	0059      	lsls	r1, r3, #1
 800094c:	0013      	movs	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	18c3      	adds	r3, r0, r3
 8000956:	185b      	adds	r3, r3, r1
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d3ab      	bcc.n	80008c4 <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2240      	movs	r2, #64	; 0x40
 8000972:	2101      	movs	r1, #1
 8000974:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	2100      	movs	r1, #0
 800097e:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2244      	movs	r2, #68	; 0x44
 8000986:	2100      	movs	r1, #0
 8000988:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2250      	movs	r2, #80	; 0x50
 8000990:	2100      	movs	r1, #0
 8000992:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000994:	23bf      	movs	r3, #191	; 0xbf
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	b291      	uxth	r1, r2
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2224      	movs	r2, #36	; 0x24
 80009aa:	2100      	movs	r1, #0
 80009ac:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	23ea      	movs	r3, #234	; 0xea
 80009b2:	33ff      	adds	r3, #255	; 0xff
 80009b4:	2101      	movs	r1, #1
 80009b6:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b005      	add	sp, #20
 80009c0:	bd90      	pop	{r4, r7, pc}
	...

080009c4 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2258      	movs	r2, #88	; 0x58
 80009d2:	5a9b      	ldrh	r3, [r3, r2]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4905      	ldr	r1, [pc, #20]	; (80009f0 <HAL_PCD_Start+0x2c>)
 80009dc:	430a      	orrs	r2, r1
 80009de:	b291      	uxth	r1, r2
 80009e0:	2258      	movs	r2, #88	; 0x58
 80009e2:	5299      	strh	r1, [r3, r2]
  
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	ffff8000 	.word	0xffff8000

080009f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2244      	movs	r2, #68	; 0x44
 8000a06:	5a9b      	ldrh	r3, [r3, r2]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	401a      	ands	r2, r3
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	021b      	lsls	r3, r3, #8
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d103      	bne.n	8000a22 <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 fc47 	bl	80022b0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2244      	movs	r2, #68	; 0x44
 8000a28:	5a9b      	ldrh	r3, [r3, r2]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	401a      	ands	r2, r3
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d114      	bne.n	8000a66 <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2244      	movs	r2, #68	; 0x44
 8000a42:	5a9b      	ldrh	r3, [r3, r2]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4977      	ldr	r1, [pc, #476]	; (8000c28 <HAL_PCD_IRQHandler+0x234>)
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	b291      	uxth	r1, r2
 8000a50:	2244      	movs	r2, #68	; 0x44
 8000a52:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResetCallback(hpcd);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	0018      	movs	r0, r3
 8000a58:	f004 fe7d 	bl	8005756 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2100      	movs	r1, #0
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 f8ef 	bl	8000c44 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2244      	movs	r2, #68	; 0x44
 8000a6c:	5a9b      	ldrh	r3, [r3, r2]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	001a      	movs	r2, r3
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	01db      	lsls	r3, r3, #7
 8000a76:	401a      	ands	r2, r3
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	01db      	lsls	r3, r3, #7
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d10b      	bne.n	8000a98 <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2244      	movs	r2, #68	; 0x44
 8000a86:	5a9b      	ldrh	r3, [r3, r2]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <HAL_PCD_IRQHandler+0x238>)
 8000a90:	400a      	ands	r2, r1
 8000a92:	b291      	uxth	r1, r2
 8000a94:	2244      	movs	r2, #68	; 0x44
 8000a96:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2244      	movs	r2, #68	; 0x44
 8000a9e:	5a9b      	ldrh	r3, [r3, r2]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	019b      	lsls	r3, r3, #6
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d10b      	bne.n	8000aca <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	5a9b      	ldrh	r3, [r3, r2]
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	495b      	ldr	r1, [pc, #364]	; (8000c30 <HAL_PCD_IRQHandler+0x23c>)
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	b291      	uxth	r1, r2
 8000ac6:	2244      	movs	r2, #68	; 0x44
 8000ac8:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2244      	movs	r2, #68	; 0x44
 8000ad0:	5a9b      	ldrh	r3, [r3, r2]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	015b      	lsls	r3, r3, #5
 8000ada:	401a      	ands	r2, r3
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	015b      	lsls	r3, r3, #5
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d124      	bne.n	8000b2e <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	5a9b      	ldrh	r3, [r3, r2]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2104      	movs	r1, #4
 8000af4:	438a      	bics	r2, r1
 8000af6:	b291      	uxth	r1, r2
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	5299      	strh	r1, [r3, r2]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000afc:	23bd      	movs	r3, #189	; 0xbd
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	b291      	uxth	r1, r2
 8000b0a:	2240      	movs	r2, #64	; 0x40
 8000b0c:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f004 fe61 	bl	80057d8 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2244      	movs	r2, #68	; 0x44
 8000b1c:	5a9b      	ldrh	r3, [r3, r2]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4943      	ldr	r1, [pc, #268]	; (8000c34 <HAL_PCD_IRQHandler+0x240>)
 8000b26:	400a      	ands	r2, r1
 8000b28:	b291      	uxth	r1, r2
 8000b2a:	2244      	movs	r2, #68	; 0x44
 8000b2c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2244      	movs	r2, #68	; 0x44
 8000b34:	5a9b      	ldrh	r3, [r3, r2]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	401a      	ands	r2, r3
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d134      	bne.n	8000bb2 <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2244      	movs	r2, #68	; 0x44
 8000b4e:	5a9b      	ldrh	r3, [r3, r2]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4938      	ldr	r1, [pc, #224]	; (8000c38 <HAL_PCD_IRQHandler+0x244>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	b291      	uxth	r1, r2
 8000b5c:	2244      	movs	r2, #68	; 0x44
 8000b5e:	5299      	strh	r1, [r3, r2]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2240      	movs	r2, #64	; 0x40
 8000b66:	5a9b      	ldrh	r3, [r3, r2]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2108      	movs	r1, #8
 8000b70:	430a      	orrs	r2, r1
 8000b72:	b291      	uxth	r1, r2
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2240      	movs	r2, #64	; 0x40
 8000b7e:	5a9b      	ldrh	r3, [r3, r2]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2104      	movs	r1, #4
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	b291      	uxth	r1, r2
 8000b8c:	2240      	movs	r2, #64	; 0x40
 8000b8e:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2244      	movs	r2, #68	; 0x44
 8000b96:	5a9b      	ldrh	r3, [r3, r2]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	015b      	lsls	r3, r3, #5
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	015b      	lsls	r3, r3, #5
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d003      	beq.n	8000bb2 <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f004 fdf7 	bl	80057a0 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2244      	movs	r2, #68	; 0x44
 8000bb8:	5a9b      	ldrh	r3, [r3, r2]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d10f      	bne.n	8000bec <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2244      	movs	r2, #68	; 0x44
 8000bd2:	5a9b      	ldrh	r3, [r3, r2]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4918      	ldr	r1, [pc, #96]	; (8000c3c <HAL_PCD_IRQHandler+0x248>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	b291      	uxth	r1, r2
 8000be0:	2244      	movs	r2, #68	; 0x44
 8000be2:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SOFCallback(hpcd);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	0018      	movs	r0, r3
 8000be8:	f004 fda6 	bl	8005738 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2244      	movs	r2, #68	; 0x44
 8000bf2:	5a9b      	ldrh	r3, [r3, r2]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d10b      	bne.n	8000c1e <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2244      	movs	r2, #68	; 0x44
 8000c0c:	5a9b      	ldrh	r3, [r3, r2]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	490a      	ldr	r1, [pc, #40]	; (8000c40 <HAL_PCD_IRQHandler+0x24c>)
 8000c16:	400a      	ands	r2, r1
 8000c18:	b291      	uxth	r1, r2
 8000c1a:	2244      	movs	r2, #68	; 0x44
 8000c1c:	5299      	strh	r1, [r3, r2]
  }
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	fffffbff 	.word	0xfffffbff
 8000c2c:	ffffbfff 	.word	0xffffbfff
 8000c30:	ffffdfff 	.word	0xffffdfff
 8000c34:	ffffefff 	.word	0xffffefff
 8000c38:	fffff7ff 	.word	0xfffff7ff
 8000c3c:	fffffdff 	.word	0xfffffdff
 8000c40:	fffffeff 	.word	0xfffffeff

08000c44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	000a      	movs	r2, r1
 8000c4e:	1cfb      	adds	r3, r7, #3
 8000c50:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	23f4      	movs	r3, #244	; 0xf4
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <HAL_PCD_SetAddress+0x1e>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e019      	b.n	8000c96 <HAL_PCD_SetAddress+0x52>
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	23f4      	movs	r3, #244	; 0xf4
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2101      	movs	r1, #1
 8000c6a:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 8000c6c:	1cfb      	adds	r3, r7, #3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d105      	bne.n	8000c80 <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	224c      	movs	r2, #76	; 0x4c
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	5299      	strh	r1, [r3, r2]
 8000c7e:	e004      	b.n	8000c8a <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1cfa      	adds	r2, r7, #3
 8000c84:	2124      	movs	r1, #36	; 0x24
 8000c86:	7812      	ldrb	r2, [r2, #0]
 8000c88:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	23f4      	movs	r3, #244	; 0xf4
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2100      	movs	r1, #0
 8000c92:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	000c      	movs	r4, r1
 8000caa:	0010      	movs	r0, r2
 8000cac:	0019      	movs	r1, r3
 8000cae:	1cfb      	adds	r3, r7, #3
 8000cb0:	1c22      	adds	r2, r4, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	003b      	movs	r3, r7
 8000cb6:	1c02      	adds	r2, r0, #0
 8000cb8:	801a      	strh	r2, [r3, #0]
 8000cba:	1cbb      	adds	r3, r7, #2
 8000cbc:	1c0a      	adds	r2, r1, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000cc0:	2311      	movs	r3, #17
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000cc8:	1cfb      	adds	r3, r7, #3
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da0c      	bge.n	8000cec <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cd2:	1cfb      	adds	r3, r7, #3
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	227f      	movs	r2, #127	; 0x7f
 8000cd8:	401a      	ands	r2, r3
 8000cda:	0013      	movs	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	3328      	adds	r3, #40	; 0x28
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	18d3      	adds	r3, r2, r3
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e00c      	b.n	8000d06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000cec:	1cfb      	adds	r3, r7, #3
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	227f      	movs	r2, #127	; 0x7f
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	3309      	adds	r3, #9
 8000cfe:	33ff      	adds	r3, #255	; 0xff
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 8000d06:	1cfb      	adds	r3, r7, #3
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	227f      	movs	r2, #127	; 0x7f
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000d14:	1cfb      	adds	r3, r7, #3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	09db      	lsrs	r3, r3, #7
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	001a      	movs	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8000d26:	003b      	movs	r3, r7
 8000d28:	881a      	ldrh	r2, [r3, #0]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	1cba      	adds	r2, r7, #2
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	23f4      	movs	r3, #244	; 0xf4
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	5cd3      	ldrb	r3, [r2, r3]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <HAL_PCD_EP_Open+0xa6>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e330      	b.n	80013a8 <HAL_PCD_EP_Open+0x708>
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	23f4      	movs	r3, #244	; 0xf4
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	78db      	ldrb	r3, [r3, #3]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d038      	beq.n	8000dca <HAL_PCD_EP_Open+0x12a>
 8000d58:	dc67      	bgt.n	8000e2a <HAL_PCD_EP_Open+0x18a>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d01d      	beq.n	8000d9a <HAL_PCD_EP_Open+0xfa>
 8000d5e:	dc64      	bgt.n	8000e2a <HAL_PCD_EP_Open+0x18a>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <HAL_PCD_EP_Open+0xca>
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d048      	beq.n	8000dfa <HAL_PCD_EP_Open+0x15a>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 8000d68:	e05f      	b.n	8000e2a <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	001a      	movs	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	18d3      	adds	r3, r2, r3
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4abe      	ldr	r2, [pc, #760]	; (8001078 <HAL_PCD_EP_Open+0x3d8>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0019      	movs	r1, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	18cb      	adds	r3, r1, r3
 8000d90:	49ba      	ldr	r1, [pc, #744]	; (800107c <HAL_PCD_EP_Open+0x3dc>)
 8000d92:	430a      	orrs	r2, r1
 8000d94:	b292      	uxth	r2, r2
 8000d96:	801a      	strh	r2, [r3, #0]
    break;
 8000d98:	e048      	b.n	8000e2c <HAL_PCD_EP_Open+0x18c>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	001a      	movs	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	18d3      	adds	r3, r2, r3
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	4ab2      	ldr	r2, [pc, #712]	; (8001078 <HAL_PCD_EP_Open+0x3d8>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	0019      	movs	r1, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	18cb      	adds	r3, r1, r3
 8000dc0:	49af      	ldr	r1, [pc, #700]	; (8001080 <HAL_PCD_EP_Open+0x3e0>)
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	b292      	uxth	r2, r2
 8000dc6:	801a      	strh	r2, [r3, #0]
    break;
 8000dc8:	e030      	b.n	8000e2c <HAL_PCD_EP_Open+0x18c>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	001a      	movs	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	18d3      	adds	r3, r2, r3
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4aa6      	ldr	r2, [pc, #664]	; (8001078 <HAL_PCD_EP_Open+0x3d8>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	0019      	movs	r1, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	18cb      	adds	r3, r1, r3
 8000df0:	49a4      	ldr	r1, [pc, #656]	; (8001084 <HAL_PCD_EP_Open+0x3e4>)
 8000df2:	430a      	orrs	r2, r1
 8000df4:	b292      	uxth	r2, r2
 8000df6:	801a      	strh	r2, [r3, #0]
    break;
 8000df8:	e018      	b.n	8000e2c <HAL_PCD_EP_Open+0x18c>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	001a      	movs	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	18d3      	adds	r3, r2, r3
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4a9a      	ldr	r2, [pc, #616]	; (8001078 <HAL_PCD_EP_Open+0x3d8>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	0019      	movs	r1, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18cb      	adds	r3, r1, r3
 8000e20:	4999      	ldr	r1, [pc, #612]	; (8001088 <HAL_PCD_EP_Open+0x3e8>)
 8000e22:	430a      	orrs	r2, r1
 8000e24:	b292      	uxth	r2, r2
 8000e26:	801a      	strh	r2, [r3, #0]
    break;
 8000e28:	e000      	b.n	8000e2c <HAL_PCD_EP_Open+0x18c>
    break;
 8000e2a:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4a93      	ldr	r2, [pc, #588]	; (800108c <HAL_PCD_EP_Open+0x3ec>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0019      	movs	r1, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	18cb      	adds	r3, r1, r3
 8000e5c:	4988      	ldr	r1, [pc, #544]	; (8001080 <HAL_PCD_EP_Open+0x3e0>)
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	b292      	uxth	r2, r2
 8000e62:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	7a9b      	ldrb	r3, [r3, #10]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d000      	beq.n	8000e6e <HAL_PCD_EP_Open+0x1ce>
 8000e6c:	e11e      	b.n	80010ac <HAL_PCD_EP_Open+0x40c>
  {
    if (ep->is_in)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d059      	beq.n	8000f2a <HAL_PCD_EP_Open+0x28a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	889b      	ldrh	r3, [r3, #4]
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2250      	movs	r2, #80	; 0x50
 8000e84:	5a9b      	ldrh	r3, [r3, r2]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	001a      	movs	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	001a      	movs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	00d2      	lsls	r2, r2, #3
 8000e9e:	4694      	mov	ip, r2
 8000ea0:	4463      	add	r3, ip
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	1c0b      	adds	r3, r1, #0
 8000ea6:	18db      	adds	r3, r3, r3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	18d3      	adds	r3, r2, r3
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2340      	movs	r3, #64	; 0x40
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d016      	beq.n	8000ef4 <HAL_PCD_EP_Open+0x254>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	001a      	movs	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	18d3      	adds	r3, r2, r3
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4a6c      	ldr	r2, [pc, #432]	; (800108c <HAL_PCD_EP_Open+0x3ec>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	18cb      	adds	r3, r1, r3
 8000eec:	4968      	ldr	r1, [pc, #416]	; (8001090 <HAL_PCD_EP_Open+0x3f0>)
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_PCD_EP_Open+0x3f4>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	b29c      	uxth	r4, r3
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	4063      	eors	r3, r4
 8000f10:	b29c      	uxth	r4, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	001a      	movs	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	18d3      	adds	r3, r2, r3
 8000f20:	4a57      	ldr	r2, [pc, #348]	; (8001080 <HAL_PCD_EP_Open+0x3e0>)
 8000f22:	4322      	orrs	r2, r4
 8000f24:	b292      	uxth	r2, r2
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	e236      	b.n	8001398 <HAL_PCD_EP_Open+0x6f8>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	889b      	ldrh	r3, [r3, #4]
 8000f2e:	085b      	lsrs	r3, r3, #1
 8000f30:	b299      	uxth	r1, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2250      	movs	r2, #80	; 0x50
 8000f38:	5a9b      	ldrh	r3, [r3, r2]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	18d3      	adds	r3, r2, r3
 8000f46:	001a      	movs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	4a52      	ldr	r2, [pc, #328]	; (8001098 <HAL_PCD_EP_Open+0x3f8>)
 8000f50:	4694      	mov	ip, r2
 8000f52:	4463      	add	r3, ip
 8000f54:	001a      	movs	r2, r3
 8000f56:	1c0b      	adds	r3, r1, #0
 8000f58:	18db      	adds	r3, r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2250      	movs	r2, #80	; 0x50
 8000f64:	5a9b      	ldrh	r3, [r3, r2]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	001a      	movs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	001a      	movs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_PCD_EP_Open+0x3fc>)
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	4463      	add	r3, ip
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b3e      	cmp	r3, #62	; 0x3e
 8000f88:	d91a      	bls.n	8000fc0 <HAL_PCD_EP_Open+0x320>
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	095a      	lsrs	r2, r3, #5
 8000f90:	2112      	movs	r1, #18
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	801a      	strh	r2, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	221f      	movs	r2, #31
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d104      	bne.n	8000faa <HAL_PCD_EP_Open+0x30a>
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	801a      	strh	r2, [r3, #0]
 8000faa:	2312      	movs	r3, #18
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	029b      	lsls	r3, r3, #10
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <HAL_PCD_EP_Open+0x400>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	801a      	strh	r2, [r3, #0]
 8000fbe:	e016      	b.n	8000fee <HAL_PCD_EP_Open+0x34e>
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	085a      	lsrs	r2, r3, #1
 8000fc6:	2112      	movs	r1, #18
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	801a      	strh	r2, [r3, #0]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d004      	beq.n	8000fe0 <HAL_PCD_EP_Open+0x340>
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	3201      	adds	r2, #1
 8000fde:	801a      	strh	r2, [r3, #0]
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	001a      	movs	r2, r3
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	01db      	lsls	r3, r3, #7
 8001006:	4013      	ands	r3, r2
 8001008:	d016      	beq.n	8001038 <HAL_PCD_EP_Open+0x398>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	001a      	movs	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	18d3      	adds	r3, r2, r3
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_PCD_EP_Open+0x3ec>)
 800101e:	4013      	ands	r3, r2
 8001020:	b29a      	uxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0019      	movs	r1, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	18cb      	adds	r3, r1, r3
 8001030:	491c      	ldr	r1, [pc, #112]	; (80010a4 <HAL_PCD_EP_Open+0x404>)
 8001032:	430a      	orrs	r2, r1
 8001034:	b292      	uxth	r2, r2
 8001036:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	001a      	movs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_PCD_EP_Open+0x408>)
 800104c:	4013      	ands	r3, r2
 800104e:	b29c      	uxth	r4, r3
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	4063      	eors	r3, r4
 8001056:	b29c      	uxth	r4, r3
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	019b      	lsls	r3, r3, #6
 800105c:	4063      	eors	r3, r4
 800105e:	b29c      	uxth	r4, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	001a      	movs	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_PCD_EP_Open+0x3e0>)
 8001070:	4322      	orrs	r2, r4
 8001072:	b292      	uxth	r2, r2
 8001074:	801a      	strh	r2, [r3, #0]
 8001076:	e18f      	b.n	8001398 <HAL_PCD_EP_Open+0x6f8>
 8001078:	0000090f 	.word	0x0000090f
 800107c:	ffff8280 	.word	0xffff8280
 8001080:	ffff8080 	.word	0xffff8080
 8001084:	ffff8680 	.word	0xffff8680
 8001088:	ffff8480 	.word	0xffff8480
 800108c:	00000f0f 	.word	0x00000f0f
 8001090:	ffff80c0 	.word	0xffff80c0
 8001094:	ffff8fbf 	.word	0xffff8fbf
 8001098:	00000404 	.word	0x00000404
 800109c:	00000406 	.word	0x00000406
 80010a0:	ffff8000 	.word	0xffff8000
 80010a4:	ffffc080 	.word	0xffffc080
 80010a8:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	001a      	movs	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4abc      	ldr	r2, [pc, #752]	; (80013b0 <HAL_PCD_EP_Open+0x710>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0019      	movs	r1, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	18cb      	adds	r3, r1, r3
 80010d2:	49b8      	ldr	r1, [pc, #736]	; (80013b4 <HAL_PCD_EP_Open+0x714>)
 80010d4:	430a      	orrs	r2, r1
 80010d6:	b292      	uxth	r2, r2
 80010d8:	801a      	strh	r2, [r3, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	88db      	ldrh	r3, [r3, #6]
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	b299      	uxth	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2250      	movs	r2, #80	; 0x50
 80010e8:	5a9b      	ldrh	r3, [r3, r2]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	001a      	movs	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	001a      	movs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	00d2      	lsls	r2, r2, #3
 8001102:	4694      	mov	ip, r2
 8001104:	4463      	add	r3, ip
 8001106:	001a      	movs	r2, r3
 8001108:	1c0b      	adds	r3, r1, #0
 800110a:	18db      	adds	r3, r3, r3
 800110c:	b29b      	uxth	r3, r3
 800110e:	8013      	strh	r3, [r2, #0]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	891b      	ldrh	r3, [r3, #8]
 8001114:	085b      	lsrs	r3, r3, #1
 8001116:	b299      	uxth	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2250      	movs	r2, #80	; 0x50
 800111e:	5a9b      	ldrh	r3, [r3, r2]
 8001120:	b29b      	uxth	r3, r3
 8001122:	001a      	movs	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	001a      	movs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	18d3      	adds	r3, r2, r3
 8001134:	4aa0      	ldr	r2, [pc, #640]	; (80013b8 <HAL_PCD_EP_Open+0x718>)
 8001136:	4694      	mov	ip, r2
 8001138:	4463      	add	r3, ip
 800113a:	001a      	movs	r2, r3
 800113c:	1c0b      	adds	r3, r1, #0
 800113e:	18db      	adds	r3, r3, r3
 8001140:	b29b      	uxth	r3, r3
 8001142:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d000      	beq.n	800114e <HAL_PCD_EP_Open+0x4ae>
 800114c:	e096      	b.n	800127c <HAL_PCD_EP_Open+0x5dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	001a      	movs	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	18d3      	adds	r3, r2, r3
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	001a      	movs	r2, r3
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	01db      	lsls	r3, r3, #7
 8001166:	4013      	ands	r3, r2
 8001168:	d016      	beq.n	8001198 <HAL_PCD_EP_Open+0x4f8>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	001a      	movs	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	4a8f      	ldr	r2, [pc, #572]	; (80013bc <HAL_PCD_EP_Open+0x71c>)
 800117e:	4013      	ands	r3, r2
 8001180:	b29a      	uxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0019      	movs	r1, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	18cb      	adds	r3, r1, r3
 8001190:	498b      	ldr	r1, [pc, #556]	; (80013c0 <HAL_PCD_EP_Open+0x720>)
 8001192:	430a      	orrs	r2, r1
 8001194:	b292      	uxth	r2, r2
 8001196:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	001a      	movs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	001a      	movs	r2, r3
 80011ac:	2340      	movs	r3, #64	; 0x40
 80011ae:	4013      	ands	r3, r2
 80011b0:	d016      	beq.n	80011e0 <HAL_PCD_EP_Open+0x540>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	001a      	movs	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4a7d      	ldr	r2, [pc, #500]	; (80013bc <HAL_PCD_EP_Open+0x71c>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0019      	movs	r1, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	18cb      	adds	r3, r1, r3
 80011d8:	497a      	ldr	r1, [pc, #488]	; (80013c4 <HAL_PCD_EP_Open+0x724>)
 80011da:	430a      	orrs	r2, r1
 80011dc:	b292      	uxth	r2, r2
 80011de:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	001a      	movs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	18d3      	adds	r3, r2, r3
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4a72      	ldr	r2, [pc, #456]	; (80013bc <HAL_PCD_EP_Open+0x71c>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0019      	movs	r1, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	18cb      	adds	r3, r1, r3
 8001206:	496f      	ldr	r1, [pc, #444]	; (80013c4 <HAL_PCD_EP_Open+0x724>)
 8001208:	430a      	orrs	r2, r1
 800120a:	b292      	uxth	r2, r2
 800120c:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	001a      	movs	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	4a69      	ldr	r2, [pc, #420]	; (80013c8 <HAL_PCD_EP_Open+0x728>)
 8001222:	4013      	ands	r3, r2
 8001224:	b29c      	uxth	r4, r3
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	015b      	lsls	r3, r3, #5
 800122a:	4063      	eors	r3, r4
 800122c:	b29c      	uxth	r4, r3
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	019b      	lsls	r3, r3, #6
 8001232:	4063      	eors	r3, r4
 8001234:	b29c      	uxth	r4, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	001a      	movs	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	4a61      	ldr	r2, [pc, #388]	; (80013cc <HAL_PCD_EP_Open+0x72c>)
 8001246:	4322      	orrs	r2, r4
 8001248:	b292      	uxth	r2, r2
 800124a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	001a      	movs	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	18d3      	adds	r3, r2, r3
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4a5c      	ldr	r2, [pc, #368]	; (80013d0 <HAL_PCD_EP_Open+0x730>)
 8001260:	4013      	ands	r3, r2
 8001262:	b29c      	uxth	r4, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	001a      	movs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	18d3      	adds	r3, r2, r3
 8001272:	4a56      	ldr	r2, [pc, #344]	; (80013cc <HAL_PCD_EP_Open+0x72c>)
 8001274:	4322      	orrs	r2, r4
 8001276:	b292      	uxth	r2, r2
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	e08d      	b.n	8001398 <HAL_PCD_EP_Open+0x6f8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	001a      	movs	r2, r3
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	01db      	lsls	r3, r3, #7
 8001294:	4013      	ands	r3, r2
 8001296:	d016      	beq.n	80012c6 <HAL_PCD_EP_Open+0x626>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	001a      	movs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <HAL_PCD_EP_Open+0x71c>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0019      	movs	r1, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	18cb      	adds	r3, r1, r3
 80012be:	4940      	ldr	r1, [pc, #256]	; (80013c0 <HAL_PCD_EP_Open+0x720>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	b292      	uxth	r2, r2
 80012c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	001a      	movs	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	18d3      	adds	r3, r2, r3
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	001a      	movs	r2, r3
 80012da:	2340      	movs	r3, #64	; 0x40
 80012dc:	4013      	ands	r3, r2
 80012de:	d016      	beq.n	800130e <HAL_PCD_EP_Open+0x66e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	001a      	movs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4a32      	ldr	r2, [pc, #200]	; (80013bc <HAL_PCD_EP_Open+0x71c>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0019      	movs	r1, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	18cb      	adds	r3, r1, r3
 8001306:	492f      	ldr	r1, [pc, #188]	; (80013c4 <HAL_PCD_EP_Open+0x724>)
 8001308:	430a      	orrs	r2, r1
 800130a:	b292      	uxth	r2, r2
 800130c:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	001a      	movs	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18d3      	adds	r3, r2, r3
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <HAL_PCD_EP_Open+0x71c>)
 8001322:	4013      	ands	r3, r2
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0019      	movs	r1, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	18cb      	adds	r3, r1, r3
 8001334:	4922      	ldr	r1, [pc, #136]	; (80013c0 <HAL_PCD_EP_Open+0x720>)
 8001336:	430a      	orrs	r2, r1
 8001338:	b292      	uxth	r2, r2
 800133a:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	001a      	movs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_PCD_EP_Open+0x730>)
 8001350:	4013      	ands	r3, r2
 8001352:	b29c      	uxth	r4, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	001a      	movs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_PCD_EP_Open+0x72c>)
 8001364:	4322      	orrs	r2, r4
 8001366:	b292      	uxth	r2, r2
 8001368:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	001a      	movs	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	18d3      	adds	r3, r2, r3
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_PCD_EP_Open+0x728>)
 800137e:	4013      	ands	r3, r2
 8001380:	b29c      	uxth	r4, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	001a      	movs	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	18d3      	adds	r3, r2, r3
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_PCD_EP_Open+0x72c>)
 8001392:	4322      	orrs	r2, r4
 8001394:	b292      	uxth	r2, r2
 8001396:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	23f4      	movs	r3, #244	; 0xf4
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2100      	movs	r1, #0
 80013a0:	54d1      	strb	r1, [r2, r3]
  return ret;
 80013a2:	2311      	movs	r3, #17
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b007      	add	sp, #28
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	00000e0f 	.word	0x00000e0f
 80013b4:	ffff8180 	.word	0xffff8180
 80013b8:	00000404 	.word	0x00000404
 80013bc:	00000f0f 	.word	0x00000f0f
 80013c0:	ffffc080 	.word	0xffffc080
 80013c4:	ffff80c0 	.word	0xffff80c0
 80013c8:	ffffbf8f 	.word	0xffffbf8f
 80013cc:	ffff8080 	.word	0xffff8080
 80013d0:	ffff8fbf 	.word	0xffff8fbf

080013d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	000a      	movs	r2, r1
 80013de:	1cfb      	adds	r3, r7, #3
 80013e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80013e2:	1cfb      	adds	r3, r7, #3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da0c      	bge.n	8001406 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013ec:	1cfb      	adds	r3, r7, #3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	227f      	movs	r2, #127	; 0x7f
 80013f2:	401a      	ands	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3328      	adds	r3, #40	; 0x28
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	18d3      	adds	r3, r2, r3
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e00c      	b.n	8001420 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	227f      	movs	r2, #127	; 0x7f
 800140c:	401a      	ands	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	3309      	adds	r3, #9
 8001418:	33ff      	adds	r3, #255	; 0xff
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001420:	1cfb      	adds	r3, r7, #3
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	227f      	movs	r2, #127	; 0x7f
 8001426:	4013      	ands	r3, r2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800142e:	1cfb      	adds	r3, r7, #3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	09db      	lsrs	r3, r3, #7
 8001438:	b2db      	uxtb	r3, r3
 800143a:	001a      	movs	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	23f4      	movs	r3, #244	; 0xf4
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_PCD_EP_Close+0x7c>
 800144c:	2302      	movs	r3, #2
 800144e:	e1ae      	b.n	80017ae <HAL_PCD_EP_Close+0x3da>
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	23f4      	movs	r3, #244	; 0xf4
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2101      	movs	r1, #1
 8001458:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	7a9b      	ldrb	r3, [r3, #10]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d000      	beq.n	8001464 <HAL_PCD_EP_Close+0x90>
 8001462:	e07c      	b.n	800155e <HAL_PCD_EP_Close+0x18a>
  {
    if (ep->is_in)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d03b      	beq.n	80014e4 <HAL_PCD_EP_Close+0x110>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	001a      	movs	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	001a      	movs	r2, r3
 8001480:	2340      	movs	r3, #64	; 0x40
 8001482:	4013      	ands	r3, r2
 8001484:	d016      	beq.n	80014b4 <HAL_PCD_EP_Close+0xe0>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	001a      	movs	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4ac7      	ldr	r2, [pc, #796]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 800149a:	4013      	ands	r3, r2
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0019      	movs	r1, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	18cb      	adds	r3, r1, r3
 80014ac:	49c3      	ldr	r1, [pc, #780]	; (80017bc <HAL_PCD_EP_Close+0x3e8>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	b292      	uxth	r2, r2
 80014b2:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	001a      	movs	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	18d3      	adds	r3, r2, r3
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4abe      	ldr	r2, [pc, #760]	; (80017c0 <HAL_PCD_EP_Close+0x3ec>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	b29c      	uxth	r4, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	001a      	movs	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	4aba      	ldr	r2, [pc, #744]	; (80017c4 <HAL_PCD_EP_Close+0x3f0>)
 80014dc:	4322      	orrs	r2, r4
 80014de:	b292      	uxth	r2, r2
 80014e0:	801a      	strh	r2, [r3, #0]
 80014e2:	e15e      	b.n	80017a2 <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	001a      	movs	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	001a      	movs	r2, r3
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	4013      	ands	r3, r2
 80014fe:	d016      	beq.n	800152e <HAL_PCD_EP_Close+0x15a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	001a      	movs	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4aa9      	ldr	r2, [pc, #676]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 8001514:	4013      	ands	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0019      	movs	r1, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	18cb      	adds	r3, r1, r3
 8001526:	49a8      	ldr	r1, [pc, #672]	; (80017c8 <HAL_PCD_EP_Close+0x3f4>)
 8001528:	430a      	orrs	r2, r1
 800152a:	b292      	uxth	r2, r2
 800152c:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	001a      	movs	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4aa2      	ldr	r2, [pc, #648]	; (80017cc <HAL_PCD_EP_Close+0x3f8>)
 8001542:	4013      	ands	r3, r2
 8001544:	b29c      	uxth	r4, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	001a      	movs	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	4a9b      	ldr	r2, [pc, #620]	; (80017c4 <HAL_PCD_EP_Close+0x3f0>)
 8001556:	4322      	orrs	r2, r4
 8001558:	b292      	uxth	r2, r2
 800155a:	801a      	strh	r2, [r3, #0]
 800155c:	e121      	b.n	80017a2 <HAL_PCD_EP_Close+0x3ce>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d000      	beq.n	8001568 <HAL_PCD_EP_Close+0x194>
 8001566:	e08e      	b.n	8001686 <HAL_PCD_EP_Close+0x2b2>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	001a      	movs	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	18d3      	adds	r3, r2, r3
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	001a      	movs	r2, r3
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	01db      	lsls	r3, r3, #7
 8001580:	4013      	ands	r3, r2
 8001582:	d016      	beq.n	80015b2 <HAL_PCD_EP_Close+0x1de>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4a88      	ldr	r2, [pc, #544]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 8001598:	4013      	ands	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0019      	movs	r1, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	18cb      	adds	r3, r1, r3
 80015aa:	4987      	ldr	r1, [pc, #540]	; (80017c8 <HAL_PCD_EP_Close+0x3f4>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b292      	uxth	r2, r2
 80015b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	001a      	movs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	18d3      	adds	r3, r2, r3
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	001a      	movs	r2, r3
 80015c6:	2340      	movs	r3, #64	; 0x40
 80015c8:	4013      	ands	r3, r2
 80015ca:	d016      	beq.n	80015fa <HAL_PCD_EP_Close+0x226>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	001a      	movs	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	18d3      	adds	r3, r2, r3
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4a76      	ldr	r2, [pc, #472]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0019      	movs	r1, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	18cb      	adds	r3, r1, r3
 80015f2:	4972      	ldr	r1, [pc, #456]	; (80017bc <HAL_PCD_EP_Close+0x3e8>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	b292      	uxth	r2, r2
 80015f8:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	001a      	movs	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	18d3      	adds	r3, r2, r3
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 800160e:	4013      	ands	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0019      	movs	r1, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	18cb      	adds	r3, r1, r3
 8001620:	4966      	ldr	r1, [pc, #408]	; (80017bc <HAL_PCD_EP_Close+0x3e8>)
 8001622:	430a      	orrs	r2, r1
 8001624:	b292      	uxth	r2, r2
 8001626:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	001a      	movs	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4a64      	ldr	r2, [pc, #400]	; (80017cc <HAL_PCD_EP_Close+0x3f8>)
 800163c:	4013      	ands	r3, r2
 800163e:	b29c      	uxth	r4, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	001a      	movs	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	18d3      	adds	r3, r2, r3
 800164e:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_PCD_EP_Close+0x3f0>)
 8001650:	4322      	orrs	r2, r4
 8001652:	b292      	uxth	r2, r2
 8001654:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	001a      	movs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4a55      	ldr	r2, [pc, #340]	; (80017c0 <HAL_PCD_EP_Close+0x3ec>)
 800166a:	4013      	ands	r3, r2
 800166c:	b29c      	uxth	r4, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	001a      	movs	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_PCD_EP_Close+0x3f0>)
 800167e:	4322      	orrs	r2, r4
 8001680:	b292      	uxth	r2, r2
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	e08d      	b.n	80017a2 <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	001a      	movs	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	18d3      	adds	r3, r2, r3
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	001a      	movs	r2, r3
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	01db      	lsls	r3, r3, #7
 800169e:	4013      	ands	r3, r2
 80016a0:	d016      	beq.n	80016d0 <HAL_PCD_EP_Close+0x2fc>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	001a      	movs	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4a40      	ldr	r2, [pc, #256]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0019      	movs	r1, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	18cb      	adds	r3, r1, r3
 80016c8:	493f      	ldr	r1, [pc, #252]	; (80017c8 <HAL_PCD_EP_Close+0x3f4>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	b292      	uxth	r2, r2
 80016ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	001a      	movs	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	001a      	movs	r2, r3
 80016e4:	2340      	movs	r3, #64	; 0x40
 80016e6:	4013      	ands	r3, r2
 80016e8:	d016      	beq.n	8001718 <HAL_PCD_EP_Close+0x344>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	001a      	movs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	18d3      	adds	r3, r2, r3
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4a2e      	ldr	r2, [pc, #184]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 80016fe:	4013      	ands	r3, r2
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0019      	movs	r1, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	18cb      	adds	r3, r1, r3
 8001710:	492a      	ldr	r1, [pc, #168]	; (80017bc <HAL_PCD_EP_Close+0x3e8>)
 8001712:	430a      	orrs	r2, r1
 8001714:	b292      	uxth	r2, r2
 8001716:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	001a      	movs	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	18d3      	adds	r3, r2, r3
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <HAL_PCD_EP_Close+0x3e4>)
 800172c:	4013      	ands	r3, r2
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0019      	movs	r1, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	18cb      	adds	r3, r1, r3
 800173e:	4922      	ldr	r1, [pc, #136]	; (80017c8 <HAL_PCD_EP_Close+0x3f4>)
 8001740:	430a      	orrs	r2, r1
 8001742:	b292      	uxth	r2, r2
 8001744:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	001a      	movs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	18d3      	adds	r3, r2, r3
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_PCD_EP_Close+0x3ec>)
 800175a:	4013      	ands	r3, r2
 800175c:	b29c      	uxth	r4, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	001a      	movs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <HAL_PCD_EP_Close+0x3f0>)
 800176e:	4322      	orrs	r2, r4
 8001770:	b292      	uxth	r2, r2
 8001772:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	001a      	movs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	18d3      	adds	r3, r2, r3
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_PCD_EP_Close+0x3f8>)
 8001788:	4013      	ands	r3, r2
 800178a:	b29c      	uxth	r4, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	001a      	movs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	18d3      	adds	r3, r2, r3
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_PCD_EP_Close+0x3f0>)
 800179c:	4322      	orrs	r2, r4
 800179e:	b292      	uxth	r2, r2
 80017a0:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	23f4      	movs	r3, #244	; 0xf4
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2100      	movs	r1, #0
 80017aa:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b005      	add	sp, #20
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	00000f0f 	.word	0x00000f0f
 80017bc:	ffff80c0 	.word	0xffff80c0
 80017c0:	ffff8fbf 	.word	0xffff8fbf
 80017c4:	ffff8080 	.word	0xffff8080
 80017c8:	ffffc080 	.word	0xffffc080
 80017cc:	ffffbf8f 	.word	0xffffbf8f

080017d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08b      	sub	sp, #44	; 0x2c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	200b      	movs	r0, #11
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	1c0a      	adds	r2, r1, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80017e4:	0001      	movs	r1, r0
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	227f      	movs	r2, #127	; 0x7f
 80017ec:	401a      	ands	r2, r3
 80017ee:	0013      	movs	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	3309      	adds	r3, #9
 80017f8:	33ff      	adds	r3, #255	; 0xff
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	2200      	movs	r2, #0
 8001816:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	227f      	movs	r2, #127	; 0x7f
 800181e:	4013      	ands	r3, r2
 8001820:	b2da      	uxtb	r2, r3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	429a      	cmp	r2, r3
 8001830:	d909      	bls.n	8001846 <HAL_PCD_EP_Receive+0x76>
  {
    len=ep->maxpacket;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	1ad2      	subs	r2, r2, r3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	e005      	b.n	8001852 <HAL_PCD_EP_Receive+0x82>
  }
  else
  {
    len=ep->xfer_len;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	7a9b      	ldrb	r3, [r3, #10]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d143      	bne.n	80018e2 <HAL_PCD_EP_Receive+0x112>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2250      	movs	r2, #80	; 0x50
 8001860:	5a9b      	ldrh	r3, [r3, r2]
 8001862:	b29b      	uxth	r3, r3
 8001864:	001a      	movs	r2, r3
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	001a      	movs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	18d3      	adds	r3, r2, r3
 8001876:	4a8d      	ldr	r2, [pc, #564]	; (8001aac <HAL_PCD_EP_Receive+0x2dc>)
 8001878:	4694      	mov	ip, r2
 800187a:	4463      	add	r3, ip
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b3e      	cmp	r3, #62	; 0x3e
 8001882:	d918      	bls.n	80018b6 <HAL_PCD_EP_Receive+0xe6>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	095a      	lsrs	r2, r3, #5
 8001888:	2126      	movs	r1, #38	; 0x26
 800188a:	187b      	adds	r3, r7, r1
 800188c:	801a      	strh	r2, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	221f      	movs	r2, #31
 8001892:	4013      	ands	r3, r2
 8001894:	d104      	bne.n	80018a0 <HAL_PCD_EP_Receive+0xd0>
 8001896:	187b      	adds	r3, r7, r1
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	187b      	adds	r3, r7, r1
 800189c:	3a01      	subs	r2, #1
 800189e:	801a      	strh	r2, [r3, #0]
 80018a0:	2326      	movs	r3, #38	; 0x26
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4a81      	ldr	r2, [pc, #516]	; (8001ab0 <HAL_PCD_EP_Receive+0x2e0>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	801a      	strh	r2, [r3, #0]
 80018b4:	e0d5      	b.n	8001a62 <HAL_PCD_EP_Receive+0x292>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	085a      	lsrs	r2, r3, #1
 80018ba:	2126      	movs	r1, #38	; 0x26
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	801a      	strh	r2, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_PCD_EP_Receive+0x102>
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	3201      	adds	r2, #1
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	2326      	movs	r3, #38	; 0x26
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	b29a      	uxth	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	801a      	strh	r2, [r3, #0]
 80018e0:	e0bf      	b.n	8001a62 <HAL_PCD_EP_Receive+0x292>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d143      	bne.n	8001972 <HAL_PCD_EP_Receive+0x1a2>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2250      	movs	r2, #80	; 0x50
 80018f0:	5a9b      	ldrh	r3, [r3, r2]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	001a      	movs	r2, r3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	001a      	movs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	18d3      	adds	r3, r2, r3
 8001906:	4a6b      	ldr	r2, [pc, #428]	; (8001ab4 <HAL_PCD_EP_Receive+0x2e4>)
 8001908:	4694      	mov	ip, r2
 800190a:	4463      	add	r3, ip
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b3e      	cmp	r3, #62	; 0x3e
 8001912:	d918      	bls.n	8001946 <HAL_PCD_EP_Receive+0x176>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	095a      	lsrs	r2, r3, #5
 8001918:	2124      	movs	r1, #36	; 0x24
 800191a:	187b      	adds	r3, r7, r1
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	221f      	movs	r2, #31
 8001922:	4013      	ands	r3, r2
 8001924:	d104      	bne.n	8001930 <HAL_PCD_EP_Receive+0x160>
 8001926:	187b      	adds	r3, r7, r1
 8001928:	881a      	ldrh	r2, [r3, #0]
 800192a:	187b      	adds	r3, r7, r1
 800192c:	3a01      	subs	r2, #1
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	2324      	movs	r3, #36	; 0x24
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	b29b      	uxth	r3, r3
 800193a:	4a5d      	ldr	r2, [pc, #372]	; (8001ab0 <HAL_PCD_EP_Receive+0x2e0>)
 800193c:	4313      	orrs	r3, r2
 800193e:	b29a      	uxth	r2, r3
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	801a      	strh	r2, [r3, #0]
 8001944:	e02d      	b.n	80019a2 <HAL_PCD_EP_Receive+0x1d2>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	085a      	lsrs	r2, r3, #1
 800194a:	2124      	movs	r1, #36	; 0x24
 800194c:	187b      	adds	r3, r7, r1
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	d004      	beq.n	8001962 <HAL_PCD_EP_Receive+0x192>
 8001958:	187b      	adds	r3, r7, r1
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	187b      	adds	r3, r7, r1
 800195e:	3201      	adds	r2, #1
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	2324      	movs	r3, #36	; 0x24
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	b29a      	uxth	r2, r3
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	801a      	strh	r2, [r3, #0]
 8001970:	e017      	b.n	80019a2 <HAL_PCD_EP_Receive+0x1d2>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	785b      	ldrb	r3, [r3, #1]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d113      	bne.n	80019a2 <HAL_PCD_EP_Receive+0x1d2>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2250      	movs	r2, #80	; 0x50
 8001980:	5a9b      	ldrh	r3, [r3, r2]
 8001982:	b29b      	uxth	r3, r3
 8001984:	001a      	movs	r2, r3
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	18d3      	adds	r3, r2, r3
 800198e:	001a      	movs	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	4a47      	ldr	r2, [pc, #284]	; (8001ab4 <HAL_PCD_EP_Receive+0x2e4>)
 8001998:	4694      	mov	ip, r2
 800199a:	4463      	add	r3, ip
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	b292      	uxth	r2, r2
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d143      	bne.n	8001a32 <HAL_PCD_EP_Receive+0x262>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2250      	movs	r2, #80	; 0x50
 80019b0:	5a9b      	ldrh	r3, [r3, r2]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	001a      	movs	r2, r3
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	18d3      	adds	r3, r2, r3
 80019be:	001a      	movs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	4a39      	ldr	r2, [pc, #228]	; (8001aac <HAL_PCD_EP_Receive+0x2dc>)
 80019c8:	4694      	mov	ip, r2
 80019ca:	4463      	add	r3, ip
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b3e      	cmp	r3, #62	; 0x3e
 80019d2:	d918      	bls.n	8001a06 <HAL_PCD_EP_Receive+0x236>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	095a      	lsrs	r2, r3, #5
 80019d8:	2122      	movs	r1, #34	; 0x22
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	221f      	movs	r2, #31
 80019e2:	4013      	ands	r3, r2
 80019e4:	d104      	bne.n	80019f0 <HAL_PCD_EP_Receive+0x220>
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	881a      	ldrh	r2, [r3, #0]
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	3a01      	subs	r2, #1
 80019ee:	801a      	strh	r2, [r3, #0]
 80019f0:	2322      	movs	r3, #34	; 0x22
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	029b      	lsls	r3, r3, #10
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_PCD_EP_Receive+0x2e0>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	801a      	strh	r2, [r3, #0]
 8001a04:	e02d      	b.n	8001a62 <HAL_PCD_EP_Receive+0x292>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	085a      	lsrs	r2, r3, #1
 8001a0a:	2122      	movs	r1, #34	; 0x22
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	801a      	strh	r2, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	4013      	ands	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_PCD_EP_Receive+0x252>
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	3201      	adds	r2, #1
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	2322      	movs	r3, #34	; 0x22
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	029b      	lsls	r3, r3, #10
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	801a      	strh	r2, [r3, #0]
 8001a30:	e017      	b.n	8001a62 <HAL_PCD_EP_Receive+0x292>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d113      	bne.n	8001a62 <HAL_PCD_EP_Receive+0x292>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2250      	movs	r2, #80	; 0x50
 8001a40:	5a9b      	ldrh	r3, [r3, r2]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	001a      	movs	r2, r3
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	001a      	movs	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_PCD_EP_Receive+0x2dc>)
 8001a58:	4694      	mov	ip, r2
 8001a5a:	4463      	add	r3, ip
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_PCD_EP_Receive+0x2e8>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	b29c      	uxth	r4, r3
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	015b      	lsls	r3, r3, #5
 8001a7e:	4063      	eors	r3, r4
 8001a80:	b29c      	uxth	r4, r3
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	4063      	eors	r3, r4
 8001a88:	b29c      	uxth	r4, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	001a      	movs	r2, r3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	18d3      	adds	r3, r2, r3
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_PCD_EP_Receive+0x2ec>)
 8001a9a:	4322      	orrs	r2, r4
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b00b      	add	sp, #44	; 0x2c
 8001aa8:	bd90      	pop	{r4, r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	00000406 	.word	0x00000406
 8001ab0:	ffff8000 	.word	0xffff8000
 8001ab4:	00000402 	.word	0x00000402
 8001ab8:	ffffbf8f 	.word	0xffffbf8f
 8001abc:	ffff8080 	.word	0xffff8080

08001ac0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	000a      	movs	r2, r1
 8001aca:	1cfb      	adds	r3, r7, #3
 8001acc:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8001ace:	1cfb      	adds	r3, r7, #3
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	227f      	movs	r2, #127	; 0x7f
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	2390      	movs	r3, #144	; 0x90
 8001ada:	0059      	lsls	r1, r3, #1
 8001adc:	0013      	movs	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	18c3      	adds	r3, r0, r3
 8001ae6:	185b      	adds	r3, r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	200b      	movs	r0, #11
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	1c0a      	adds	r2, r1, #0
 8001b06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8001b08:	2326      	movs	r3, #38	; 0x26
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b10:	0001      	movs	r1, r0
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	227f      	movs	r2, #127	; 0x7f
 8001b18:	401a      	ands	r2, r3
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	3328      	adds	r3, #40	; 0x28
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	18d3      	adds	r3, r2, r3
 8001b28:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	227f      	movs	r2, #127	; 0x7f
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d909      	bls.n	8001b70 <HAL_PCD_EP_Transmit+0x7c>
  {
    len=ep->maxpacket;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	1ad2      	subs	r2, r2, r3
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	e005      	b.n	8001b7c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {  
    len=ep->xfer_len;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	7a9b      	ldrb	r3, [r3, #10]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11e      	bne.n	8001bc2 <HAL_PCD_EP_Transmit+0xce>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	6919      	ldr	r1, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	889a      	ldrh	r2, [r3, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f000 fafe 	bl	8002194 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2250      	movs	r2, #80	; 0x50
 8001b9e:	5a9b      	ldrh	r3, [r3, r2]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	001a      	movs	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	18d3      	adds	r3, r2, r3
 8001bb4:	4aa2      	ldr	r2, [pc, #648]	; (8001e40 <HAL_PCD_EP_Transmit+0x34c>)
 8001bb6:	4694      	mov	ip, r2
 8001bb8:	4463      	add	r3, ip
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	e11b      	b.n	8001dfa <HAL_PCD_EP_Transmit+0x306>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	2340      	movs	r3, #64	; 0x40
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d165      	bne.n	8001caa <HAL_PCD_EP_Transmit+0x1b6>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d143      	bne.n	8001c6e <HAL_PCD_EP_Transmit+0x17a>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2250      	movs	r2, #80	; 0x50
 8001bec:	5a9b      	ldrh	r3, [r3, r2]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	18d3      	adds	r3, r2, r3
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	18d3      	adds	r3, r2, r3
 8001c02:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <HAL_PCD_EP_Transmit+0x350>)
 8001c04:	4694      	mov	ip, r2
 8001c06:	4463      	add	r3, ip
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8001c0e:	d918      	bls.n	8001c42 <HAL_PCD_EP_Transmit+0x14e>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	095a      	lsrs	r2, r3, #5
 8001c14:	2124      	movs	r1, #36	; 0x24
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d104      	bne.n	8001c2c <HAL_PCD_EP_Transmit+0x138>
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	3a01      	subs	r2, #1
 8001c2a:	801a      	strh	r2, [r3, #0]
 8001c2c:	2324      	movs	r3, #36	; 0x24
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4a84      	ldr	r2, [pc, #528]	; (8001e48 <HAL_PCD_EP_Transmit+0x354>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e02d      	b.n	8001c9e <HAL_PCD_EP_Transmit+0x1aa>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	085a      	lsrs	r2, r3, #1
 8001c46:	2124      	movs	r1, #36	; 0x24
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	801a      	strh	r2, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_PCD_EP_Transmit+0x16a>
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	881a      	ldrh	r2, [r3, #0]
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	3201      	adds	r2, #1
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	2324      	movs	r3, #36	; 0x24
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	801a      	strh	r2, [r3, #0]
 8001c6c:	e017      	b.n	8001c9e <HAL_PCD_EP_Transmit+0x1aa>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d113      	bne.n	8001c9e <HAL_PCD_EP_Transmit+0x1aa>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2250      	movs	r2, #80	; 0x50
 8001c7c:	5a9b      	ldrh	r3, [r3, r2]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	001a      	movs	r2, r3
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	18d3      	adds	r3, r2, r3
 8001c92:	4a6c      	ldr	r2, [pc, #432]	; (8001e44 <HAL_PCD_EP_Transmit+0x350>)
 8001c94:	4694      	mov	ip, r2
 8001c96:	4463      	add	r3, ip
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 8001c9e:	2326      	movs	r3, #38	; 0x26
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	8912      	ldrh	r2, [r2, #8]
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	e064      	b.n	8001d74 <HAL_PCD_EP_Transmit+0x280>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d143      	bne.n	8001d3a <HAL_PCD_EP_Transmit+0x246>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2250      	movs	r2, #80	; 0x50
 8001cb8:	5a9b      	ldrh	r3, [r3, r2]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	18d3      	adds	r3, r2, r3
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	18d3      	adds	r3, r2, r3
 8001cce:	4a5c      	ldr	r2, [pc, #368]	; (8001e40 <HAL_PCD_EP_Transmit+0x34c>)
 8001cd0:	4694      	mov	ip, r2
 8001cd2:	4463      	add	r3, ip
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8001cda:	d918      	bls.n	8001d0e <HAL_PCD_EP_Transmit+0x21a>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	095a      	lsrs	r2, r3, #5
 8001ce0:	2122      	movs	r1, #34	; 0x22
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	221f      	movs	r2, #31
 8001cea:	4013      	ands	r3, r2
 8001cec:	d104      	bne.n	8001cf8 <HAL_PCD_EP_Transmit+0x204>
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	801a      	strh	r2, [r3, #0]
 8001cf8:	2322      	movs	r3, #34	; 0x22
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4a51      	ldr	r2, [pc, #324]	; (8001e48 <HAL_PCD_EP_Transmit+0x354>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	e02d      	b.n	8001d6a <HAL_PCD_EP_Transmit+0x276>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	085a      	lsrs	r2, r3, #1
 8001d12:	2122      	movs	r1, #34	; 0x22
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_PCD_EP_Transmit+0x236>
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	881a      	ldrh	r2, [r3, #0]
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	3201      	adds	r2, #1
 8001d28:	801a      	strh	r2, [r3, #0]
 8001d2a:	2322      	movs	r3, #34	; 0x22
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	029b      	lsls	r3, r3, #10
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	e017      	b.n	8001d6a <HAL_PCD_EP_Transmit+0x276>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d113      	bne.n	8001d6a <HAL_PCD_EP_Transmit+0x276>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2250      	movs	r2, #80	; 0x50
 8001d48:	5a9b      	ldrh	r3, [r3, r2]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	18d3      	adds	r3, r2, r3
 8001d56:	001a      	movs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	18d3      	adds	r3, r2, r3
 8001d5e:	4a38      	ldr	r2, [pc, #224]	; (8001e40 <HAL_PCD_EP_Transmit+0x34c>)
 8001d60:	4694      	mov	ip, r2
 8001d62:	4463      	add	r3, ip
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b292      	uxth	r2, r2
 8001d68:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 8001d6a:	2326      	movs	r3, #38	; 0x26
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	88d2      	ldrh	r2, [r2, #6]
 8001d72:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	6919      	ldr	r1, [r3, #16]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b29c      	uxth	r4, r3
 8001d80:	2326      	movs	r3, #38	; 0x26
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	881a      	ldrh	r2, [r3, #0]
 8001d86:	0023      	movs	r3, r4
 8001d88:	f000 fa04 	bl	8002194 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	785b      	ldrb	r3, [r3, #1]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d117      	bne.n	8001dc4 <HAL_PCD_EP_Transmit+0x2d0>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	001a      	movs	r2, r3
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <HAL_PCD_EP_Transmit+0x358>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0019      	movs	r1, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	18cb      	adds	r3, r1, r3
 8001dba:	4925      	ldr	r1, [pc, #148]	; (8001e50 <HAL_PCD_EP_Transmit+0x35c>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	e01a      	b.n	8001dfa <HAL_PCD_EP_Transmit+0x306>
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d116      	bne.n	8001dfa <HAL_PCD_EP_Transmit+0x306>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	18d3      	adds	r3, r2, r3
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_PCD_EP_Transmit+0x358>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0019      	movs	r1, r3
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	18cb      	adds	r3, r1, r3
 8001df2:	4918      	ldr	r1, [pc, #96]	; (8001e54 <HAL_PCD_EP_Transmit+0x360>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	b292      	uxth	r2, r2
 8001df8:	801a      	strh	r2, [r3, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	001a      	movs	r2, r3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	18d3      	adds	r3, r2, r3
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_PCD_EP_Transmit+0x364>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	b29c      	uxth	r4, r3
 8001e12:	2310      	movs	r3, #16
 8001e14:	4063      	eors	r3, r4
 8001e16:	b29c      	uxth	r4, r3
 8001e18:	2320      	movs	r3, #32
 8001e1a:	4063      	eors	r3, r4
 8001e1c:	b29c      	uxth	r4, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	001a      	movs	r2, r3
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_PCD_EP_Transmit+0x368>)
 8001e2e:	4322      	orrs	r2, r4
 8001e30:	b292      	uxth	r2, r2
 8001e32:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b00b      	add	sp, #44	; 0x2c
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	00000402 	.word	0x00000402
 8001e44:	00000406 	.word	0x00000406
 8001e48:	ffff8000 	.word	0xffff8000
 8001e4c:	00000f0f 	.word	0x00000f0f
 8001e50:	ffff80c0 	.word	0xffff80c0
 8001e54:	ffffc080 	.word	0xffffc080
 8001e58:	ffff8fbf 	.word	0xffff8fbf
 8001e5c:	ffff8080 	.word	0xffff8080

08001e60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	000a      	movs	r2, r1
 8001e6a:	1cfb      	adds	r3, r7, #3
 8001e6c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	23f4      	movs	r3, #244	; 0xf4
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_PCD_EP_SetStall+0x1e>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e099      	b.n	8001fb2 <HAL_PCD_EP_SetStall+0x152>
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	23f4      	movs	r3, #244	; 0xf4
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2101      	movs	r1, #1
 8001e86:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8001e88:	1cfb      	adds	r3, r7, #3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da0c      	bge.n	8001eac <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001e92:	1cfb      	adds	r3, r7, #3
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	227f      	movs	r2, #127	; 0x7f
 8001e98:	401a      	ands	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	3328      	adds	r3, #40	; 0x28
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	18d3      	adds	r3, r2, r3
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e00a      	b.n	8001ec2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eac:	1cfb      	adds	r3, r7, #3
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	0013      	movs	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	3309      	adds	r3, #9
 8001eba:	33ff      	adds	r3, #255	; 0xff
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001ec8:	1cfb      	adds	r3, r7, #3
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	227f      	movs	r2, #127	; 0x7f
 8001ece:	4013      	ands	r3, r2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001ed6:	1cfb      	adds	r3, r7, #3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	09db      	lsrs	r3, r3, #7
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d120      	bne.n	8001f32 <HAL_PCD_EP_SetStall+0xd2>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	18d3      	adds	r3, r2, r3
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	001a      	movs	r2, r3
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_PCD_EP_SetStall+0x15c>)
 8001f06:	401a      	ands	r2, r3
 8001f08:	0014      	movs	r4, r2
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	015b      	lsls	r3, r3, #5
 8001f0e:	4063      	eors	r3, r4
 8001f10:	001c      	movs	r4, r3
 8001f12:	2310      	movs	r3, #16
 8001f14:	4063      	eors	r3, r4
 8001f16:	001c      	movs	r4, r3
 8001f18:	b2a2      	uxth	r2, r4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0019      	movs	r1, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	18cb      	adds	r3, r1, r3
 8001f28:	4925      	ldr	r1, [pc, #148]	; (8001fc0 <HAL_PCD_EP_SetStall+0x160>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	801a      	strh	r2, [r3, #0]
 8001f30:	e039      	b.n	8001fa6 <HAL_PCD_EP_SetStall+0x146>
  }
  else
  {
    if (ep->is_in)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01a      	beq.n	8001f70 <HAL_PCD_EP_SetStall+0x110>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	001a      	movs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_PCD_EP_SetStall+0x164>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	b29c      	uxth	r4, r3
 8001f52:	2310      	movs	r3, #16
 8001f54:	4063      	eors	r3, r4
 8001f56:	b29c      	uxth	r4, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	18d3      	adds	r3, r2, r3
 8001f66:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_PCD_EP_SetStall+0x160>)
 8001f68:	4322      	orrs	r2, r4
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	e01a      	b.n	8001fa6 <HAL_PCD_EP_SetStall+0x146>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	001a      	movs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	18d3      	adds	r3, r2, r3
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_PCD_EP_SetStall+0x168>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29c      	uxth	r4, r3
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	015b      	lsls	r3, r3, #5
 8001f8c:	4063      	eors	r3, r4
 8001f8e:	b29c      	uxth	r4, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	001a      	movs	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	18d3      	adds	r3, r2, r3
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_PCD_EP_SetStall+0x160>)
 8001fa0:	4322      	orrs	r2, r4
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	23f4      	movs	r3, #244	; 0xf4
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2100      	movs	r1, #0
 8001fae:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b005      	add	sp, #20
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	0000bfbf 	.word	0x0000bfbf
 8001fc0:	ffff8080 	.word	0xffff8080
 8001fc4:	ffff8fbf 	.word	0xffff8fbf
 8001fc8:	ffffbf8f 	.word	0xffffbf8f

08001fcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	1cfb      	adds	r3, r7, #3
 8001fd8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8001fda:	1cfb      	adds	r3, r7, #3
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	da0c      	bge.n	8001ffe <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001fe4:	1cfb      	adds	r3, r7, #3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	227f      	movs	r2, #127	; 0x7f
 8001fea:	401a      	ands	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3328      	adds	r3, #40	; 0x28
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e00a      	b.n	8002014 <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ffe:	1cfb      	adds	r3, r7, #3
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	0013      	movs	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	3309      	adds	r3, #9
 800200c:	33ff      	adds	r3, #255	; 0xff
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800201a:	1cfb      	adds	r3, r7, #3
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	227f      	movs	r2, #127	; 0x7f
 8002020:	4013      	ands	r3, r2
 8002022:	b2da      	uxtb	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002028:	1cfb      	adds	r3, r7, #3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	09db      	lsrs	r3, r3, #7
 8002032:	b2db      	uxtb	r3, r3
 8002034:	001a      	movs	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	23f4      	movs	r3, #244	; 0xf4
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_PCD_EP_ClrStall+0x7e>
 8002046:	2302      	movs	r3, #2
 8002048:	e094      	b.n	8002174 <HAL_PCD_EP_ClrStall+0x1a8>
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	23f4      	movs	r3, #244	; 0xf4
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2101      	movs	r1, #1
 8002052:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d041      	beq.n	80020e0 <HAL_PCD_EP_ClrStall+0x114>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	001a      	movs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	18d3      	adds	r3, r2, r3
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	001a      	movs	r2, r3
 8002070:	2340      	movs	r3, #64	; 0x40
 8002072:	4013      	ands	r3, r2
 8002074:	d016      	beq.n	80020a4 <HAL_PCD_EP_ClrStall+0xd8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	001a      	movs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	18d3      	adds	r3, r2, r3
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4a3c      	ldr	r2, [pc, #240]	; (800217c <HAL_PCD_EP_ClrStall+0x1b0>)
 800208a:	4013      	ands	r3, r2
 800208c:	b29a      	uxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0019      	movs	r1, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	18cb      	adds	r3, r1, r3
 800209c:	4938      	ldr	r1, [pc, #224]	; (8002180 <HAL_PCD_EP_ClrStall+0x1b4>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	b292      	uxth	r2, r2
 80020a2:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	001a      	movs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4a33      	ldr	r2, [pc, #204]	; (8002184 <HAL_PCD_EP_ClrStall+0x1b8>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	b29c      	uxth	r4, r3
 80020bc:	2310      	movs	r3, #16
 80020be:	4063      	eors	r3, r4
 80020c0:	b29c      	uxth	r4, r3
 80020c2:	2320      	movs	r3, #32
 80020c4:	4063      	eors	r3, r4
 80020c6:	b29c      	uxth	r4, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	001a      	movs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	18d3      	adds	r3, r2, r3
 80020d6:	4a2c      	ldr	r2, [pc, #176]	; (8002188 <HAL_PCD_EP_ClrStall+0x1bc>)
 80020d8:	4322      	orrs	r2, r4
 80020da:	b292      	uxth	r2, r2
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e043      	b.n	8002168 <HAL_PCD_EP_ClrStall+0x19c>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	001a      	movs	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	001a      	movs	r2, r3
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	01db      	lsls	r3, r3, #7
 80020f8:	4013      	ands	r3, r2
 80020fa:	d016      	beq.n	800212a <HAL_PCD_EP_ClrStall+0x15e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	001a      	movs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	18d3      	adds	r3, r2, r3
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_PCD_EP_ClrStall+0x1b0>)
 8002110:	4013      	ands	r3, r2
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0019      	movs	r1, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	18cb      	adds	r3, r1, r3
 8002122:	491a      	ldr	r1, [pc, #104]	; (800218c <HAL_PCD_EP_ClrStall+0x1c0>)
 8002124:	430a      	orrs	r2, r1
 8002126:	b292      	uxth	r2, r2
 8002128:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	001a      	movs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	18d3      	adds	r3, r2, r3
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_PCD_EP_ClrStall+0x1c4>)
 800213e:	4013      	ands	r3, r2
 8002140:	b29c      	uxth	r4, r3
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	015b      	lsls	r3, r3, #5
 8002146:	4063      	eors	r3, r4
 8002148:	b29c      	uxth	r4, r3
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	4063      	eors	r3, r4
 8002150:	b29c      	uxth	r4, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	001a      	movs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_PCD_EP_ClrStall+0x1bc>)
 8002162:	4322      	orrs	r2, r4
 8002164:	b292      	uxth	r2, r2
 8002166:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	23f4      	movs	r3, #244	; 0xf4
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2100      	movs	r1, #0
 8002170:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b005      	add	sp, #20
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	00000f0f 	.word	0x00000f0f
 8002180:	ffff80c0 	.word	0xffff80c0
 8002184:	ffff8fbf 	.word	0xffff8fbf
 8002188:	ffff8080 	.word	0xffff8080
 800218c:	ffffc080 	.word	0xffffc080
 8002190:	ffffbf8f 	.word	0xffffbf8f

08002194 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	0019      	movs	r1, r3
 80021a0:	1dbb      	adds	r3, r7, #6
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	1c0a      	adds	r2, r1, #0
 80021a8:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80021b4:	1dbb      	adds	r3, r7, #6
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	00d2      	lsls	r2, r2, #3
 80021c0:	4694      	mov	ip, r2
 80021c2:	4463      	add	r3, ip
 80021c4:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e01e      	b.n	800220a <PCD_WritePMA+0x76>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	2012      	movs	r0, #18
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3301      	adds	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	b299      	uxth	r1, r3
 80021e6:	2410      	movs	r4, #16
 80021e8:	193b      	adds	r3, r7, r4
 80021ea:	183a      	adds	r2, r7, r0
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1c9a      	adds	r2, r3, #2
 80021f6:	61ba      	str	r2, [r7, #24]
 80021f8:	193a      	adds	r2, r7, r4
 80021fa:	8812      	ldrh	r2, [r2, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3301      	adds	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3b01      	subs	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1dd      	bne.n	80021cc <PCD_WritePMA+0x38>
  }
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b009      	add	sp, #36	; 0x24
 8002218:	bd90      	pop	{r4, r7, pc}

0800221a <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b088      	sub	sp, #32
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	0019      	movs	r1, r3
 8002226:	1dbb      	adds	r3, r7, #6
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	1c0a      	adds	r2, r1, #0
 800222e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	b29b      	uxth	r3, r3
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800223a:	1dbb      	adds	r3, r7, #6
 800223c:	881a      	ldrh	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	00d2      	lsls	r2, r2, #3
 8002246:	4694      	mov	ip, r2
 8002248:	4463      	add	r3, ip
 800224a:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e014      	b.n	800227c <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1c9a      	adds	r2, r3, #2
 8002256:	61ba      	str	r2, [r7, #24]
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	0a19      	lsrs	r1, r3, #8
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	b2ca      	uxtb	r2, r1
 8002274:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b01      	subs	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e7      	bne.n	8002252 <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	2201      	movs	r2, #1
 8002288:	4013      	ands	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1c9a      	adds	r2, r3, #2
 8002294:	61ba      	str	r2, [r7, #24]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	60ba      	str	r2, [r7, #8]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
  }
}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b008      	add	sp, #32
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 80022b8:	2316      	movs	r3, #22
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 80022c0:	230c      	movs	r3, #12
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2200      	movs	r2, #0
 80022c6:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80022c8:	e343      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022ca:	200e      	movs	r0, #14
 80022cc:	183b      	adds	r3, r7, r0
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	241f      	movs	r4, #31
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	210f      	movs	r1, #15
 80022da:	400a      	ands	r2, r1
 80022dc:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d000      	beq.n	80022e8 <PCD_EP_ISR_Handler+0x38>
 80022e6:	e134      	b.n	8002552 <PCD_EP_ISR_Handler+0x2a2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022e8:	183b      	adds	r3, r7, r0
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	001a      	movs	r2, r3
 80022f0:	2310      	movs	r3, #16
 80022f2:	4013      	ands	r3, r2
 80022f4:	d14c      	bne.n	8002390 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	49c3      	ldr	r1, [pc, #780]	; (8002610 <PCD_EP_ISR_Handler+0x360>)
 8002304:	400a      	ands	r2, r1
 8002306:	b292      	uxth	r2, r2
 8002308:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3328      	adds	r3, #40	; 0x28
 800230e:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2250      	movs	r2, #80	; 0x50
 8002316:	5a9b      	ldrh	r3, [r3, r2]
 8002318:	b29b      	uxth	r3, r3
 800231a:	001a      	movs	r2, r3
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	18d3      	adds	r3, r2, r3
 8002324:	001a      	movs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	18d3      	adds	r3, r2, r3
 800232c:	4ab9      	ldr	r2, [pc, #740]	; (8002614 <PCD_EP_ISR_Handler+0x364>)
 800232e:	4694      	mov	ip, r2
 8002330:	4463      	add	r3, ip
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	059b      	lsls	r3, r3, #22
 8002336:	0d9a      	lsrs	r2, r3, #22
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	18d2      	adds	r2, r2, r3
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2100      	movs	r1, #0
 800234e:	0018      	movs	r0, r3
 8002350:	f003 f9d4 	bl	80056fc <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d100      	bne.n	8002362 <PCD_EP_ISR_Handler+0xb2>
 8002360:	e2f7      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d000      	beq.n	800236c <PCD_EP_ISR_Handler+0xbc>
 800236a:	e2f2      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	4252      	negs	r2, r2
 8002378:	4313      	orrs	r3, r2
 800237a:	b2da      	uxtb	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b291      	uxth	r1, r2
 8002382:	224c      	movs	r2, #76	; 0x4c
 8002384:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2224      	movs	r2, #36	; 0x24
 800238a:	2100      	movs	r1, #0
 800238c:	5499      	strb	r1, [r3, r2]
 800238e:	e2e0      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3309      	adds	r3, #9
 8002394:	33ff      	adds	r3, #255	; 0xff
 8002396:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	210c      	movs	r1, #12
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	001a      	movs	r2, r3
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	4013      	ands	r3, r2
 80023b4:	d031      	beq.n	800241a <PCD_EP_ISR_Handler+0x16a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2250      	movs	r2, #80	; 0x50
 80023bc:	5a9b      	ldrh	r3, [r3, r2]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	001a      	movs	r2, r3
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	18d3      	adds	r3, r2, r3
 80023ca:	001a      	movs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	4a91      	ldr	r2, [pc, #580]	; (8002618 <PCD_EP_ISR_Handler+0x368>)
 80023d4:	4694      	mov	ip, r2
 80023d6:	4463      	add	r3, ip
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	059b      	lsls	r3, r3, #22
 80023dc:	0d9a      	lsrs	r2, r3, #22
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	33ed      	adds	r3, #237	; 0xed
 80023ea:	33ff      	adds	r3, #255	; 0xff
 80023ec:	0019      	movs	r1, r3
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	889a      	ldrh	r2, [r3, #4]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f7ff ff0f 	bl	800221a <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4984      	ldr	r1, [pc, #528]	; (800261c <PCD_EP_ISR_Handler+0x36c>)
 800240a:	400a      	ands	r2, r1
 800240c:	b292      	uxth	r2, r2
 800240e:	801a      	strh	r2, [r3, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f003 f93e 	bl	8005694 <HAL_PCD_SetupStageCallback>
 8002418:	e29b      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800241a:	230c      	movs	r3, #12
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	db00      	blt.n	800242a <PCD_EP_ISR_Handler+0x17a>
 8002428:	e293      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4979      	ldr	r1, [pc, #484]	; (800261c <PCD_EP_ISR_Handler+0x36c>)
 8002438:	400a      	ands	r2, r1
 800243a:	b292      	uxth	r2, r2
 800243c:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2250      	movs	r2, #80	; 0x50
 8002444:	5a9b      	ldrh	r3, [r3, r2]
 8002446:	b29b      	uxth	r3, r3
 8002448:	001a      	movs	r2, r3
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	18d3      	adds	r3, r2, r3
 8002452:	001a      	movs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	18d3      	adds	r3, r2, r3
 800245a:	4a6f      	ldr	r2, [pc, #444]	; (8002618 <PCD_EP_ISR_Handler+0x368>)
 800245c:	4694      	mov	ip, r2
 800245e:	4463      	add	r3, ip
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	059b      	lsls	r3, r3, #22
 8002464:	0d9a      	lsrs	r2, r3, #22
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d011      	beq.n	8002496 <PCD_EP_ISR_Handler+0x1e6>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	889a      	ldrh	r2, [r3, #4]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f7ff fec9 	bl	800221a <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	18d2      	adds	r2, r2, r3
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2100      	movs	r1, #0
 800249a:	0018      	movs	r0, r3
 800249c:	f003 f90d 	bl	80056ba <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2250      	movs	r2, #80	; 0x50
 80024a6:	5a9b      	ldrh	r3, [r3, r2]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	001a      	movs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	18d3      	adds	r3, r2, r3
 80024b2:	4a59      	ldr	r2, [pc, #356]	; (8002618 <PCD_EP_ISR_Handler+0x368>)
 80024b4:	4694      	mov	ip, r2
 80024b6:	4463      	add	r3, ip
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b3e      	cmp	r3, #62	; 0x3e
 80024c0:	d91a      	bls.n	80024f8 <PCD_EP_ISR_Handler+0x248>
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	095a      	lsrs	r2, r3, #5
 80024c8:	2114      	movs	r1, #20
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	221f      	movs	r2, #31
 80024d4:	4013      	ands	r3, r2
 80024d6:	d104      	bne.n	80024e2 <PCD_EP_ISR_Handler+0x232>
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	881a      	ldrh	r2, [r3, #0]
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	3a01      	subs	r2, #1
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	2314      	movs	r3, #20
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	029b      	lsls	r3, r3, #10
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <PCD_EP_ISR_Handler+0x370>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e016      	b.n	8002526 <PCD_EP_ISR_Handler+0x276>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	085a      	lsrs	r2, r3, #1
 80024fe:	2114      	movs	r1, #20
 8002500:	187b      	adds	r3, r7, r1
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	d004      	beq.n	8002518 <PCD_EP_ISR_Handler+0x268>
 800250e:	187b      	adds	r3, r7, r1
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	187b      	adds	r3, r7, r1
 8002514:	3201      	adds	r2, #1
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	2314      	movs	r3, #20
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	b29a      	uxth	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4a3d      	ldr	r2, [pc, #244]	; (8002624 <PCD_EP_ISR_Handler+0x374>)
 8002530:	4013      	ands	r3, r2
 8002532:	b29c      	uxth	r4, r3
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	015b      	lsls	r3, r3, #5
 8002538:	4063      	eors	r3, r4
 800253a:	b29c      	uxth	r4, r3
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	019b      	lsls	r3, r3, #6
 8002540:	4063      	eors	r3, r4
 8002542:	b29c      	uxth	r4, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a37      	ldr	r2, [pc, #220]	; (8002628 <PCD_EP_ISR_Handler+0x378>)
 800254a:	4322      	orrs	r2, r4
 800254c:	b292      	uxth	r2, r2
 800254e:	801a      	strh	r2, [r3, #0]
 8002550:	e1ff      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	001a      	movs	r2, r3
 8002558:	211f      	movs	r1, #31
 800255a:	187b      	adds	r3, r7, r1
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	18d3      	adds	r3, r2, r3
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29a      	uxth	r2, r3
 8002566:	200c      	movs	r0, #12
 8002568:	183b      	adds	r3, r7, r0
 800256a:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800256c:	183b      	adds	r3, r7, r0
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	b21b      	sxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	db00      	blt.n	800257a <PCD_EP_ISR_Handler+0x2ca>
 8002578:	e0f5      	b.n	8002766 <PCD_EP_ISR_Handler+0x4b6>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	001a      	movs	r2, r3
 8002580:	0008      	movs	r0, r1
 8002582:	187b      	adds	r3, r7, r1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	18d3      	adds	r3, r2, r3
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0019      	movs	r1, r3
 8002594:	183b      	adds	r3, r7, r0
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	18cb      	adds	r3, r1, r3
 800259c:	491f      	ldr	r1, [pc, #124]	; (800261c <PCD_EP_ISR_Handler+0x36c>)
 800259e:	400a      	ands	r2, r1
 80025a0:	b292      	uxth	r2, r2
 80025a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[EPindex];
 80025a4:	183b      	adds	r3, r7, r0
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	0013      	movs	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3309      	adds	r3, #9
 80025b2:	33ff      	adds	r3, #255	; 0xff
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	7a9b      	ldrb	r3, [r3, #10]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d134      	bne.n	800262c <PCD_EP_ISR_Handler+0x37c>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2250      	movs	r2, #80	; 0x50
 80025c8:	5a9b      	ldrh	r3, [r3, r2]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	001a      	movs	r2, r3
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	001a      	movs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	18d3      	adds	r3, r2, r3
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <PCD_EP_ISR_Handler+0x368>)
 80025e0:	4694      	mov	ip, r2
 80025e2:	4463      	add	r3, ip
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	2416      	movs	r4, #22
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	0592      	lsls	r2, r2, #22
 80025ec:	0d92      	lsrs	r2, r2, #22
 80025ee:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d100      	bne.n	80025fa <PCD_EP_ISR_Handler+0x34a>
 80025f8:	e08b      	b.n	8002712 <PCD_EP_ISR_Handler+0x462>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	889a      	ldrh	r2, [r3, #4]
 8002606:	193b      	adds	r3, r7, r4
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f7ff fe06 	bl	800221a <PCD_ReadPMA>
 800260e:	e080      	b.n	8002712 <PCD_EP_ISR_Handler+0x462>
 8002610:	ffff8f0f 	.word	0xffff8f0f
 8002614:	00000402 	.word	0x00000402
 8002618:	00000406 	.word	0x00000406
 800261c:	00000f8f 	.word	0x00000f8f
 8002620:	ffff8000 	.word	0xffff8000
 8002624:	ffffbf8f 	.word	0xffffbf8f
 8002628:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	001a      	movs	r2, r3
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	001a      	movs	r2, r3
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	01db      	lsls	r3, r3, #7
 8002644:	401a      	ands	r2, r3
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	01db      	lsls	r3, r3, #7
 800264a:	429a      	cmp	r2, r3
 800264c:	d125      	bne.n	800269a <PCD_EP_ISR_Handler+0x3ea>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2250      	movs	r2, #80	; 0x50
 8002654:	5a9b      	ldrh	r3, [r3, r2]
 8002656:	b29b      	uxth	r3, r3
 8002658:	001a      	movs	r2, r3
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	18d3      	adds	r3, r2, r3
 8002662:	001a      	movs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	18d3      	adds	r3, r2, r3
 800266a:	4ac3      	ldr	r2, [pc, #780]	; (8002978 <PCD_EP_ISR_Handler+0x6c8>)
 800266c:	4694      	mov	ip, r2
 800266e:	4463      	add	r3, ip
 8002670:	881a      	ldrh	r2, [r3, #0]
 8002672:	2416      	movs	r4, #22
 8002674:	193b      	adds	r3, r7, r4
 8002676:	0592      	lsls	r2, r2, #22
 8002678:	0d92      	lsrs	r2, r2, #22
 800267a:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 800267c:	193b      	adds	r3, r7, r4
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02f      	beq.n	80026e4 <PCD_EP_ISR_Handler+0x434>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6919      	ldr	r1, [r3, #16]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	88da      	ldrh	r2, [r3, #6]
 8002690:	193b      	adds	r3, r7, r4
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	f7ff fdc1 	bl	800221a <PCD_ReadPMA>
 8002698:	e024      	b.n	80026e4 <PCD_EP_ISR_Handler+0x434>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2250      	movs	r2, #80	; 0x50
 80026a0:	5a9b      	ldrh	r3, [r3, r2]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	001a      	movs	r2, r3
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	18d3      	adds	r3, r2, r3
 80026ae:	001a      	movs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	4ab1      	ldr	r2, [pc, #708]	; (800297c <PCD_EP_ISR_Handler+0x6cc>)
 80026b8:	4694      	mov	ip, r2
 80026ba:	4463      	add	r3, ip
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	2416      	movs	r4, #22
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	0592      	lsls	r2, r2, #22
 80026c4:	0d92      	lsrs	r2, r2, #22
 80026c6:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <PCD_EP_ISR_Handler+0x434>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6919      	ldr	r1, [r3, #16]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	891a      	ldrh	r2, [r3, #8]
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	f7ff fd9b 	bl	800221a <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	001a      	movs	r2, r3
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	18d3      	adds	r3, r2, r3
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4aa2      	ldr	r2, [pc, #648]	; (8002980 <PCD_EP_ISR_Handler+0x6d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0019      	movs	r1, r3
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	18cb      	adds	r3, r1, r3
 800270a:	499e      	ldr	r1, [pc, #632]	; (8002984 <PCD_EP_ISR_Handler+0x6d4>)
 800270c:	430a      	orrs	r2, r1
 800270e:	b292      	uxth	r2, r2
 8002710:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	2116      	movs	r1, #22
 8002718:	187b      	adds	r3, r7, r1
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	18d2      	adds	r2, r2, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	187b      	adds	r3, r7, r1
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	18d2      	adds	r2, r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <PCD_EP_ISR_Handler+0x494>
 8002738:	187b      	adds	r3, r7, r1
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <PCD_EP_ISR_Handler+0x4a4>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f002 ffb4 	bl	80056ba <HAL_PCD_DataOutStageCallback>
 8002752:	e008      	b.n	8002766 <PCD_EP_ISR_Handler+0x4b6>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	7819      	ldrb	r1, [r3, #0]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff f835 	bl	80017d0 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002766:	230c      	movs	r3, #12
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	001a      	movs	r2, r3
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	4013      	ands	r3, r2
 8002774:	d100      	bne.n	8002778 <PCD_EP_ISR_Handler+0x4c8>
 8002776:	e0ec      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
      {
        ep = &hpcd->IN_ep[EPindex];
 8002778:	211f      	movs	r1, #31
 800277a:	187b      	adds	r3, r7, r1
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	0013      	movs	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3328      	adds	r3, #40	; 0x28
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	18d3      	adds	r3, r2, r3
 800278c:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	001a      	movs	r2, r3
 8002794:	0008      	movs	r0, r1
 8002796:	187b      	adds	r3, r7, r1
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	18d3      	adds	r3, r2, r3
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0019      	movs	r1, r3
 80027a8:	183b      	adds	r3, r7, r0
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	18cb      	adds	r3, r1, r3
 80027b0:	4975      	ldr	r1, [pc, #468]	; (8002988 <PCD_EP_ISR_Handler+0x6d8>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	b292      	uxth	r2, r2
 80027b6:	801a      	strh	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	7a9b      	ldrb	r3, [r3, #10]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d126      	bne.n	800280e <PCD_EP_ISR_Handler+0x55e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2250      	movs	r2, #80	; 0x50
 80027c6:	5a9b      	ldrh	r3, [r3, r2]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	001a      	movs	r2, r3
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	18d3      	adds	r3, r2, r3
 80027d4:	001a      	movs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	18d3      	adds	r3, r2, r3
 80027dc:	4a66      	ldr	r2, [pc, #408]	; (8002978 <PCD_EP_ISR_Handler+0x6c8>)
 80027de:	4694      	mov	ip, r2
 80027e0:	4463      	add	r3, ip
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	059b      	lsls	r3, r3, #22
 80027e6:	0d9a      	lsrs	r2, r3, #22
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d100      	bne.n	80027f6 <PCD_EP_ISR_Handler+0x546>
 80027f4:	e07b      	b.n	80028ee <PCD_EP_ISR_Handler+0x63e>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	889a      	ldrh	r2, [r3, #4]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f7ff fcc4 	bl	8002194 <PCD_WritePMA>
 800280c:	e06f      	b.n	80028ee <PCD_EP_ISR_Handler+0x63e>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	001a      	movs	r2, r3
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	18d3      	adds	r3, r2, r3
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	001a      	movs	r2, r3
 8002822:	2340      	movs	r3, #64	; 0x40
 8002824:	4013      	ands	r3, r2
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d125      	bne.n	8002876 <PCD_EP_ISR_Handler+0x5c6>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2250      	movs	r2, #80	; 0x50
 8002830:	5a9b      	ldrh	r3, [r3, r2]
 8002832:	b29b      	uxth	r3, r3
 8002834:	001a      	movs	r2, r3
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	18d3      	adds	r3, r2, r3
 800283e:	001a      	movs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	4a4c      	ldr	r2, [pc, #304]	; (8002978 <PCD_EP_ISR_Handler+0x6c8>)
 8002848:	4694      	mov	ip, r2
 800284a:	4463      	add	r3, ip
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	059b      	lsls	r3, r3, #22
 8002850:	0d9a      	lsrs	r2, r3, #22
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d030      	beq.n	80028c0 <PCD_EP_ISR_Handler+0x610>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6919      	ldr	r1, [r3, #16]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	88da      	ldrh	r2, [r3, #6]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f7ff fc90 	bl	8002194 <PCD_WritePMA>
 8002874:	e024      	b.n	80028c0 <PCD_EP_ISR_Handler+0x610>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2250      	movs	r2, #80	; 0x50
 800287c:	5a9b      	ldrh	r3, [r3, r2]
 800287e:	b29b      	uxth	r3, r3
 8002880:	001a      	movs	r2, r3
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	18d3      	adds	r3, r2, r3
 800288a:	001a      	movs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	4a3a      	ldr	r2, [pc, #232]	; (800297c <PCD_EP_ISR_Handler+0x6cc>)
 8002894:	4694      	mov	ip, r2
 8002896:	4463      	add	r3, ip
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	059b      	lsls	r3, r3, #22
 800289c:	0d9a      	lsrs	r2, r3, #22
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <PCD_EP_ISR_Handler+0x610>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	891a      	ldrh	r2, [r3, #8]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f7ff fc6a 	bl	8002194 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	001a      	movs	r2, r3
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	18d3      	adds	r3, r2, r3
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <PCD_EP_ISR_Handler+0x6d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0019      	movs	r1, r3
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	18cb      	adds	r3, r1, r3
 80028e6:	4929      	ldr	r1, [pc, #164]	; (800298c <PCD_EP_ISR_Handler+0x6dc>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	b292      	uxth	r2, r2
 80028ec:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2250      	movs	r2, #80	; 0x50
 80028f4:	5a9b      	ldrh	r3, [r3, r2]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	001a      	movs	r2, r3
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	001a      	movs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	18d3      	adds	r3, r2, r3
 800290a:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <PCD_EP_ISR_Handler+0x6c8>)
 800290c:	4694      	mov	ip, r2
 800290e:	4463      	add	r3, ip
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	059b      	lsls	r3, r3, #22
 8002914:	0d9a      	lsrs	r2, r3, #22
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	18d2      	adds	r2, r2, r3
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <PCD_EP_ISR_Handler+0x690>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f002 fedf 	bl	80056fc <HAL_PCD_DataInStageCallback>
 800293e:	e008      	b.n	8002952 <PCD_EP_ISR_Handler+0x6a2>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	7819      	ldrb	r1, [r3, #0]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff f8d1 	bl	8001af4 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2244      	movs	r2, #68	; 0x44
 8002958:	5a9b      	ldrh	r3, [r3, r2]
 800295a:	b29a      	uxth	r2, r3
 800295c:	230e      	movs	r3, #14
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	1c11      	adds	r1, r2, #0
 8002962:	8019      	strh	r1, [r3, #0]
 8002964:	b213      	sxth	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	da00      	bge.n	800296c <PCD_EP_ISR_Handler+0x6bc>
 800296a:	e4ae      	b.n	80022ca <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b009      	add	sp, #36	; 0x24
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	00000402 	.word	0x00000402
 800297c:	00000406 	.word	0x00000406
 8002980:	00000f0f 	.word	0x00000f0f
 8002984:	ffff80c0 	.word	0xffff80c0
 8002988:	ffff8f0f 	.word	0xffff8f0f
 800298c:	ffffc080 	.word	0xffffc080

08002990 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	0008      	movs	r0, r1
 800299a:	0011      	movs	r1, r2
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	240a      	movs	r4, #10
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	1c02      	adds	r2, r0, #0
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	2308      	movs	r3, #8
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	1c0a      	adds	r2, r1, #0
 80029ac:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ae:	0021      	movs	r1, r4
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	4013      	ands	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	227f      	movs	r2, #127	; 0x7f
 80029c4:	401a      	ands	r2, r3
 80029c6:	0013      	movs	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3328      	adds	r3, #40	; 0x28
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	18d3      	adds	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e00b      	b.n	80029f0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d8:	230a      	movs	r3, #10
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	0013      	movs	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	3309      	adds	r3, #9
 80029e8:	33ff      	adds	r3, #255	; 0xff
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	18d3      	adds	r3, r2, r3
 80029ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029f0:	2308      	movs	r3, #8
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	809a      	strh	r2, [r3, #4]
 8002a08:	e00b      	b.n	8002a22 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b007      	add	sp, #28
 8002a2a:	bd90      	pop	{r4, r7, pc}

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d100      	bne.n	8002a44 <HAL_RCC_OscConfig+0x18>
 8002a42:	e08d      	b.n	8002b60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a44:	4bc4      	ldr	r3, [pc, #784]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	220c      	movs	r2, #12
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00e      	beq.n	8002a6e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	4bc1      	ldr	r3, [pc, #772]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	220c      	movs	r2, #12
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d116      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
 8002a5c:	4bbe      	ldr	r3, [pc, #760]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	23c0      	movs	r3, #192	; 0xc0
 8002a62:	025b      	lsls	r3, r3, #9
 8002a64:	401a      	ands	r2, r3
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	025b      	lsls	r3, r3, #9
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d10d      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6e:	4bba      	ldr	r3, [pc, #744]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	029b      	lsls	r3, r3, #10
 8002a76:	4013      	ands	r3, r2
 8002a78:	d100      	bne.n	8002a7c <HAL_RCC_OscConfig+0x50>
 8002a7a:	e070      	b.n	8002b5e <HAL_RCC_OscConfig+0x132>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d000      	beq.n	8002a86 <HAL_RCC_OscConfig+0x5a>
 8002a84:	e06b      	b.n	8002b5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e2b8      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x76>
 8002a92:	4bb1      	ldr	r3, [pc, #708]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4bb0      	ldr	r3, [pc, #704]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0249      	lsls	r1, r1, #9
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e02f      	b.n	8002b02 <HAL_RCC_OscConfig+0xd6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4bab      	ldr	r3, [pc, #684]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4baa      	ldr	r3, [pc, #680]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002ab0:	49aa      	ldr	r1, [pc, #680]	; (8002d5c <HAL_RCC_OscConfig+0x330>)
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	4ba8      	ldr	r3, [pc, #672]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4ba7      	ldr	r3, [pc, #668]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	49a8      	ldr	r1, [pc, #672]	; (8002d60 <HAL_RCC_OscConfig+0x334>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e01e      	b.n	8002b02 <HAL_RCC_OscConfig+0xd6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d10e      	bne.n	8002aea <HAL_RCC_OscConfig+0xbe>
 8002acc:	4ba2      	ldr	r3, [pc, #648]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4ba1      	ldr	r3, [pc, #644]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	02c9      	lsls	r1, r1, #11
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	4b9f      	ldr	r3, [pc, #636]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0249      	lsls	r1, r1, #9
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCC_OscConfig+0xd6>
 8002aea:	4b9b      	ldr	r3, [pc, #620]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b9a      	ldr	r3, [pc, #616]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002af0:	499a      	ldr	r1, [pc, #616]	; (8002d5c <HAL_RCC_OscConfig+0x330>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	4b98      	ldr	r3, [pc, #608]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b97      	ldr	r3, [pc, #604]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002afc:	4998      	ldr	r1, [pc, #608]	; (8002d60 <HAL_RCC_OscConfig+0x334>)
 8002afe:	400a      	ands	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d014      	beq.n	8002b34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fd fbc5 	bl	8000298 <HAL_GetTick>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fd fbc0 	bl	8000298 <HAL_GetTick>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e26a      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe8>
 8002b32:	e015      	b.n	8002b60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fd fbb0 	bl	8000298 <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3e:	f7fd fbab 	bl	8000298 <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e255      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b50:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x112>
 8002b5c:	e000      	b.n	8002b60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2202      	movs	r2, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d100      	bne.n	8002b6c <HAL_RCC_OscConfig+0x140>
 8002b6a:	e06c      	b.n	8002c46 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b6c:	4b7a      	ldr	r3, [pc, #488]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	220c      	movs	r2, #12
 8002b72:	4013      	ands	r3, r2
 8002b74:	d00e      	beq.n	8002b94 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b76:	4b78      	ldr	r3, [pc, #480]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11f      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x196>
 8002b82:	4b75      	ldr	r3, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	23c0      	movs	r3, #192	; 0xc0
 8002b88:	025b      	lsls	r3, r3, #9
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d116      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d005      	beq.n	8002baa <HAL_RCC_OscConfig+0x17e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e228      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b6b      	ldr	r3, [pc, #428]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	22f8      	movs	r2, #248	; 0xf8
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	00da      	lsls	r2, r3, #3
 8002bba:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc0:	e041      	b.n	8002c46 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7fd fb5f 	bl	8000298 <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be0:	f7fd fb5a 	bl	8000298 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e204      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d0f1      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	22f8      	movs	r2, #248	; 0xf8
 8002c02:	4393      	bics	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00da      	lsls	r2, r3, #3
 8002c0c:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e018      	b.n	8002c46 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c14:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fd fb3a 	bl	8000298 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fd fb35 	bl	8000298 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1df      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d1f1      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d019      	beq.n	8002c8c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c58:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c5c:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fd fb18 	bl	8000298 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6e:	f7fd fb13 	bl	8000298 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1bd      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c80:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d0f1      	beq.n	8002c6e <HAL_RCC_OscConfig+0x242>
 8002c8a:	e018      	b.n	8002cbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	438a      	bics	r2, r1
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7fd fafe 	bl	8000298 <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca2:	f7fd faf9 	bl	8000298 <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1a3      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d1f1      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d100      	bne.n	8002cca <HAL_RCC_OscConfig+0x29e>
 8002cc8:	e0b4      	b.n	8002e34 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2017      	movs	r0, #23
 8002ccc:	183b      	adds	r3, r7, r0
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	055b      	lsls	r3, r3, #21
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d110      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0549      	lsls	r1, r1, #21
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	055b      	lsls	r3, r3, #21
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cfa:	183b      	adds	r3, r7, r0
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_RCC_OscConfig+0x338>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d11a      	bne.n	8002d42 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_RCC_OscConfig+0x338>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_RCC_OscConfig+0x338>)
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	0049      	lsls	r1, r1, #1
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7fd fabd 	bl	8000298 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fd fab8 	bl	8000298 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e162      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_OscConfig+0x338>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10e      	bne.n	8002d68 <HAL_RCC_OscConfig+0x33c>
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002d4c:	6a1a      	ldr	r2, [r3, #32]
 8002d4e:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <HAL_RCC_OscConfig+0x32c>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	621a      	str	r2, [r3, #32]
 8002d56:	e035      	b.n	8002dc4 <HAL_RCC_OscConfig+0x398>
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	fffeffff 	.word	0xfffeffff
 8002d60:	fffbffff 	.word	0xfffbffff
 8002d64:	40007000 	.word	0x40007000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x35e>
 8002d70:	4ba4      	ldr	r3, [pc, #656]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	4ba3      	ldr	r3, [pc, #652]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002d76:	2101      	movs	r1, #1
 8002d78:	438a      	bics	r2, r1
 8002d7a:	621a      	str	r2, [r3, #32]
 8002d7c:	4ba1      	ldr	r3, [pc, #644]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002d7e:	6a1a      	ldr	r2, [r3, #32]
 8002d80:	4ba0      	ldr	r3, [pc, #640]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002d82:	2104      	movs	r1, #4
 8002d84:	438a      	bics	r2, r1
 8002d86:	621a      	str	r2, [r3, #32]
 8002d88:	e01c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x398>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x380>
 8002d92:	4b9c      	ldr	r3, [pc, #624]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002d94:	6a1a      	ldr	r2, [r3, #32]
 8002d96:	4b9b      	ldr	r3, [pc, #620]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002d98:	2104      	movs	r1, #4
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	621a      	str	r2, [r3, #32]
 8002d9e:	4b99      	ldr	r3, [pc, #612]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	4b98      	ldr	r3, [pc, #608]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	430a      	orrs	r2, r1
 8002da8:	621a      	str	r2, [r3, #32]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x398>
 8002dac:	4b95      	ldr	r3, [pc, #596]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	4b94      	ldr	r3, [pc, #592]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	438a      	bics	r2, r1
 8002db6:	621a      	str	r2, [r3, #32]
 8002db8:	4b92      	ldr	r3, [pc, #584]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	4b91      	ldr	r3, [pc, #580]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d014      	beq.n	8002df6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dcc:	f7fd fa64 	bl	8000298 <HAL_GetTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e009      	b.n	8002dea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fa5f 	bl	8000298 <HAL_GetTick>
 8002dda:	0002      	movs	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	4a89      	ldr	r2, [pc, #548]	; (8003008 <HAL_RCC_OscConfig+0x5dc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e108      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	4b86      	ldr	r3, [pc, #536]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
 8002df4:	e013      	b.n	8002e1e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fd fa4f 	bl	8000298 <HAL_GetTick>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfe:	e009      	b.n	8002e14 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fd fa4a 	bl	8000298 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	4a7f      	ldr	r2, [pc, #508]	; (8003008 <HAL_RCC_OscConfig+0x5dc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0f3      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	4b7b      	ldr	r3, [pc, #492]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e1e:	2317      	movs	r3, #23
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	4b75      	ldr	r3, [pc, #468]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e2e:	4977      	ldr	r1, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x5e0>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d063      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d12a      	bne.n	8002e9c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e46:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4a:	4b6e      	ldr	r3, [pc, #440]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e52:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e56:	4b6b      	ldr	r3, [pc, #428]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e58:	2101      	movs	r1, #1
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7fd fa1b 	bl	8000298 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e68:	f7fd fa16 	bl	8000298 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0c0      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e7a:	4b62      	ldr	r3, [pc, #392]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	d0f1      	beq.n	8002e68 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e84:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e88:	22f8      	movs	r2, #248	; 0xf8
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	00da      	lsls	r2, r3, #3
 8002e94:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9a:	e034      	b.n	8002f06 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	3305      	adds	r3, #5
 8002ea2:	d111      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ea4:	4b57      	ldr	r3, [pc, #348]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea8:	4b56      	ldr	r3, [pc, #344]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002eaa:	2104      	movs	r1, #4
 8002eac:	438a      	bics	r2, r1
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002eb0:	4b54      	ldr	r3, [pc, #336]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	22f8      	movs	r2, #248	; 0xf8
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	00da      	lsls	r2, r3, #3
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec6:	e01e      	b.n	8002f06 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ec8:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ecc:	4b4d      	ldr	r3, [pc, #308]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002ece:	2104      	movs	r1, #4
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002eda:	2101      	movs	r1, #1
 8002edc:	438a      	bics	r2, r1
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7fd f9da 	bl	8000298 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eea:	f7fd f9d5 	bl	8000298 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e07f      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002efc:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	2202      	movs	r2, #2
 8002f02:	4013      	ands	r3, r2
 8002f04:	d1f1      	bne.n	8002eea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d100      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4e4>
 8002f0e:	e074      	b.n	8002ffa <HAL_RCC_OscConfig+0x5ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f10:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	220c      	movs	r2, #12
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4f2>
 8002f1c:	e06b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d14c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f2c:	4938      	ldr	r1, [pc, #224]	; (8003010 <HAL_RCC_OscConfig+0x5e4>)
 8002f2e:	400a      	ands	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fd f9b1 	bl	8000298 <HAL_GetTick>
 8002f36:	0003      	movs	r3, r0
 8002f38:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fd f9ac 	bl	8000298 <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e056      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	049b      	lsls	r3, r3, #18
 8002f56:	4013      	ands	r3, r2
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	220f      	movs	r2, #15
 8002f60:	4393      	bics	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a28      	ldr	r2, [pc, #160]	; (8003014 <HAL_RCC_OscConfig+0x5e8>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	431a      	orrs	r2, r3
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	0449      	lsls	r1, r1, #17
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fd f97f 	bl	8000298 <HAL_GetTick>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd f97a 	bl	8000298 <HAL_GetTick>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e024      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	049b      	lsls	r3, r3, #18
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x574>
 8002fbe:	e01c      	b.n	8002ffa <HAL_RCC_OscConfig+0x5ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002fc6:	4912      	ldr	r1, [pc, #72]	; (8003010 <HAL_RCC_OscConfig+0x5e4>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd f964 	bl	8000298 <HAL_GetTick>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fd f95f 	bl	8000298 <HAL_GetTick>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e009      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_OscConfig+0x5d8>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	049b      	lsls	r3, r3, #18
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5aa>
 8002ff4:	e001      	b.n	8002ffa <HAL_RCC_OscConfig+0x5ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x5d0>
    }
  }
  
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b006      	add	sp, #24
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	00001388 	.word	0x00001388
 800300c:	efffffff 	.word	0xefffffff
 8003010:	feffffff 	.word	0xfeffffff
 8003014:	ffc27fff 	.word	0xffc27fff

08003018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003026:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	4013      	ands	r3, r2
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d911      	bls.n	8003058 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	4393      	bics	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003046:	4b62      	ldr	r3, [pc, #392]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0b6      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2202      	movs	r2, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003062:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	22f0      	movs	r2, #240	; 0xf0
 8003068:	4393      	bics	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b58      	ldr	r3, [pc, #352]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	4013      	ands	r3, r2
 800307e:	d100      	bne.n	8003082 <HAL_RCC_ClockConfig+0x6a>
 8003080:	e067      	b.n	8003152 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	029b      	lsls	r3, r3, #10
 8003092:	4013      	ands	r3, r2
 8003094:	d114      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e095      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	049b      	lsls	r3, r3, #18
 80030aa:	4013      	ands	r3, r2
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e089      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e082      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c0:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2203      	movs	r2, #3
 80030c6:	4393      	bics	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d4:	f7fd f8e0 	bl	8000298 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d111      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e4:	e009      	b.n	80030fa <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e6:	f7fd f8d7 	bl	8000298 <HAL_GetTick>
 80030ea:	0002      	movs	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	4a39      	ldr	r2, [pc, #228]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e065      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	220c      	movs	r2, #12
 8003100:	4013      	ands	r3, r2
 8003102:	2b04      	cmp	r3, #4
 8003104:	d1ef      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xce>
 8003106:	e024      	b.n	8003152 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d11b      	bne.n	8003148 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003110:	e009      	b.n	8003126 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003112:	f7fd f8c1 	bl	8000298 <HAL_GetTick>
 8003116:	0002      	movs	r2, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e04f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	220c      	movs	r2, #12
 800312c:	4013      	ands	r3, r2
 800312e:	2b08      	cmp	r3, #8
 8003130:	d1ef      	bne.n	8003112 <HAL_RCC_ClockConfig+0xfa>
 8003132:	e00e      	b.n	8003152 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fd f8b0 	bl	8000298 <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03e      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	220c      	movs	r2, #12
 800314e:	4013      	ands	r3, r2
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	4013      	ands	r3, r2
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d211      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	4393      	bics	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2201      	movs	r2, #1
 8003178:	4013      	ands	r3, r2
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e020      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2204      	movs	r2, #4
 800318a:	4013      	ands	r3, r2
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	4013      	ands	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031a2:	f000 f821 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a6:	0001      	movs	r1, r0
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	220f      	movs	r2, #15
 80031b0:	4013      	ands	r3, r2
 80031b2:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	5cd3      	ldrb	r3, [r2, r3]
 80031b6:	000a      	movs	r2, r1
 80031b8:	40da      	lsrs	r2, r3
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_ClockConfig+0x1cc>)
 80031bc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031be:	2000      	movs	r0, #0
 80031c0:	f7fd f842 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b004      	add	sp, #16
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40021000 	.word	0x40021000
 80031d8:	00001388 	.word	0x00001388
 80031dc:	fffff8ff 	.word	0xfffff8ff
 80031e0:	08006100 	.word	0x08006100
 80031e4:	20000110 	.word	0x20000110

080031e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b08f      	sub	sp, #60	; 0x3c
 80031ec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80031ee:	2314      	movs	r3, #20
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	4a2c      	ldr	r2, [pc, #176]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031f6:	c313      	stmia	r3!, {r0, r1, r4}
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003200:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003202:	c313      	stmia	r3!, {r0, r1, r4}
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320c:	2300      	movs	r3, #0
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003210:	2300      	movs	r3, #0
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800321c:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	220c      	movs	r2, #12
 8003226:	4013      	ands	r3, r2
 8003228:	2b04      	cmp	r3, #4
 800322a:	d002      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x4a>
 800322c:	2b08      	cmp	r3, #8
 800322e:	d003      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x50>
 8003230:	e02f      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003236:	e02f      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	0c9b      	lsrs	r3, r3, #18
 800323c:	220f      	movs	r2, #15
 800323e:	4013      	ands	r3, r2
 8003240:	2214      	movs	r2, #20
 8003242:	18ba      	adds	r2, r7, r2
 8003244:	5cd3      	ldrb	r3, [r2, r3]
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	220f      	movs	r2, #15
 800324e:	4013      	ands	r3, r2
 8003250:	1d3a      	adds	r2, r7, #4
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003258:	23c0      	movs	r3, #192	; 0xc0
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	401a      	ands	r2, r3
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	025b      	lsls	r3, r3, #9
 8003262:	429a      	cmp	r2, r3
 8003264:	d109      	bne.n	800327a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003268:	4811      	ldr	r0, [pc, #68]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800326a:	f7fc ff4d 	bl	8000108 <__udivsi3>
 800326e:	0003      	movs	r3, r0
 8003270:	001a      	movs	r2, r3
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	4353      	muls	r3, r2
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
 8003278:	e008      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800327a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800327e:	f7fc ff43 	bl	8000108 <__udivsi3>
 8003282:	0003      	movs	r3, r0
 8003284:	001a      	movs	r2, r3
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	4353      	muls	r3, r2
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003290:	e002      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003296:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b00f      	add	sp, #60	; 0x3c
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	0800604c 	.word	0x0800604c
 80032a8:	0800605c 	.word	0x0800605c
 80032ac:	40021000 	.word	0x40021000
 80032b0:	007a1200 	.word	0x007a1200

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	20000110 	.word	0x20000110

080032c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80032cc:	f7ff fff2 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032d0:	0001      	movs	r1, r0
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	2207      	movs	r2, #7
 80032da:	4013      	ands	r3, r2
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	40d9      	lsrs	r1, r3
 80032e2:	000b      	movs	r3, r1
}    
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	40021000 	.word	0x40021000
 80032f0:	08006110 	.word	0x08006110

080032f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	025b      	lsls	r3, r3, #9
 800330c:	4013      	ands	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003310:	e08e      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2017      	movs	r0, #23
 8003314:	183b      	adds	r3, r7, r0
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	055b      	lsls	r3, r3, #21
 8003322:	4013      	ands	r3, r2
 8003324:	d110      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0549      	lsls	r1, r1, #21
 8003330:	430a      	orrs	r2, r1
 8003332:	61da      	str	r2, [r3, #28]
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	055b      	lsls	r3, r3, #21
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003342:	183b      	adds	r3, r7, r0
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b54      	ldr	r3, [pc, #336]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d11a      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003354:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	0049      	lsls	r1, r1, #1
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fc ff99 	bl	8000298 <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e008      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fc ff94 	bl	8000298 <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4013      	ands	r3, r2
 8003388:	d0f0      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338a:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800338c:	6a1a      	ldr	r2, [r3, #32]
 800338e:	23c0      	movs	r3, #192	; 0xc0
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d034      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	23c0      	movs	r3, #192	; 0xc0
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4013      	ands	r3, r2
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d02c      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	0249      	lsls	r1, r1, #9
 80033c0:	430a      	orrs	r2, r1
 80033c2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033c4:	4b34      	ldr	r3, [pc, #208]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	4b33      	ldr	r3, [pc, #204]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033ca:	4936      	ldr	r1, [pc, #216]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033d0:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fc ff5b 	bl	8000298 <HAL_GetTick>
 80033e2:	0003      	movs	r3, r0
 80033e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fc ff56 	bl	8000298 <HAL_GetTick>
 80033ec:	0002      	movs	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e048      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	2202      	movs	r2, #2
 8003402:	4013      	ands	r3, r2
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800340c:	4013      	ands	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003416:	430a      	orrs	r2, r1
 8003418:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800341a:	2317      	movs	r3, #23
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800342a:	4920      	ldr	r1, [pc, #128]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800342c:	400a      	ands	r2, r1
 800342e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2201      	movs	r2, #1
 8003436:	4013      	ands	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	2203      	movs	r2, #3
 8003440:	4393      	bics	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800344a:	430a      	orrs	r2, r1
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2220      	movs	r2, #32
 8003454:	4013      	ands	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	2210      	movs	r2, #16
 800345e:	4393      	bics	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003468:	430a      	orrs	r2, r1
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	029b      	lsls	r3, r3, #10
 8003474:	4013      	ands	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	4393      	bics	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003488:	430a      	orrs	r2, r1
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b006      	add	sp, #24
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	fffffcff 	.word	0xfffffcff
 80034a4:	fffeffff 	.word	0xfffeffff
 80034a8:	00001388 	.word	0x00001388
 80034ac:	efffffff 	.word	0xefffffff

080034b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e08a      	b.n	80035d8 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225d      	movs	r2, #93	; 0x5d
 80034cc:	5c9b      	ldrb	r3, [r3, r2]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	225c      	movs	r2, #92	; 0x5c
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f001 ff24 	bl	800532c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	225d      	movs	r2, #93	; 0x5d
 80034e8:	2102      	movs	r1, #2
 80034ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2140      	movs	r1, #64	; 0x40
 80034f8:	438a      	bics	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	23e0      	movs	r3, #224	; 0xe0
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	429a      	cmp	r2, r3
 8003506:	d902      	bls.n	800350e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e002      	b.n	8003514 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	015b      	lsls	r3, r3, #5
 8003512:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	23f0      	movs	r3, #240	; 0xf0
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	429a      	cmp	r2, r3
 800351e:	d008      	beq.n	8003532 <HAL_SPI_Init+0x82>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	23e0      	movs	r3, #224	; 0xe0
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	429a      	cmp	r2, r3
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	23e0      	movs	r3, #224	; 0xe0
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	429a      	cmp	r2, r3
 8003544:	d903      	bls.n	800354e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
 800354c:	e002      	b.n	8003554 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6999      	ldr	r1, [r3, #24]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	400b      	ands	r3, r1
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	431a      	orrs	r2, r3
 8003582:	0011      	movs	r1, r2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	2204      	movs	r2, #4
 8003598:	401a      	ands	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	0011      	movs	r1, r2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4907      	ldr	r1, [pc, #28]	; (80035e0 <HAL_SPI_Init+0x130>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	225d      	movs	r2, #93	; 0x5d
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b004      	add	sp, #16
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fffff7ff 	.word	0xfffff7ff

080035e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e047      	b.n	8003686 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2269      	movs	r2, #105	; 0x69
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d107      	bne.n	8003612 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2268      	movs	r2, #104	; 0x68
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	0018      	movs	r0, r3
 800360e:	f001 fed9 	bl	80053c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2269      	movs	r2, #105	; 0x69
 8003616:	2124      	movs	r1, #36	; 0x24
 8003618:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	438a      	bics	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0018      	movs	r0, r3
 800362e:	f000 f831 	bl	8003694 <UART_SetConfig>
 8003632:	0003      	movs	r3, r0
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e024      	b.n	8003686 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f000 f99c 	bl	8003984 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_UART_Init+0xac>)
 8003658:	400a      	ands	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2108      	movs	r1, #8
 8003668:	438a      	bics	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2101      	movs	r1, #1
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f000 fa34 	bl	8003aec <UART_CheckIdleState>
 8003684:	0003      	movs	r3, r0
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	fffff7ff 	.word	0xfffff7ff

08003694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80036a0:	2317      	movs	r3, #23
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2210      	movs	r2, #16
 80036a6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80036a8:	230a      	movs	r3, #10
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80036b0:	2314      	movs	r3, #20
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b8:	2313      	movs	r3, #19
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4aa1      	ldr	r2, [pc, #644]	; (8003964 <UART_SetConfig+0x2d0>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a9c      	ldr	r2, [pc, #624]	; (8003968 <UART_SetConfig+0x2d4>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a94      	ldr	r2, [pc, #592]	; (800396c <UART_SetConfig+0x2d8>)
 800371a:	4013      	ands	r3, r2
 800371c:	0019      	movs	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a90      	ldr	r2, [pc, #576]	; (8003970 <UART_SetConfig+0x2dc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d127      	bne.n	8003782 <UART_SetConfig+0xee>
 8003732:	4b90      	ldr	r3, [pc, #576]	; (8003974 <UART_SetConfig+0x2e0>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	2203      	movs	r2, #3
 8003738:	4013      	ands	r3, r2
 800373a:	2b03      	cmp	r3, #3
 800373c:	d00d      	beq.n	800375a <UART_SetConfig+0xc6>
 800373e:	d81b      	bhi.n	8003778 <UART_SetConfig+0xe4>
 8003740:	2b02      	cmp	r3, #2
 8003742:	d014      	beq.n	800376e <UART_SetConfig+0xda>
 8003744:	d818      	bhi.n	8003778 <UART_SetConfig+0xe4>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <UART_SetConfig+0xbc>
 800374a:	2b01      	cmp	r3, #1
 800374c:	d00a      	beq.n	8003764 <UART_SetConfig+0xd0>
 800374e:	e013      	b.n	8003778 <UART_SetConfig+0xe4>
 8003750:	2317      	movs	r3, #23
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	e021      	b.n	800379e <UART_SetConfig+0x10a>
 800375a:	2317      	movs	r3, #23
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2202      	movs	r2, #2
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e01c      	b.n	800379e <UART_SetConfig+0x10a>
 8003764:	2317      	movs	r3, #23
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	2204      	movs	r2, #4
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	e017      	b.n	800379e <UART_SetConfig+0x10a>
 800376e:	2317      	movs	r3, #23
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	2208      	movs	r2, #8
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e012      	b.n	800379e <UART_SetConfig+0x10a>
 8003778:	2317      	movs	r3, #23
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2210      	movs	r2, #16
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e00d      	b.n	800379e <UART_SetConfig+0x10a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7c      	ldr	r2, [pc, #496]	; (8003978 <UART_SetConfig+0x2e4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d104      	bne.n	8003796 <UART_SetConfig+0x102>
 800378c:	2317      	movs	r3, #23
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e003      	b.n	800379e <UART_SetConfig+0x10a>
 8003796:	2317      	movs	r3, #23
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	2210      	movs	r2, #16
 800379c:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d000      	beq.n	80037ac <UART_SetConfig+0x118>
 80037aa:	e077      	b.n	800389c <UART_SetConfig+0x208>
  {
    switch (clocksource)
 80037ac:	2317      	movs	r3, #23
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d041      	beq.n	800383a <UART_SetConfig+0x1a6>
 80037b6:	dc52      	bgt.n	800385e <UART_SetConfig+0x1ca>
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d02a      	beq.n	8003812 <UART_SetConfig+0x17e>
 80037bc:	dc4f      	bgt.n	800385e <UART_SetConfig+0x1ca>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <UART_SetConfig+0x134>
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d014      	beq.n	80037f0 <UART_SetConfig+0x15c>
 80037c6:	e04a      	b.n	800385e <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037c8:	f7ff fd7e 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 80037cc:	0003      	movs	r3, r0
 80037ce:	005a      	lsls	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	18d2      	adds	r2, r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	0019      	movs	r1, r3
 80037de:	0010      	movs	r0, r2
 80037e0:	f7fc fc92 	bl	8000108 <__udivsi3>
 80037e4:	0003      	movs	r3, r0
 80037e6:	001a      	movs	r2, r3
 80037e8:	2314      	movs	r3, #20
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	801a      	strh	r2, [r3, #0]
        break;
 80037ee:	e03b      	b.n	8003868 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	4a61      	ldr	r2, [pc, #388]	; (800397c <UART_SetConfig+0x2e8>)
 80037f8:	189a      	adds	r2, r3, r2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0019      	movs	r1, r3
 8003800:	0010      	movs	r0, r2
 8003802:	f7fc fc81 	bl	8000108 <__udivsi3>
 8003806:	0003      	movs	r3, r0
 8003808:	001a      	movs	r2, r3
 800380a:	2314      	movs	r3, #20
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	801a      	strh	r2, [r3, #0]
        break;
 8003810:	e02a      	b.n	8003868 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003812:	f7ff fce9 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8003816:	0003      	movs	r3, r0
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	18d2      	adds	r2, r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0019      	movs	r1, r3
 8003828:	0010      	movs	r0, r2
 800382a:	f7fc fc6d 	bl	8000108 <__udivsi3>
 800382e:	0003      	movs	r3, r0
 8003830:	001a      	movs	r2, r3
 8003832:	2314      	movs	r3, #20
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	801a      	strh	r2, [r3, #0]
        break;
 8003838:	e016      	b.n	8003868 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	0252      	lsls	r2, r2, #9
 8003844:	189a      	adds	r2, r3, r2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0019      	movs	r1, r3
 800384c:	0010      	movs	r0, r2
 800384e:	f7fc fc5b 	bl	8000108 <__udivsi3>
 8003852:	0003      	movs	r3, r0
 8003854:	001a      	movs	r2, r3
 8003856:	2314      	movs	r3, #20
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	801a      	strh	r2, [r3, #0]
        break;
 800385c:	e004      	b.n	8003868 <UART_SetConfig+0x1d4>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800385e:	2313      	movs	r3, #19
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
        break;
 8003866:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003868:	200a      	movs	r0, #10
 800386a:	183b      	adds	r3, r7, r0
 800386c:	2414      	movs	r4, #20
 800386e:	193a      	adds	r2, r7, r4
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	210f      	movs	r1, #15
 8003874:	438a      	bics	r2, r1
 8003876:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003878:	193b      	adds	r3, r7, r4
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	105b      	asrs	r3, r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	2207      	movs	r2, #7
 8003882:	4013      	ands	r3, r2
 8003884:	b299      	uxth	r1, r3
 8003886:	183b      	adds	r3, r7, r0
 8003888:	183a      	adds	r2, r7, r0
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	183a      	adds	r2, r7, r0
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	e05b      	b.n	8003954 <UART_SetConfig+0x2c0>
  }
  else
  {
    switch (clocksource)
 800389c:	2317      	movs	r3, #23
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d03f      	beq.n	8003926 <UART_SetConfig+0x292>
 80038a6:	dc50      	bgt.n	800394a <UART_SetConfig+0x2b6>
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d029      	beq.n	8003900 <UART_SetConfig+0x26c>
 80038ac:	dc4d      	bgt.n	800394a <UART_SetConfig+0x2b6>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <UART_SetConfig+0x224>
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d013      	beq.n	80038de <UART_SetConfig+0x24a>
 80038b6:	e048      	b.n	800394a <UART_SetConfig+0x2b6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038b8:	f7ff fd06 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 80038bc:	0002      	movs	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	18d2      	adds	r2, r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f7fc fc1b 	bl	8000108 <__udivsi3>
 80038d2:	0003      	movs	r3, r0
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60da      	str	r2, [r3, #12]
        break;
 80038dc:	e03a      	b.n	8003954 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	4a26      	ldr	r2, [pc, #152]	; (8003980 <UART_SetConfig+0x2ec>)
 80038e6:	189a      	adds	r2, r3, r2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0019      	movs	r1, r3
 80038ee:	0010      	movs	r0, r2
 80038f0:	f7fc fc0a 	bl	8000108 <__udivsi3>
 80038f4:	0003      	movs	r3, r0
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60da      	str	r2, [r3, #12]
        break;
 80038fe:	e029      	b.n	8003954 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003900:	f7ff fc72 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8003904:	0002      	movs	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	18d2      	adds	r2, r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	0019      	movs	r1, r3
 8003914:	0010      	movs	r0, r2
 8003916:	f7fc fbf7 	bl	8000108 <__udivsi3>
 800391a:	0003      	movs	r3, r0
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60da      	str	r2, [r3, #12]
        break;
 8003924:	e016      	b.n	8003954 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	0212      	lsls	r2, r2, #8
 8003930:	189a      	adds	r2, r3, r2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0019      	movs	r1, r3
 8003938:	0010      	movs	r0, r2
 800393a:	f7fc fbe5 	bl	8000108 <__udivsi3>
 800393e:	0003      	movs	r3, r0
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60da      	str	r2, [r3, #12]
        break;
 8003948:	e004      	b.n	8003954 <UART_SetConfig+0x2c0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800394a:	2313      	movs	r3, #19
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
        break;
 8003952:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003954:	2313      	movs	r3, #19
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	781b      	ldrb	r3, [r3, #0]

}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b007      	add	sp, #28
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	efff69f3 	.word	0xefff69f3
 8003968:	ffffcfff 	.word	0xffffcfff
 800396c:	fffff4ff 	.word	0xfffff4ff
 8003970:	40013800 	.word	0x40013800
 8003974:	40021000 	.word	0x40021000
 8003978:	40004400 	.word	0x40004400
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d00b      	beq.n	80039ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <UART_AdvFeatureConfig+0x144>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2202      	movs	r2, #2
 80039b4:	4013      	ands	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a43      	ldr	r2, [pc, #268]	; (8003acc <UART_AdvFeatureConfig+0x148>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2204      	movs	r2, #4
 80039d6:	4013      	ands	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a3b      	ldr	r2, [pc, #236]	; (8003ad0 <UART_AdvFeatureConfig+0x14c>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2208      	movs	r2, #8
 80039f8:	4013      	ands	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a34      	ldr	r2, [pc, #208]	; (8003ad4 <UART_AdvFeatureConfig+0x150>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	2210      	movs	r2, #16
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <UART_AdvFeatureConfig+0x154>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <UART_AdvFeatureConfig+0x158>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2240      	movs	r2, #64	; 0x40
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <UART_AdvFeatureConfig+0x15c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	035b      	lsls	r3, r3, #13
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d10b      	bne.n	8003a9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <UART_AdvFeatureConfig+0x160>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <UART_AdvFeatureConfig+0x164>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	fffdffff 	.word	0xfffdffff
 8003acc:	fffeffff 	.word	0xfffeffff
 8003ad0:	fffbffff 	.word	0xfffbffff
 8003ad4:	ffff7fff 	.word	0xffff7fff
 8003ad8:	ffffefff 	.word	0xffffefff
 8003adc:	ffffdfff 	.word	0xffffdfff
 8003ae0:	ffefffff 	.word	0xffefffff
 8003ae4:	ff9fffff 	.word	0xff9fffff
 8003ae8:	fff7ffff 	.word	0xfff7ffff

08003aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2269      	movs	r2, #105	; 0x69
 8003afe:	2120      	movs	r1, #32
 8003b00:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	226a      	movs	r2, #106	; 0x6a
 8003b06:	2120      	movs	r1, #32
 8003b08:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2268      	movs	r2, #104	; 0x68
 8003b0e:	2100      	movs	r1, #0
 8003b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	000a      	movs	r2, r1
 8003b26:	1cfb      	adds	r3, r7, #3
 8003b28:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8003b2a:	230f      	movs	r3, #15
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7c1b      	ldrb	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <USBD_CDC_Init+0x3c>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	2181      	movs	r1, #129	; 0x81
 8003b44:	f001 feef 	bl	8005926 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	2101      	movs	r1, #1
 8003b52:	f001 fee8 	bl	8005926 <USBD_LL_OpenEP>
 8003b56:	e00b      	b.n	8003b70 <USBD_CDC_Init+0x54>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	2340      	movs	r3, #64	; 0x40
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	2181      	movs	r1, #129	; 0x81
 8003b60:	f001 fee1 	bl	8005926 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	2202      	movs	r2, #2
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f001 fedb 	bl	8005926 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	2308      	movs	r3, #8
 8003b74:	2203      	movs	r2, #3
 8003b76:	2182      	movs	r1, #130	; 0x82
 8003b78:	f001 fed5 	bl	8005926 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003b7c:	2387      	movs	r3, #135	; 0x87
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f002 f869 	bl	8005c58 <USBD_static_malloc>
 8003b86:	0001      	movs	r1, r0
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	2386      	movs	r3, #134	; 0x86
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	2386      	movs	r3, #134	; 0x86
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	58d3      	ldr	r3, [r2, r3]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <USBD_CDC_Init+0x8a>
  {
    ret = 1; 
 8003b9c:	230f      	movs	r3, #15
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e02c      	b.n	8003c00 <USBD_CDC_Init+0xe4>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	2386      	movs	r3, #134	; 0x86
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	58d3      	ldr	r3, [r2, r3]
 8003bae:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	2387      	movs	r3, #135	; 0x87
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	58d3      	ldr	r3, [r2, r3]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	2385      	movs	r3, #133	; 0x85
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState =0;
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	2386      	movs	r3, #134	; 0x86
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	2100      	movs	r1, #0
 8003bce:	50d1      	str	r1, [r2, r3]
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7c1b      	ldrb	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <USBD_CDC_Init+0xd2>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	2381      	movs	r3, #129	; 0x81
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	58d2      	ldr	r2, [r2, r3]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	2101      	movs	r1, #1
 8003be8:	f001 ffe8 	bl	8005bbc <USBD_LL_PrepareReceive>
 8003bec:	e008      	b.n	8003c00 <USBD_CDC_Init+0xe4>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	2381      	movs	r3, #129	; 0x81
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	58d2      	ldr	r2, [r2, r3]
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	2340      	movs	r3, #64	; 0x40
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	f001 ffde 	bl	8005bbc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8003c00:	230f      	movs	r3, #15
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	781b      	ldrb	r3, [r3, #0]
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b004      	add	sp, #16
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	000a      	movs	r2, r1
 8003c18:	1cfb      	adds	r3, r7, #3
 8003c1a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8003c1c:	230f      	movs	r3, #15
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2181      	movs	r1, #129	; 0x81
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f001 feb3 	bl	8005994 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2101      	movs	r1, #1
 8003c32:	0018      	movs	r0, r3
 8003c34:	f001 feae 	bl	8005994 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2182      	movs	r1, #130	; 0x82
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f001 fea9 	bl	8005994 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	2386      	movs	r3, #134	; 0x86
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	58d3      	ldr	r3, [r2, r3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d011      	beq.n	8003c72 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	2387      	movs	r3, #135	; 0x87
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	58d3      	ldr	r3, [r2, r3]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	2386      	movs	r3, #134	; 0x86
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	58d3      	ldr	r3, [r2, r3]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f002 f804 	bl	8005c70 <USBD_static_free>
    pdev->pClassData = NULL;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	2386      	movs	r3, #134	; 0x86
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	2100      	movs	r1, #0
 8003c70:	50d1      	str	r1, [r2, r3]
  }
  
  return ret;
 8003c72:	230f      	movs	r3, #15
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b004      	add	sp, #16
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	2386      	movs	r3, #134	; 0x86
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	58d3      	ldr	r3, [r2, r3]
 8003c92:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	001a      	movs	r2, r3
 8003c9a:	2360      	movs	r3, #96	; 0x60
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d03c      	beq.n	8003d1a <USBD_CDC_Setup+0x9a>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d149      	bne.n	8003d38 <USBD_CDC_Setup+0xb8>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	88db      	ldrh	r3, [r3, #6]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d02b      	beq.n	8003d04 <USBD_CDC_Setup+0x84>
    {
      if (req->bmRequest & 0x80)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da12      	bge.n	8003cdc <USBD_CDC_Setup+0x5c>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	2387      	movs	r3, #135	; 0x87
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	58d3      	ldr	r3, [r2, r3]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8003cc4:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	88d2      	ldrh	r2, [r2, #6]
 8003cca:	4798      	blx	r3
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8003ccc:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	88da      	ldrh	r2, [r3, #6]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f001 f90a 	bl	8004eee <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8003cda:	e02e      	b.n	8003d3a <USBD_CDC_Setup+0xba>
        hcdc->CmdOpCode = req->bRequest;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	7859      	ldrb	r1, [r3, #1]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = req->wLength;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	88db      	ldrh	r3, [r3, #6]
 8003cec:	b2d9      	uxtb	r1, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <USBD_CDC_Setup+0xc4>)
 8003cf2:	5499      	strb	r1, [r3, r2]
                           (uint8_t *)hcdc->data,
 8003cf4:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	88da      	ldrh	r2, [r3, #6]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f001 f929 	bl	8004f54 <USBD_CtlPrepareRx>
    break;
 8003d02:	e01a      	b.n	8003d3a <USBD_CDC_Setup+0xba>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	2387      	movs	r3, #135	; 0x87
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	58d3      	ldr	r3, [r2, r3]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	7850      	ldrb	r0, [r2, #1]
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	2200      	movs	r2, #0
 8003d16:	4798      	blx	r3
    break;
 8003d18:	e00f      	b.n	8003d3a <USBD_CDC_Setup+0xba>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	2b0a      	cmp	r3, #10
 8003d20:	d002      	beq.n	8003d28 <USBD_CDC_Setup+0xa8>
 8003d22:	2b0b      	cmp	r3, #11
 8003d24:	d007      	beq.n	8003d36 <USBD_CDC_Setup+0xb6>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8003d26:	e007      	b.n	8003d38 <USBD_CDC_Setup+0xb8>
      USBD_CtlSendData (pdev,
 8003d28:	4907      	ldr	r1, [pc, #28]	; (8003d48 <USBD_CDC_Setup+0xc8>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f001 f8dd 	bl	8004eee <USBD_CtlSendData>
      break;
 8003d34:	e000      	b.n	8003d38 <USBD_CDC_Setup+0xb8>
      break;
 8003d36:	46c0      	nop			; (mov r8, r8)
    break;
 8003d38:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b004      	add	sp, #16
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	00000201 	.word	0x00000201
 8003d48:	20000190 	.word	0x20000190

08003d4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	000a      	movs	r2, r1
 8003d56:	1cfb      	adds	r3, r7, #3
 8003d58:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	2386      	movs	r3, #134	; 0x86
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	58d3      	ldr	r3, [r2, r3]
 8003d62:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	2386      	movs	r3, #134	; 0x86
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	58d3      	ldr	r3, [r2, r3]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d006      	beq.n	8003d7e <USBD_CDC_DataIn+0x32>
  {
    
    hcdc->TxState = 0;
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	2385      	movs	r3, #133	; 0x85
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	2100      	movs	r1, #0
 8003d78:	50d1      	str	r1, [r2, r3]

    return USBD_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <USBD_CDC_DataIn+0x34>
  }
  else
  {
    return USBD_FAIL;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b004      	add	sp, #16
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	000a      	movs	r2, r1
 8003d92:	1cfb      	adds	r3, r7, #3
 8003d94:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	2386      	movs	r3, #134	; 0x86
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	58d3      	ldr	r3, [r2, r3]
 8003d9e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003da0:	1cfb      	adds	r3, r7, #3
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0011      	movs	r1, r2
 8003da8:	0018      	movs	r0, r3
 8003daa:	f001 ff3e 	bl	8005c2a <USBD_LL_GetRxDataSize>
 8003dae:	0001      	movs	r1, r0
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	2383      	movs	r3, #131	; 0x83
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	50d1      	str	r1, [r2, r3]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	2386      	movs	r3, #134	; 0x86
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	58d3      	ldr	r3, [r2, r3]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d011      	beq.n	8003de8 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	2387      	movs	r3, #135	; 0x87
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	58d3      	ldr	r3, [r2, r3]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	2381      	movs	r3, #129	; 0x81
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	58c8      	ldr	r0, [r1, r3]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2183      	movs	r1, #131	; 0x83
 8003dda:	0089      	lsls	r1, r1, #2
 8003ddc:	468c      	mov	ip, r1
 8003dde:	4463      	add	r3, ip
 8003de0:	0019      	movs	r1, r3
 8003de2:	4790      	blx	r2

    return USBD_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	2386      	movs	r3, #134	; 0x86
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	58d3      	ldr	r3, [r2, r3]
 8003e04:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	2387      	movs	r3, #135	; 0x87
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	58d3      	ldr	r3, [r2, r3]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d019      	beq.n	8003e46 <USBD_CDC_EP0_RxReady+0x52>
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	5cd3      	ldrb	r3, [r2, r3]
 8003e1a:	2bff      	cmp	r3, #255	; 0xff
 8003e1c:	d013      	beq.n	8003e46 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	2387      	movs	r3, #135	; 0x87
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	58d3      	ldr	r3, [r2, r3]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 8003e30:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4c06      	ldr	r4, [pc, #24]	; (8003e50 <USBD_CDC_EP0_RxReady+0x5c>)
 8003e36:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	21ff      	movs	r1, #255	; 0xff
 8003e44:	54d1      	strb	r1, [r2, r3]
      
  }
  return USBD_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b005      	add	sp, #20
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	00000201 	.word	0x00000201

08003e54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2243      	movs	r2, #67	; 0x43
 8003e60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003e62:	4b02      	ldr	r3, [pc, #8]	; (8003e6c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000088 	.word	0x20000088

08003e70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2243      	movs	r2, #67	; 0x43
 8003e7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003e7e:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b002      	add	sp, #8
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000044 	.word	0x20000044

08003e8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2243      	movs	r2, #67	; 0x43
 8003e98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003e9a:	4b02      	ldr	r3, [pc, #8]	; (8003ea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200000cc 	.word	0x200000cc

08003ea8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	220a      	movs	r2, #10
 8003eb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003eb6:	4b02      	ldr	r3, [pc, #8]	; (8003ec0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000000 	.word	0x20000000

08003ec4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003ece:	200f      	movs	r0, #15
 8003ed0:	183b      	adds	r3, r7, r0
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	701a      	strb	r2, [r3, #0]
  
  if(fops != NULL)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData= fops;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	2387      	movs	r3, #135	; 0x87
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;    
 8003ee6:	183b      	adds	r3, r7, r0
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8003eec:	230f      	movs	r3, #15
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	781b      	ldrb	r3, [r3, #0]
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	1dbb      	adds	r3, r7, #6
 8003f06:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	2386      	movs	r3, #134	; 0x86
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	58d3      	ldr	r3, [r2, r3]
 8003f10:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	2382      	movs	r3, #130	; 0x82
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;  
 8003f1c:	1dbb      	adds	r3, r7, #6
 8003f1e:	8819      	ldrh	r1, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	2384      	movs	r3, #132	; 0x84
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;  
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	2386      	movs	r3, #134	; 0x86
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	58d3      	ldr	r3, [r2, r3]
 8003f44:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	2381      	movs	r3, #129	; 0x81
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b004      	add	sp, #16
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	2386      	movs	r3, #134	; 0x86
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	58d3      	ldr	r3, [r2, r3]
 8003f6a:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	2386      	movs	r3, #134	; 0x86
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	58d3      	ldr	r3, [r2, r3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d019      	beq.n	8003fac <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7c1b      	ldrb	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <USBD_CDC_ReceivePacket+0x3c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	2381      	movs	r3, #129	; 0x81
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	58d2      	ldr	r2, [r2, r3]
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	f001 fe14 	bl	8005bbc <USBD_LL_PrepareReceive>
 8003f94:	e008      	b.n	8003fa8 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	2381      	movs	r3, #129	; 0x81
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	58d2      	ldr	r2, [r2, r3]
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	2340      	movs	r3, #64	; 0x40
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	f001 fe0a 	bl	8005bbc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b004      	add	sp, #16
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	1dfb      	adds	r3, r7, #7
 8003fc2:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e020      	b.n	8004010 <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	2385      	movs	r3, #133	; 0x85
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	58d3      	ldr	r3, [r2, r3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	2385      	movs	r3, #133	; 0x85
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	2384      	movs	r3, #132	; 0x84
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	23fe      	movs	r3, #254	; 0xfe
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1dfa      	adds	r2, r7, #7
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0018      	movs	r0, r3
 800400a:	f001 fc03 	bl	8005814 <USBD_LL_Init>
  
  return USBD_OK; 
 800400e:	2300      	movs	r3, #0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bd80      	pop	{r7, pc}

08004018 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004022:	200f      	movs	r0, #15
 8004024:	183b      	adds	r3, r7, r0
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	2385      	movs	r3, #133	; 0x85
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	6839      	ldr	r1, [r7, #0]
 8004038:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800403a:	183b      	adds	r3, r7, r0
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e003      	b.n	800404a <USBD_RegisterClass+0x32>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004042:	230f      	movs	r3, #15
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 800404a:	230f      	movs	r3, #15
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	781b      	ldrb	r3, [r3, #0]
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b004      	add	sp, #16
 8004056:	bd80      	pop	{r7, pc}

08004058 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0018      	movs	r0, r3
 8004064:	f001 fc3a 	bl	80058dc <USBD_LL_Start>
  
  return USBD_OK;  
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b002      	add	sp, #8
 8004070:	bd80      	pop	{r7, pc}

08004072 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}

08004084 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	000a      	movs	r2, r1
 800408e:	1cfb      	adds	r3, r7, #3
 8004090:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004092:	240f      	movs	r4, #15
 8004094:	193b      	adds	r3, r7, r4
 8004096:	2202      	movs	r2, #2
 8004098:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	2385      	movs	r3, #133	; 0x85
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	58d3      	ldr	r3, [r2, r3]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	2385      	movs	r3, #133	; 0x85
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	58d3      	ldr	r3, [r2, r3]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	1cfa      	adds	r2, r7, #3
 80040b2:	7811      	ldrb	r1, [r2, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	0010      	movs	r0, r2
 80040b8:	4798      	blx	r3
 80040ba:	1e03      	subs	r3, r0, #0
 80040bc:	d102      	bne.n	80040c4 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 80040c4:	230f      	movs	r3, #15
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	781b      	ldrb	r3, [r3, #0]
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b005      	add	sp, #20
 80040d0:	bd90      	pop	{r4, r7, pc}

080040d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	000a      	movs	r2, r1
 80040dc:	1cfb      	adds	r3, r7, #3
 80040de:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	2385      	movs	r3, #133	; 0x85
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	58d3      	ldr	r3, [r2, r3]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	1cfa      	adds	r2, r7, #3
 80040ec:	7811      	ldrb	r1, [r2, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	0010      	movs	r0, r2
 80040f2:	4798      	blx	r3
  return USBD_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b002      	add	sp, #8
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2282      	movs	r2, #130	; 0x82
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4694      	mov	ip, r2
 8004112:	4463      	add	r3, ip
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	0011      	movs	r1, r2
 8004118:	0018      	movs	r0, r3
 800411a:	f000 fe2e 	bl	8004d7a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	23fa      	movs	r3, #250	; 0xfa
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2101      	movs	r1, #1
 8004126:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <USBD_LL_SetupStage+0xb8>)
 800412c:	5a9b      	ldrh	r3, [r3, r2]
 800412e:	0019      	movs	r1, r3
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	23fc      	movs	r3, #252	; 0xfc
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	2382      	movs	r3, #130	; 0x82
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	001a      	movs	r2, r3
 8004142:	231f      	movs	r3, #31
 8004144:	4013      	ands	r3, r2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d019      	beq.n	800417e <USBD_LL_SetupStage+0x7e>
 800414a:	dc22      	bgt.n	8004192 <USBD_LL_SetupStage+0x92>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <USBD_LL_SetupStage+0x56>
 8004150:	2b01      	cmp	r3, #1
 8004152:	d00a      	beq.n	800416a <USBD_LL_SetupStage+0x6a>
 8004154:	e01d      	b.n	8004192 <USBD_LL_SetupStage+0x92>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2282      	movs	r2, #130	; 0x82
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	189a      	adds	r2, r3, r2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	0011      	movs	r1, r2
 8004162:	0018      	movs	r0, r3
 8004164:	f000 f9be 	bl	80044e4 <USBD_StdDevReq>
    break;
 8004168:	e020      	b.n	80041ac <USBD_LL_SetupStage+0xac>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2282      	movs	r2, #130	; 0x82
 800416e:	0092      	lsls	r2, r2, #2
 8004170:	189a      	adds	r2, r3, r2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fa08 	bl	800458c <USBD_StdItfReq>
    break;
 800417c:	e016      	b.n	80041ac <USBD_LL_SetupStage+0xac>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2282      	movs	r2, #130	; 0x82
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	189a      	adds	r2, r3, r2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0011      	movs	r1, r2
 800418a:	0018      	movs	r0, r3
 800418c:	f000 fa3c 	bl	8004608 <USBD_StdEPReq>
    break;
 8004190:	e00c      	b.n	80041ac <USBD_LL_SetupStage+0xac>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	2382      	movs	r3, #130	; 0x82
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	5cd3      	ldrb	r3, [r2, r3]
 800419a:	227f      	movs	r2, #127	; 0x7f
 800419c:	4393      	bics	r3, r2
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f001 fc20 	bl	80059ea <USBD_LL_StallEP>
    break;
 80041aa:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b002      	add	sp, #8
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	0000020e 	.word	0x0000020e

080041bc <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	200b      	movs	r0, #11
 80041c8:	183b      	adds	r3, r7, r0
 80041ca:	1c0a      	adds	r2, r1, #0
 80041cc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80041ce:	183b      	adds	r3, r7, r0
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d13e      	bne.n	8004254 <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3305      	adds	r3, #5
 80041da:	33ff      	adds	r3, #255	; 0xff
 80041dc:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	23fa      	movs	r3, #250	; 0xfa
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	58d3      	ldr	r3, [r2, r3]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d14c      	bne.n	8004284 <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d914      	bls.n	8004220 <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	1ad2      	subs	r2, r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d900      	bls.n	8004212 <USBD_LL_DataOutStage+0x56>
 8004210:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8004212:	b292      	uxth	r2, r2
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 febf 	bl	8004f9c <USBD_CtlContinueRx>
 800421e:	e031      	b.n	8004284 <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	2385      	movs	r3, #133	; 0x85
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	58d3      	ldr	r3, [r2, r3]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	23fe      	movs	r3, #254	; 0xfe
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004236:	2b03      	cmp	r3, #3
 8004238:	d107      	bne.n	800424a <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	2385      	movs	r3, #133	; 0x85
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	58d3      	ldr	r3, [r2, r3]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	0010      	movs	r0, r2
 8004248:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0018      	movs	r0, r3
 800424e:	f000 feb8 	bl	8004fc2 <USBD_CtlSendStatus>
 8004252:	e017      	b.n	8004284 <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	2385      	movs	r3, #133	; 0x85
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	58d3      	ldr	r3, [r2, r3]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	23fe      	movs	r3, #254	; 0xfe
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 800426a:	2b03      	cmp	r3, #3
 800426c:	d10a      	bne.n	8004284 <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	2385      	movs	r3, #133	; 0x85
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	58d3      	ldr	r3, [r2, r3]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	220b      	movs	r2, #11
 800427a:	18ba      	adds	r2, r7, r2
 800427c:	7811      	ldrb	r1, [r2, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	0010      	movs	r0, r2
 8004282:	4798      	blx	r3
  }  
  return USBD_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b006      	add	sp, #24
 800428c:	bd80      	pop	{r7, pc}

0800428e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	200b      	movs	r0, #11
 800429a:	183b      	adds	r3, r7, r0
 800429c:	1c0a      	adds	r2, r1, #0
 800429e:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80042a0:	183b      	adds	r3, r7, r0
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d000      	beq.n	80042aa <USBD_LL_DataInStage+0x1c>
 80042a8:	e077      	b.n	800439a <USBD_LL_DataInStage+0x10c>
  {
    pep = &pdev->ep_in[0];
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3314      	adds	r3, #20
 80042ae:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	23fa      	movs	r3, #250	; 0xfa
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	58d3      	ldr	r3, [r2, r3]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d15e      	bne.n	800437a <USBD_LL_DataInStage+0xec>
    {
      if(pep->rem_length > pep->maxpacket)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d915      	bls.n	80042f4 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	1ad2      	subs	r2, r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 80042da:	b29a      	uxth	r2, r3
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 fe24 	bl	8004f2e <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	2300      	movs	r3, #0
 80042ea:	2200      	movs	r2, #0
 80042ec:	2100      	movs	r1, #0
 80042ee:	f001 fc65 	bl	8005bbc <USBD_LL_PrepareReceive>
 80042f2:	e042      	b.n	800437a <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0019      	movs	r1, r3
 80042fe:	0010      	movs	r0, r2
 8004300:	f7fb ff88 	bl	8000214 <__aeabi_uidivmod>
 8004304:	1e0b      	subs	r3, r1, #0
 8004306:	d11f      	bne.n	8004348 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004310:	429a      	cmp	r2, r3
 8004312:	d319      	bcc.n	8004348 <USBD_LL_DataInStage+0xba>
             (pep->total_length < pdev->ep0_data_len ))
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68f9      	ldr	r1, [r7, #12]
 800431a:	23fc      	movs	r3, #252	; 0xfc
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8004320:	429a      	cmp	r2, r3
 8004322:	d211      	bcs.n	8004348 <USBD_LL_DataInStage+0xba>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	0018      	movs	r0, r3
 800432c:	f000 fdff 	bl	8004f2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	23fc      	movs	r3, #252	; 0xfc
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2100      	movs	r1, #0
 8004338:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	2300      	movs	r3, #0
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	f001 fc3b 	bl	8005bbc <USBD_LL_PrepareReceive>
 8004346:	e018      	b.n	800437a <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	2385      	movs	r3, #133	; 0x85
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	58d3      	ldr	r3, [r2, r3]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	23fe      	movs	r3, #254	; 0xfe
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800435e:	2b03      	cmp	r3, #3
 8004360:	d107      	bne.n	8004372 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	2385      	movs	r3, #133	; 0x85
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	58d3      	ldr	r3, [r2, r3]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	0010      	movs	r0, r2
 8004370:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 fe38 	bl	8004fea <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	5cd3      	ldrb	r3, [r2, r3]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d121      	bne.n	80043ca <USBD_LL_DataInStage+0x13c>
    {
      USBD_RunTestMode(pdev); 
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	0018      	movs	r0, r3
 800438a:	f7ff fe72 	bl	8004072 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	2100      	movs	r1, #0
 8004396:	54d1      	strb	r1, [r2, r3]
 8004398:	e017      	b.n	80043ca <USBD_LL_DataInStage+0x13c>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	2385      	movs	r3, #133	; 0x85
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	58d3      	ldr	r3, [r2, r3]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	23fe      	movs	r3, #254	; 0xfe
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d10a      	bne.n	80043ca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	2385      	movs	r3, #133	; 0x85
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	58d3      	ldr	r3, [r2, r3]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	220b      	movs	r2, #11
 80043c0:	18ba      	adds	r2, r7, r2
 80043c2:	7811      	ldrb	r1, [r2, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	0010      	movs	r0, r2
 80043c8:	4798      	blx	r3
  }  
  return USBD_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b006      	add	sp, #24
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	2340      	movs	r3, #64	; 0x40
 80043e0:	2200      	movs	r2, #0
 80043e2:	2100      	movs	r1, #0
 80043e4:	f001 fa9f 	bl	8005926 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	2388      	movs	r3, #136	; 0x88
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	2140      	movs	r1, #64	; 0x40
 80043f0:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	2340      	movs	r3, #64	; 0x40
 80043f6:	2200      	movs	r2, #0
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	f001 fa94 	bl	8005926 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2240      	movs	r2, #64	; 0x40
 8004402:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	23fe      	movs	r3, #254	; 0xfe
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	2101      	movs	r1, #1
 800440c:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	2386      	movs	r3, #134	; 0x86
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	58d3      	ldr	r3, [r2, r3]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	2385      	movs	r3, #133	; 0x85
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	58d3      	ldr	r3, [r2, r3]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	b2d9      	uxtb	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	4790      	blx	r2
 
  
  return USBD_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	0018      	movs	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	b002      	add	sp, #8
 8004438:	bd80      	pop	{r7, pc}

0800443a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	000a      	movs	r2, r1
 8004444:	1cfb      	adds	r3, r7, #3
 8004446:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1cfa      	adds	r2, r7, #3
 800444c:	7812      	ldrb	r2, [r2, #0]
 800444e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b002      	add	sp, #8
 8004458:	bd80      	pop	{r7, pc}

0800445a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	23fe      	movs	r3, #254	; 0xfe
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	5cd1      	ldrb	r1, [r2, r3]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	23fe      	movs	r3, #254	; 0xfe
 800446e:	33ff      	adds	r3, #255	; 0xff
 8004470:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	23fe      	movs	r3, #254	; 0xfe
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2104      	movs	r1, #4
 800447a:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}

08004486 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	23fe      	movs	r3, #254	; 0xfe
 8004492:	33ff      	adds	r3, #255	; 0xff
 8004494:	5cd1      	ldrb	r1, [r2, r3]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	23fe      	movs	r3, #254	; 0xfe
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	23fe      	movs	r3, #254	; 0xfe
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d10e      	bne.n	80044da <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	2385      	movs	r3, #133	; 0x85
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	58d3      	ldr	r3, [r2, r3]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	2385      	movs	r3, #133	; 0x85
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	58d3      	ldr	r3, [r2, r3]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	0010      	movs	r0, r2
 80044d8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	0018      	movs	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80044ee:	230f      	movs	r3, #15
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b09      	cmp	r3, #9
 80044fc:	d835      	bhi.n	800456a <USBD_StdDevReq+0x86>
 80044fe:	009a      	lsls	r2, r3, #2
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <USBD_StdDevReq+0xa4>)
 8004502:	18d3      	adds	r3, r2, r3
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0011      	movs	r1, r2
 800450e:	0018      	movs	r0, r3
 8004510:	f000 f98a 	bl	8004828 <USBD_GetDescriptor>
    break;
 8004514:	e030      	b.n	8004578 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f000 fa8b 	bl	8004a38 <USBD_SetAddress>
    break;
 8004522:	e029      	b.n	8004578 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0011      	movs	r1, r2
 800452a:	0018      	movs	r0, r3
 800452c:	f000 fad4 	bl	8004ad8 <USBD_SetConfig>
    break;
 8004530:	e022      	b.n	8004578 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0011      	movs	r1, r2
 8004538:	0018      	movs	r0, r3
 800453a:	f000 fb69 	bl	8004c10 <USBD_GetConfig>
    break;
 800453e:	e01b      	b.n	8004578 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0011      	movs	r1, r2
 8004546:	0018      	movs	r0, r3
 8004548:	f000 fb9a 	bl	8004c80 <USBD_GetStatus>
    break;
 800454c:	e014      	b.n	8004578 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0011      	movs	r1, r2
 8004554:	0018      	movs	r0, r3
 8004556:	f000 fbc2 	bl	8004cde <USBD_SetFeature>
    break;
 800455a:	e00d      	b.n	8004578 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0011      	movs	r1, r2
 8004562:	0018      	movs	r0, r3
 8004564:	f000 fbda 	bl	8004d1c <USBD_ClrFeature>
    break;
 8004568:	e006      	b.n	8004578 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0011      	movs	r1, r2
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fc3d 	bl	8004df0 <USBD_CtlError>
    break;
 8004576:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 8004578:	230f      	movs	r3, #15
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b004      	add	sp, #16
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	080060a0 	.word	0x080060a0

0800458c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800458c:	b590      	push	{r4, r7, lr}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004596:	240f      	movs	r4, #15
 8004598:	193b      	adds	r3, r7, r4
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	23fe      	movs	r3, #254	; 0xfe
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d121      	bne.n	80045ee <USBD_StdItfReq+0x62>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	889b      	ldrh	r3, [r3, #4]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d815      	bhi.n	80045e0 <USBD_StdItfReq+0x54>
    {
      pdev->pClass->Setup (pdev, req); 
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	2385      	movs	r3, #133	; 0x85
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	58d3      	ldr	r3, [r2, r3]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	6839      	ldr	r1, [r7, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	0010      	movs	r0, r2
 80045c4:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	88db      	ldrh	r3, [r3, #6]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d116      	bne.n	80045fc <USBD_StdItfReq+0x70>
 80045ce:	193b      	adds	r3, r7, r4
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d112      	bne.n	80045fc <USBD_StdItfReq+0x70>
      {
         USBD_CtlSendStatus(pdev);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 fcf2 	bl	8004fc2 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80045de:	e00d      	b.n	80045fc <USBD_StdItfReq+0x70>
       USBD_CtlError(pdev , req);
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0011      	movs	r1, r2
 80045e6:	0018      	movs	r0, r3
 80045e8:	f000 fc02 	bl	8004df0 <USBD_CtlError>
    break;
 80045ec:	e006      	b.n	80045fc <USBD_StdItfReq+0x70>
    
  default:
     USBD_CtlError(pdev , req);
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0011      	movs	r1, r2
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 fbfb 	bl	8004df0 <USBD_CtlError>
    break;
 80045fa:	e000      	b.n	80045fe <USBD_StdItfReq+0x72>
    break;
 80045fc:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b005      	add	sp, #20
 8004606:	bd90      	pop	{r4, r7, pc}

08004608 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004612:	230f      	movs	r3, #15
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	889a      	ldrh	r2, [r3, #4]
 800461e:	230e      	movs	r3, #14
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	001a      	movs	r2, r3
 800462a:	2360      	movs	r3, #96	; 0x60
 800462c:	4013      	ands	r3, r2
 800462e:	2b20      	cmp	r3, #32
 8004630:	d10a      	bne.n	8004648 <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	2385      	movs	r3, #133	; 0x85
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	58d3      	ldr	r3, [r2, r3]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	0010      	movs	r0, r2
 8004642:	4798      	blx	r3
    
    return USBD_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e0eb      	b.n	8004820 <USBD_StdEPReq+0x218>
  }
  
  switch (req->bRequest) 
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d007      	beq.n	8004660 <USBD_StdEPReq+0x58>
 8004650:	dd00      	ble.n	8004654 <USBD_StdEPReq+0x4c>
 8004652:	e0e1      	b.n	8004818 <USBD_StdEPReq+0x210>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d100      	bne.n	800465a <USBD_StdEPReq+0x52>
 8004658:	e08b      	b.n	8004772 <USBD_StdEPReq+0x16a>
 800465a:	2b01      	cmp	r3, #1
 800465c:	d045      	beq.n	80046ea <USBD_StdEPReq+0xe2>
      break;
    }
    break;
    
  default:
    break;
 800465e:	e0db      	b.n	8004818 <USBD_StdEPReq+0x210>
    switch (pdev->dev_state) 
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	23fe      	movs	r3, #254	; 0xfe
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d002      	beq.n	8004672 <USBD_StdEPReq+0x6a>
 800466c:	2b03      	cmp	r3, #3
 800466e:	d011      	beq.n	8004694 <USBD_StdEPReq+0x8c>
 8004670:	e032      	b.n	80046d8 <USBD_StdEPReq+0xd0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004672:	220e      	movs	r2, #14
 8004674:	18bb      	adds	r3, r7, r2
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d034      	beq.n	80046e6 <USBD_StdEPReq+0xde>
 800467c:	18bb      	adds	r3, r7, r2
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d030      	beq.n	80046e6 <USBD_StdEPReq+0xde>
        USBD_LL_StallEP(pdev , ep_addr);
 8004684:	18bb      	adds	r3, r7, r2
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	0011      	movs	r1, r2
 800468c:	0018      	movs	r0, r3
 800468e:	f001 f9ac 	bl	80059ea <USBD_LL_StallEP>
      break;	
 8004692:	e028      	b.n	80046e6 <USBD_StdEPReq+0xde>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	885b      	ldrh	r3, [r3, #2]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10f      	bne.n	80046bc <USBD_StdEPReq+0xb4>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800469c:	220e      	movs	r2, #14
 800469e:	18bb      	adds	r3, r7, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <USBD_StdEPReq+0xb4>
 80046a6:	18bb      	adds	r3, r7, r2
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d006      	beq.n	80046bc <USBD_StdEPReq+0xb4>
          USBD_LL_StallEP(pdev , ep_addr);
 80046ae:	18bb      	adds	r3, r7, r2
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0011      	movs	r1, r2
 80046b6:	0018      	movs	r0, r3
 80046b8:	f001 f997 	bl	80059ea <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	2385      	movs	r3, #133	; 0x85
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	58d3      	ldr	r3, [r2, r3]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	0010      	movs	r0, r2
 80046cc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 fc76 	bl	8004fc2 <USBD_CtlSendStatus>
      break;
 80046d6:	e007      	b.n	80046e8 <USBD_StdEPReq+0xe0>
      USBD_CtlError(pdev , req);
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0011      	movs	r1, r2
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fb86 	bl	8004df0 <USBD_CtlError>
      break;    
 80046e4:	e000      	b.n	80046e8 <USBD_StdEPReq+0xe0>
      break;	
 80046e6:	46c0      	nop			; (mov r8, r8)
    break;
 80046e8:	e097      	b.n	800481a <USBD_StdEPReq+0x212>
    switch (pdev->dev_state) 
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	23fe      	movs	r3, #254	; 0xfe
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	5cd3      	ldrb	r3, [r2, r3]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d002      	beq.n	80046fc <USBD_StdEPReq+0xf4>
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d011      	beq.n	800471e <USBD_StdEPReq+0x116>
 80046fa:	e02f      	b.n	800475c <USBD_StdEPReq+0x154>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80046fc:	220e      	movs	r2, #14
 80046fe:	18bb      	adds	r3, r7, r2
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d031      	beq.n	800476a <USBD_StdEPReq+0x162>
 8004706:	18bb      	adds	r3, r7, r2
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b80      	cmp	r3, #128	; 0x80
 800470c:	d02d      	beq.n	800476a <USBD_StdEPReq+0x162>
        USBD_LL_StallEP(pdev , ep_addr);
 800470e:	18bb      	adds	r3, r7, r2
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0011      	movs	r1, r2
 8004716:	0018      	movs	r0, r3
 8004718:	f001 f967 	bl	80059ea <USBD_LL_StallEP>
      break;	
 800471c:	e025      	b.n	800476a <USBD_StdEPReq+0x162>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	885b      	ldrh	r3, [r3, #2]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d123      	bne.n	800476e <USBD_StdEPReq+0x166>
        if ((ep_addr & 0x7F) != 0x00) 
 8004726:	210e      	movs	r1, #14
 8004728:	187b      	adds	r3, r7, r1
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	227f      	movs	r2, #127	; 0x7f
 800472e:	4013      	ands	r3, r2
 8004730:	d00f      	beq.n	8004752 <USBD_StdEPReq+0x14a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004732:	187b      	adds	r3, r7, r1
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0011      	movs	r1, r2
 800473a:	0018      	movs	r0, r3
 800473c:	f001 f980 	bl	8005a40 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	2385      	movs	r3, #133	; 0x85
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	58d3      	ldr	r3, [r2, r3]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	0010      	movs	r0, r2
 8004750:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 fc34 	bl	8004fc2 <USBD_CtlSendStatus>
      break;
 800475a:	e008      	b.n	800476e <USBD_StdEPReq+0x166>
      USBD_CtlError(pdev , req);
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0011      	movs	r1, r2
 8004762:	0018      	movs	r0, r3
 8004764:	f000 fb44 	bl	8004df0 <USBD_CtlError>
      break;    
 8004768:	e002      	b.n	8004770 <USBD_StdEPReq+0x168>
      break;	
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	e055      	b.n	800481a <USBD_StdEPReq+0x212>
      break;
 800476e:	46c0      	nop			; (mov r8, r8)
    break;
 8004770:	e053      	b.n	800481a <USBD_StdEPReq+0x212>
    switch (pdev->dev_state) 
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	23fe      	movs	r3, #254	; 0xfe
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	5cd3      	ldrb	r3, [r2, r3]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d002      	beq.n	8004784 <USBD_StdEPReq+0x17c>
 800477e:	2b03      	cmp	r3, #3
 8004780:	d00e      	beq.n	80047a0 <USBD_StdEPReq+0x198>
 8004782:	e040      	b.n	8004806 <USBD_StdEPReq+0x1fe>
      if ((ep_addr & 0x7F) != 0x00) 
 8004784:	210e      	movs	r1, #14
 8004786:	187b      	adds	r3, r7, r1
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	227f      	movs	r2, #127	; 0x7f
 800478c:	4013      	ands	r3, r2
 800478e:	d041      	beq.n	8004814 <USBD_StdEPReq+0x20c>
        USBD_LL_StallEP(pdev , ep_addr);
 8004790:	187b      	adds	r3, r7, r1
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0011      	movs	r1, r2
 8004798:	0018      	movs	r0, r3
 800479a:	f001 f926 	bl	80059ea <USBD_LL_StallEP>
      break;	
 800479e:	e039      	b.n	8004814 <USBD_StdEPReq+0x20c>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80047a0:	220e      	movs	r2, #14
 80047a2:	18bb      	adds	r3, r7, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da09      	bge.n	80047c0 <USBD_StdEPReq+0x1b8>
 80047ac:	18bb      	adds	r3, r7, r2
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	227f      	movs	r2, #127	; 0x7f
 80047b2:	4013      	ands	r3, r2
 80047b4:	3301      	adds	r3, #1
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	18d3      	adds	r3, r2, r3
 80047bc:	3304      	adds	r3, #4
 80047be:	e009      	b.n	80047d4 <USBD_StdEPReq+0x1cc>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80047c0:	230e      	movs	r3, #14
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	227f      	movs	r2, #127	; 0x7f
 80047c8:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80047ca:	3310      	adds	r3, #16
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	18d3      	adds	r3, r2, r3
 80047d2:	3304      	adds	r3, #4
 80047d4:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80047d6:	230e      	movs	r3, #14
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	0011      	movs	r1, r2
 80047e0:	0018      	movs	r0, r3
 80047e2:	f001 f958 	bl	8005a96 <USBD_LL_IsStallEP>
 80047e6:	1e03      	subs	r3, r0, #0
 80047e8:	d003      	beq.n	80047f2 <USBD_StdEPReq+0x1ea>
        pep->status = 0x0001;     
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e002      	b.n	80047f8 <USBD_StdEPReq+0x1f0>
        pep->status = 0x0000;  
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80047f8:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 fb75 	bl	8004eee <USBD_CtlSendData>
      break;
 8004804:	e007      	b.n	8004816 <USBD_StdEPReq+0x20e>
      USBD_CtlError(pdev , req);
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0011      	movs	r1, r2
 800480c:	0018      	movs	r0, r3
 800480e:	f000 faef 	bl	8004df0 <USBD_CtlError>
      break;
 8004812:	e000      	b.n	8004816 <USBD_StdEPReq+0x20e>
      break;	
 8004814:	46c0      	nop			; (mov r8, r8)
    break;
 8004816:	e000      	b.n	800481a <USBD_StdEPReq+0x212>
    break;
 8004818:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 800481a:	230f      	movs	r3, #15
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	781b      	ldrb	r3, [r3, #0]
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}

08004828 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	885b      	ldrh	r3, [r3, #2]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b07      	cmp	r3, #7
 800483c:	d900      	bls.n	8004840 <USBD_GetDescriptor+0x18>
 800483e:	e0ce      	b.n	80049de <USBD_GetDescriptor+0x1b6>
 8004840:	009a      	lsls	r2, r3, #2
 8004842:	4b7b      	ldr	r3, [pc, #492]	; (8004a30 <USBD_GetDescriptor+0x208>)
 8004844:	18d3      	adds	r3, r2, r3
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	2384      	movs	r3, #132	; 0x84
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	58d3      	ldr	r3, [r2, r3]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	7c12      	ldrb	r2, [r2, #16]
 8004858:	210a      	movs	r1, #10
 800485a:	1879      	adds	r1, r7, r1
 800485c:	0010      	movs	r0, r2
 800485e:	4798      	blx	r3
 8004860:	0003      	movs	r3, r0
 8004862:	60fb      	str	r3, [r7, #12]
    break;
 8004864:	e0c2      	b.n	80049ec <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	7c1b      	ldrb	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	2385      	movs	r3, #133	; 0x85
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	58d3      	ldr	r3, [r2, r3]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	220a      	movs	r2, #10
 800487a:	18ba      	adds	r2, r7, r2
 800487c:	0010      	movs	r0, r2
 800487e:	4798      	blx	r3
 8004880:	0003      	movs	r3, r0
 8004882:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	2202      	movs	r2, #2
 800488a:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800488c:	e0ae      	b.n	80049ec <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	2385      	movs	r3, #133	; 0x85
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	58d3      	ldr	r3, [r2, r3]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	220a      	movs	r2, #10
 800489a:	18ba      	adds	r2, r7, r2
 800489c:	0010      	movs	r0, r2
 800489e:	4798      	blx	r3
 80048a0:	0003      	movs	r3, r0
 80048a2:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	2202      	movs	r2, #2
 80048aa:	701a      	strb	r2, [r3, #0]
    break;
 80048ac:	e09e      	b.n	80049ec <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	885b      	ldrh	r3, [r3, #2]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d858      	bhi.n	800496a <USBD_GetDescriptor+0x142>
 80048b8:	009a      	lsls	r2, r3, #2
 80048ba:	4b5e      	ldr	r3, [pc, #376]	; (8004a34 <USBD_GetDescriptor+0x20c>)
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	2384      	movs	r3, #132	; 0x84
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	58d3      	ldr	r3, [r2, r3]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	7c12      	ldrb	r2, [r2, #16]
 80048d0:	210a      	movs	r1, #10
 80048d2:	1879      	adds	r1, r7, r1
 80048d4:	0010      	movs	r0, r2
 80048d6:	4798      	blx	r3
 80048d8:	0003      	movs	r3, r0
 80048da:	60fb      	str	r3, [r7, #12]
      break;
 80048dc:	e04c      	b.n	8004978 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	2384      	movs	r3, #132	; 0x84
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	58d3      	ldr	r3, [r2, r3]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	7c12      	ldrb	r2, [r2, #16]
 80048ec:	210a      	movs	r1, #10
 80048ee:	1879      	adds	r1, r7, r1
 80048f0:	0010      	movs	r0, r2
 80048f2:	4798      	blx	r3
 80048f4:	0003      	movs	r3, r0
 80048f6:	60fb      	str	r3, [r7, #12]
      break;
 80048f8:	e03e      	b.n	8004978 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	2384      	movs	r3, #132	; 0x84
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	58d3      	ldr	r3, [r2, r3]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	7c12      	ldrb	r2, [r2, #16]
 8004908:	210a      	movs	r1, #10
 800490a:	1879      	adds	r1, r7, r1
 800490c:	0010      	movs	r0, r2
 800490e:	4798      	blx	r3
 8004910:	0003      	movs	r3, r0
 8004912:	60fb      	str	r3, [r7, #12]
      break;
 8004914:	e030      	b.n	8004978 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	2384      	movs	r3, #132	; 0x84
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	58d3      	ldr	r3, [r2, r3]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	7c12      	ldrb	r2, [r2, #16]
 8004924:	210a      	movs	r1, #10
 8004926:	1879      	adds	r1, r7, r1
 8004928:	0010      	movs	r0, r2
 800492a:	4798      	blx	r3
 800492c:	0003      	movs	r3, r0
 800492e:	60fb      	str	r3, [r7, #12]
      break;
 8004930:	e022      	b.n	8004978 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	2384      	movs	r3, #132	; 0x84
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	58d3      	ldr	r3, [r2, r3]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	7c12      	ldrb	r2, [r2, #16]
 8004940:	210a      	movs	r1, #10
 8004942:	1879      	adds	r1, r7, r1
 8004944:	0010      	movs	r0, r2
 8004946:	4798      	blx	r3
 8004948:	0003      	movs	r3, r0
 800494a:	60fb      	str	r3, [r7, #12]
      break;
 800494c:	e014      	b.n	8004978 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	2384      	movs	r3, #132	; 0x84
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	58d3      	ldr	r3, [r2, r3]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	7c12      	ldrb	r2, [r2, #16]
 800495c:	210a      	movs	r1, #10
 800495e:	1879      	adds	r1, r7, r1
 8004960:	0010      	movs	r0, r2
 8004962:	4798      	blx	r3
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]
      break;
 8004968:	e006      	b.n	8004978 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0011      	movs	r1, r2
 8004970:	0018      	movs	r0, r3
 8004972:	f000 fa3d 	bl	8004df0 <USBD_CtlError>
      return;
 8004976:	e058      	b.n	8004a2a <USBD_GetDescriptor+0x202>
#endif   
    }
    break;
 8004978:	e038      	b.n	80049ec <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7c1b      	ldrb	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	2385      	movs	r3, #133	; 0x85
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	58d3      	ldr	r3, [r2, r3]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	220a      	movs	r2, #10
 800498e:	18ba      	adds	r2, r7, r2
 8004990:	0010      	movs	r0, r2
 8004992:	4798      	blx	r3
 8004994:	0003      	movs	r3, r0
 8004996:	60fb      	str	r3, [r7, #12]
      break;
 8004998:	e028      	b.n	80049ec <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0011      	movs	r1, r2
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 fa25 	bl	8004df0 <USBD_CtlError>
      return;
 80049a6:	e040      	b.n	8004a2a <USBD_GetDescriptor+0x202>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	7c1b      	ldrb	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10f      	bne.n	80049d0 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	2385      	movs	r3, #133	; 0x85
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	58d3      	ldr	r3, [r2, r3]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	220a      	movs	r2, #10
 80049bc:	18ba      	adds	r2, r7, r2
 80049be:	0010      	movs	r0, r2
 80049c0:	4798      	blx	r3
 80049c2:	0003      	movs	r3, r0
 80049c4:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3301      	adds	r3, #1
 80049ca:	2207      	movs	r2, #7
 80049cc:	701a      	strb	r2, [r3, #0]
      break; 
 80049ce:	e00d      	b.n	80049ec <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0011      	movs	r1, r2
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 fa0a 	bl	8004df0 <USBD_CtlError>
      return;
 80049dc:	e025      	b.n	8004a2a <USBD_GetDescriptor+0x202>
    }

  default: 
     USBD_CtlError(pdev , req);
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0011      	movs	r1, r2
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 fa03 	bl	8004df0 <USBD_CtlError>
    return;
 80049ea:	e01e      	b.n	8004a2a <USBD_GetDescriptor+0x202>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80049ec:	210a      	movs	r1, #10
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d019      	beq.n	8004a2a <USBD_GetDescriptor+0x202>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	88db      	ldrh	r3, [r3, #6]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d015      	beq.n	8004a2a <USBD_GetDescriptor+0x202>
  {
    
    len = MIN(len , req->wLength);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	88da      	ldrh	r2, [r3, #6]
 8004a02:	187b      	adds	r3, r7, r1
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	1c18      	adds	r0, r3, #0
 8004a08:	1c11      	adds	r1, r2, #0
 8004a0a:	b28a      	uxth	r2, r1
 8004a0c:	b283      	uxth	r3, r0
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d900      	bls.n	8004a14 <USBD_GetDescriptor+0x1ec>
 8004a12:	1c01      	adds	r1, r0, #0
 8004a14:	b28a      	uxth	r2, r1
 8004a16:	210a      	movs	r1, #10
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fa62 	bl	8004eee <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	080060c8 	.word	0x080060c8
 8004a34:	080060e8 	.word	0x080060e8

08004a38 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	889b      	ldrh	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d13a      	bne.n	8004ac0 <USBD_SetAddress+0x88>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	88db      	ldrh	r3, [r3, #6]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d136      	bne.n	8004ac0 <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	885b      	ldrh	r3, [r3, #2]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	230f      	movs	r3, #15
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	217f      	movs	r1, #127	; 0x7f
 8004a5e:	400a      	ands	r2, r1
 8004a60:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	23fe      	movs	r3, #254	; 0xfe
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	5cd3      	ldrb	r3, [r2, r3]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d106      	bne.n	8004a7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0011      	movs	r1, r2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 f9bb 	bl	8004df0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004a7a:	e028      	b.n	8004ace <USBD_SetAddress+0x96>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	240f      	movs	r4, #15
 8004a80:	1939      	adds	r1, r7, r4
 8004a82:	23ff      	movs	r3, #255	; 0xff
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	7809      	ldrb	r1, [r1, #0]
 8004a88:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0011      	movs	r1, r2
 8004a92:	0018      	movs	r0, r3
 8004a94:	f001 f830 	bl	8005af8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f000 fa91 	bl	8004fc2 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004aa0:	193b      	adds	r3, r7, r4
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	23fe      	movs	r3, #254	; 0xfe
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2102      	movs	r1, #2
 8004ab0:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004ab2:	e00c      	b.n	8004ace <USBD_SetAddress+0x96>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	23fe      	movs	r3, #254	; 0xfe
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	2101      	movs	r1, #1
 8004abc:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004abe:	e006      	b.n	8004ace <USBD_SetAddress+0x96>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0011      	movs	r1, r2
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 f992 	bl	8004df0 <USBD_CtlError>
  } 
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b005      	add	sp, #20
 8004ad4:	bd90      	pop	{r4, r7, pc}
	...

08004ad8 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	885b      	ldrh	r3, [r3, #2]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	4b48      	ldr	r3, [pc, #288]	; (8004c0c <USBD_SetConfig+0x134>)
 8004aea:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004aec:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <USBD_SetConfig+0x134>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d906      	bls.n	8004b02 <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0011      	movs	r1, r2
 8004afa:	0018      	movs	r0, r3
 8004afc:	f000 f978 	bl	8004df0 <USBD_CtlError>
 8004b00:	e081      	b.n	8004c06 <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	23fe      	movs	r3, #254	; 0xfe
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	5cd3      	ldrb	r3, [r2, r3]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d002      	beq.n	8004b14 <USBD_SetConfig+0x3c>
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d029      	beq.n	8004b66 <USBD_SetConfig+0x8e>
 8004b12:	e071      	b.n	8004bf8 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004b14:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <USBD_SetConfig+0x134>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01f      	beq.n	8004b5c <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <USBD_SetConfig+0x134>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	001a      	movs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	23fe      	movs	r3, #254	; 0xfe
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	2103      	movs	r1, #3
 8004b2e:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <USBD_SetConfig+0x134>)
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0011      	movs	r1, r2
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff faa3 	bl	8004084 <USBD_SetClassConfig>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d106      	bne.n	8004b52 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0011      	movs	r1, r2
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f000 f950 	bl	8004df0 <USBD_CtlError>
          return;
 8004b50:	e059      	b.n	8004c06 <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 fa34 	bl	8004fc2 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004b5a:	e054      	b.n	8004c06 <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 fa2f 	bl	8004fc2 <USBD_CtlSendStatus>
      break;
 8004b64:	e04f      	b.n	8004c06 <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <USBD_SetConfig+0x134>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d115      	bne.n	8004b9a <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	23fe      	movs	r3, #254	; 0xfe
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2102      	movs	r1, #2
 8004b76:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 8004b78:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <USBD_SetConfig+0x134>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <USBD_SetConfig+0x134>)
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0011      	movs	r1, r2
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7ff faa1 	bl	80040d2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	0018      	movs	r0, r3
 8004b94:	f000 fa15 	bl	8004fc2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004b98:	e035      	b.n	8004c06 <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <USBD_SetConfig+0x134>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d022      	beq.n	8004bee <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7ff fa8d 	bl	80040d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <USBD_SetConfig+0x134>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	001a      	movs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <USBD_SetConfig+0x134>)
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7ff fa5a 	bl	8004084 <USBD_SetClassConfig>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d106      	bne.n	8004be4 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f907 	bl	8004df0 <USBD_CtlError>
          return;
 8004be2:	e010      	b.n	8004c06 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 f9eb 	bl	8004fc2 <USBD_CtlSendStatus>
      break;
 8004bec:	e00b      	b.n	8004c06 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f9e6 	bl	8004fc2 <USBD_CtlSendStatus>
      break;
 8004bf6:	e006      	b.n	8004c06 <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0011      	movs	r1, r2
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 f8f6 	bl	8004df0 <USBD_CtlError>
      break;
 8004c04:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b002      	add	sp, #8
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000191 	.word	0x20000191

08004c10 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	88db      	ldrh	r3, [r3, #6]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d006      	beq.n	8004c30 <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f8e1 	bl	8004df0 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004c2e:	e023      	b.n	8004c78 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	23fe      	movs	r3, #254	; 0xfe
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d002      	beq.n	8004c42 <USBD_GetConfig+0x32>
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d00c      	beq.n	8004c5a <USBD_GetConfig+0x4a>
 8004c40:	e013      	b.n	8004c6a <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	0018      	movs	r0, r3
 8004c54:	f000 f94b 	bl	8004eee <USBD_CtlSendData>
      break;
 8004c58:	e00e      	b.n	8004c78 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 f943 	bl	8004eee <USBD_CtlSendData>
      break;
 8004c68:	e006      	b.n	8004c78 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0011      	movs	r1, r2
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f8bd 	bl	8004df0 <USBD_CtlError>
      break;
 8004c76:	46c0      	nop			; (mov r8, r8)
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	23fe      	movs	r3, #254	; 0xfe
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	5cd3      	ldrb	r3, [r2, r3]
 8004c92:	3b02      	subs	r3, #2
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d817      	bhi.n	8004cc8 <USBD_GetStatus+0x48>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	2381      	movs	r3, #129	; 0x81
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	58d3      	ldr	r3, [r2, r3]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f000 f914 	bl	8004eee <USBD_CtlSendData>
                      2);
    break;
 8004cc6:	e006      	b.n	8004cd6 <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	0011      	movs	r1, r2
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 f88e 	bl	8004df0 <USBD_CtlError>
    break;
 8004cd4:	46c0      	nop			; (mov r8, r8)
  }
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b002      	add	sp, #8
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	885b      	ldrh	r3, [r3, #2]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d111      	bne.n	8004d14 <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	2381      	movs	r3, #129	; 0x81
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	2385      	movs	r3, #133	; 0x85
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	58d3      	ldr	r3, [r2, r3]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	0010      	movs	r0, r2
 8004d0a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f000 f957 	bl	8004fc2 <USBD_CtlSendStatus>
  }

}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	23fe      	movs	r3, #254	; 0xfe
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	5cd3      	ldrb	r3, [r2, r3]
 8004d2e:	3b02      	subs	r3, #2
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d816      	bhi.n	8004d62 <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	885b      	ldrh	r3, [r3, #2]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	2381      	movs	r3, #129	; 0x81
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	2100      	movs	r1, #0
 8004d44:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	2385      	movs	r3, #133	; 0x85
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	58d3      	ldr	r3, [r2, r3]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	0010      	movs	r0, r2
 8004d56:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 f931 	bl	8004fc2 <USBD_CtlSendStatus>
    }
    break;
 8004d60:	e006      	b.n	8004d70 <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	0011      	movs	r1, r2
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 f841 	bl	8004df0 <USBD_CtlError>
    break;
 8004d6e:	e000      	b.n	8004d72 <USBD_ClrFeature+0x56>
    break;
 8004d70:	46c0      	nop			; (mov r8, r8)
  }
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b002      	add	sp, #8
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785a      	ldrb	r2, [r3, #1]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	3302      	adds	r3, #2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	3303      	adds	r3, #3
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	3304      	adds	r3, #4
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	3305      	adds	r3, #5
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	18d3      	adds	r3, r2, r3
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	3306      	adds	r3, #6
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	3307      	adds	r3, #7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	80da      	strh	r2, [r3, #6]

}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b002      	add	sp, #8
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f000 fdf3 	bl	80059ea <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2100      	movs	r1, #0
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f000 fdee 	bl	80059ea <USBD_LL_StallEP>
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004e16:	b590      	push	{r4, r7, lr}
 8004e18:	b087      	sub	sp, #28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8004e22:	2417      	movs	r4, #23
 8004e24:	193b      	adds	r3, r7, r4
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d03d      	beq.n	8004eac <USBD_GetString+0x96>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f83e 	bl	8004eb4 <USBD_GetLen>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	18db      	adds	r3, r3, r3
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8819      	ldrh	r1, [r3, #0]
 8004e4a:	193b      	adds	r3, r7, r4
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	193a      	adds	r2, r7, r4
 8004e50:	1c58      	adds	r0, r3, #1
 8004e52:	7010      	strb	r0, [r2, #0]
 8004e54:	001a      	movs	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	b2ca      	uxtb	r2, r1
 8004e5c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004e5e:	193b      	adds	r3, r7, r4
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	193a      	adds	r2, r7, r4
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	7011      	strb	r1, [r2, #0]
 8004e68:	001a      	movs	r2, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	189b      	adds	r3, r3, r2
 8004e6e:	2203      	movs	r2, #3
 8004e70:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8004e72:	e017      	b.n	8004ea4 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	60fa      	str	r2, [r7, #12]
 8004e7a:	2417      	movs	r4, #23
 8004e7c:	193a      	adds	r2, r7, r4
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	1939      	adds	r1, r7, r4
 8004e82:	1c50      	adds	r0, r2, #1
 8004e84:	7008      	strb	r0, [r1, #0]
 8004e86:	0011      	movs	r1, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	1852      	adds	r2, r2, r1
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8004e90:	193b      	adds	r3, r7, r4
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	193a      	adds	r2, r7, r4
 8004e96:	1c59      	adds	r1, r3, #1
 8004e98:	7011      	strb	r1, [r2, #0]
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e3      	bne.n	8004e74 <USBD_GetString+0x5e>
    }
  } 
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b007      	add	sp, #28
 8004eb2:	bd90      	pop	{r4, r7, pc}

08004eb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8004ebc:	230f      	movs	r3, #15
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 8004ec4:	e008      	b.n	8004ed8 <USBD_GetLen+0x24>
    {
        len++;
 8004ec6:	210f      	movs	r1, #15
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	3201      	adds	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
        buf++;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f2      	bne.n	8004ec6 <USBD_GetLen+0x12>
    }

    return len;
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	18fb      	adds	r3, r7, r3
 8004ee4:	781b      	ldrb	r3, [r3, #0]
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bd80      	pop	{r7, pc}

08004eee <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	1dbb      	adds	r3, r7, #6
 8004efa:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	23fa      	movs	r3, #250	; 0xfa
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	2102      	movs	r1, #2
 8004f04:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8004f06:	1dbb      	adds	r3, r7, #6
 8004f08:	881a      	ldrh	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8004f0e:	1dbb      	adds	r3, r7, #6
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004f16:	1dbb      	adds	r3, r7, #6
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	2100      	movs	r1, #0
 8004f20:	f000 fe15 	bl	8005b4e <USBD_LL_Transmit>
  
  return USBD_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	1dbb      	adds	r3, r7, #6
 8004f3a:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004f3c:	1dbb      	adds	r3, r7, #6
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	2100      	movs	r1, #0
 8004f46:	f000 fe02 	bl	8005b4e <USBD_LL_Transmit>
  
  return USBD_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b004      	add	sp, #16
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	1dbb      	adds	r3, r7, #6
 8004f60:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	23fa      	movs	r3, #250	; 0xfa
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	2103      	movs	r1, #3
 8004f6a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8004f6c:	1dbb      	adds	r3, r7, #6
 8004f6e:	8819      	ldrh	r1, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	2384      	movs	r3, #132	; 0x84
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8004f78:	1dbb      	adds	r3, r7, #6
 8004f7a:	8819      	ldrh	r1, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	2386      	movs	r3, #134	; 0x86
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	50d1      	str	r1, [r2, r3]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004f84:	1dbb      	adds	r3, r7, #6
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	f000 fe15 	bl	8005bbc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b004      	add	sp, #16
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	1dbb      	adds	r3, r7, #6
 8004fa8:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 8004faa:	1dbb      	adds	r3, r7, #6
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f000 fe02 	bl	8005bbc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	23fa      	movs	r3, #250	; 0xfa
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f000 fdb7 	bl	8005b4e <USBD_LL_Transmit>
  
  return USBD_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	23fa      	movs	r3, #250	; 0xfa
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2105      	movs	r1, #5
 8004ffa:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	2300      	movs	r3, #0
 8005000:	2200      	movs	r2, #0
 8005002:	2100      	movs	r1, #0
 8005004:	f000 fdda 	bl	8005bbc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005018:	f7fb f902 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800501c:	f000 f816 	bl	800504c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005020:	f000 f8e2 	bl	80051e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005024:	f000 f872 	bl	800510c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8005028:	f000 fa88 	bl	800553c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800502c:	f000 f8ac 	bl	8005188 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8005030:	23fa      	movs	r3, #250	; 0xfa
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	0018      	movs	r0, r3
 8005036:	f7fb f939 	bl	80002ac <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800503a:	4b03      	ldr	r3, [pc, #12]	; (8005048 <main+0x34>)
 800503c:	2102      	movs	r1, #2
 800503e:	0018      	movs	r0, r3
 8005040:	f7fb fbbd 	bl	80007be <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8005044:	e7f4      	b.n	8005030 <main+0x1c>
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	48000400 	.word	0x48000400

0800504c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b097      	sub	sp, #92	; 0x5c
 8005050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005052:	2428      	movs	r4, #40	; 0x28
 8005054:	193b      	adds	r3, r7, r4
 8005056:	0018      	movs	r0, r3
 8005058:	2330      	movs	r3, #48	; 0x30
 800505a:	001a      	movs	r2, r3
 800505c:	2100      	movs	r1, #0
 800505e:	f000 ffe1 	bl	8006024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005062:	2318      	movs	r3, #24
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	0018      	movs	r0, r3
 8005068:	2310      	movs	r3, #16
 800506a:	001a      	movs	r2, r3
 800506c:	2100      	movs	r1, #0
 800506e:	f000 ffd9 	bl	8006024 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	0018      	movs	r0, r3
 8005076:	2314      	movs	r3, #20
 8005078:	001a      	movs	r2, r3
 800507a:	2100      	movs	r1, #0
 800507c:	f000 ffd2 	bl	8006024 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005080:	0021      	movs	r1, r4
 8005082:	187b      	adds	r3, r7, r1
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005088:	187b      	adds	r3, r7, r1
 800508a:	2201      	movs	r2, #1
 800508c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800508e:	187b      	adds	r3, r7, r1
 8005090:	2202      	movs	r2, #2
 8005092:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005094:	187b      	adds	r3, r7, r1
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	0252      	lsls	r2, r2, #9
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800509c:	187b      	adds	r3, r7, r1
 800509e:	2280      	movs	r2, #128	; 0x80
 80050a0:	0352      	lsls	r2, r2, #13
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	2200      	movs	r2, #0
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	0018      	movs	r0, r3
 80050ae:	f7fd fcbd 	bl	8002a2c <HAL_RCC_OscConfig>
 80050b2:	1e03      	subs	r3, r0, #0
 80050b4:	d001      	beq.n	80050ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80050b6:	f000 f907 	bl	80052c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050ba:	2118      	movs	r1, #24
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	2207      	movs	r2, #7
 80050c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050c2:	187b      	adds	r3, r7, r1
 80050c4:	2202      	movs	r2, #2
 80050c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	2200      	movs	r2, #0
 80050cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050ce:	187b      	adds	r3, r7, r1
 80050d0:	2200      	movs	r2, #0
 80050d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	2101      	movs	r1, #1
 80050d8:	0018      	movs	r0, r3
 80050da:	f7fd ff9d 	bl	8003018 <HAL_RCC_ClockConfig>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d001      	beq.n	80050e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80050e2:	f000 f8f1 	bl	80052c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80050e6:	1d3b      	adds	r3, r7, #4
 80050e8:	2280      	movs	r2, #128	; 0x80
 80050ea:	0292      	lsls	r2, r2, #10
 80050ec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7fe f8fc 	bl	80032f4 <HAL_RCCEx_PeriphCLKConfig>
 80050fc:	1e03      	subs	r3, r0, #0
 80050fe:	d001      	beq.n	8005104 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8005100:	f000 f8e2 	bl	80052c8 <Error_Handler>
  }
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b017      	add	sp, #92	; 0x5c
 800510a:	bd90      	pop	{r4, r7, pc}

0800510c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005110:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <MX_SPI1_Init+0x74>)
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <MX_SPI1_Init+0x78>)
 8005114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <MX_SPI1_Init+0x74>)
 8005118:	2282      	movs	r2, #130	; 0x82
 800511a:	0052      	lsls	r2, r2, #1
 800511c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <MX_SPI1_Init+0x74>)
 8005120:	2200      	movs	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <MX_SPI1_Init+0x74>)
 8005126:	22e0      	movs	r2, #224	; 0xe0
 8005128:	00d2      	lsls	r2, r2, #3
 800512a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <MX_SPI1_Init+0x74>)
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005132:	4b13      	ldr	r3, [pc, #76]	; (8005180 <MX_SPI1_Init+0x74>)
 8005134:	2200      	movs	r2, #0
 8005136:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <MX_SPI1_Init+0x74>)
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	0092      	lsls	r2, r2, #2
 800513e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <MX_SPI1_Init+0x74>)
 8005142:	2208      	movs	r2, #8
 8005144:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <MX_SPI1_Init+0x74>)
 8005148:	2200      	movs	r2, #0
 800514a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <MX_SPI1_Init+0x74>)
 800514e:	2200      	movs	r2, #0
 8005150:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <MX_SPI1_Init+0x74>)
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <MX_SPI1_Init+0x74>)
 800515a:	2207      	movs	r2, #7
 800515c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800515e:	4b08      	ldr	r3, [pc, #32]	; (8005180 <MX_SPI1_Init+0x74>)
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <MX_SPI1_Init+0x74>)
 8005166:	2208      	movs	r2, #8
 8005168:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <MX_SPI1_Init+0x74>)
 800516c:	0018      	movs	r0, r3
 800516e:	f7fe f99f 	bl	80034b0 <HAL_SPI_Init>
 8005172:	1e03      	subs	r3, r0, #0
 8005174:	d001      	beq.n	800517a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005176:	f000 f8a7 	bl	80052c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	200003b8 	.word	0x200003b8
 8005184:	40013000 	.word	0x40013000

08005188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <MX_USART2_UART_Init+0x5c>)
 8005190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 8005194:	22e1      	movs	r2, #225	; 0xe1
 8005196:	0252      	lsls	r2, r2, #9
 8005198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 800519c:	2200      	movs	r2, #0
 800519e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80051a6:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051ae:	220c      	movs	r2, #12
 80051b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051b8:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <MX_USART2_UART_Init+0x58>)
 80051cc:	0018      	movs	r0, r3
 80051ce:	f7fe fa09 	bl	80035e4 <HAL_UART_Init>
 80051d2:	1e03      	subs	r3, r0, #0
 80051d4:	d001      	beq.n	80051da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80051d6:	f000 f877 	bl	80052c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000041c 	.word	0x2000041c
 80051e4:	40004400 	.word	0x40004400

080051e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b089      	sub	sp, #36	; 0x24
 80051ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ee:	240c      	movs	r4, #12
 80051f0:	193b      	adds	r3, r7, r4
 80051f2:	0018      	movs	r0, r3
 80051f4:	2314      	movs	r3, #20
 80051f6:	001a      	movs	r2, r3
 80051f8:	2100      	movs	r1, #0
 80051fa:	f000 ff13 	bl	8006024 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80051fe:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <MX_GPIO_Init+0xd8>)
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <MX_GPIO_Init+0xd8>)
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	03c9      	lsls	r1, r1, #15
 8005208:	430a      	orrs	r2, r1
 800520a:	615a      	str	r2, [r3, #20]
 800520c:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <MX_GPIO_Init+0xd8>)
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	03db      	lsls	r3, r3, #15
 8005214:	4013      	ands	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800521a:	4b29      	ldr	r3, [pc, #164]	; (80052c0 <MX_GPIO_Init+0xd8>)
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <MX_GPIO_Init+0xd8>)
 8005220:	2180      	movs	r1, #128	; 0x80
 8005222:	0289      	lsls	r1, r1, #10
 8005224:	430a      	orrs	r2, r1
 8005226:	615a      	str	r2, [r3, #20]
 8005228:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <MX_GPIO_Init+0xd8>)
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	4013      	ands	r3, r2
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005236:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <MX_GPIO_Init+0xd8>)
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <MX_GPIO_Init+0xd8>)
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	02c9      	lsls	r1, r1, #11
 8005240:	430a      	orrs	r2, r1
 8005242:	615a      	str	r2, [r3, #20]
 8005244:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <MX_GPIO_Init+0xd8>)
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	02db      	lsls	r3, r3, #11
 800524c:	4013      	ands	r3, r2
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NCS1_Pin|NCS2_Pin, GPIO_PIN_SET);
 8005252:	2390      	movs	r3, #144	; 0x90
 8005254:	05db      	lsls	r3, r3, #23
 8005256:	2201      	movs	r2, #1
 8005258:	2103      	movs	r1, #3
 800525a:	0018      	movs	r0, r3
 800525c:	f7fb fa92 	bl	8000784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8005260:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <MX_GPIO_Init+0xdc>)
 8005262:	2201      	movs	r2, #1
 8005264:	2102      	movs	r1, #2
 8005266:	0018      	movs	r0, r3
 8005268:	f7fb fa8c 	bl	8000784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS1_Pin NCS2_Pin */
  GPIO_InitStruct.Pin = NCS1_Pin|NCS2_Pin;
 800526c:	193b      	adds	r3, r7, r4
 800526e:	2203      	movs	r2, #3
 8005270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005272:	193b      	adds	r3, r7, r4
 8005274:	2201      	movs	r2, #1
 8005276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	193b      	adds	r3, r7, r4
 800527a:	2200      	movs	r2, #0
 800527c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800527e:	193b      	adds	r3, r7, r4
 8005280:	2203      	movs	r2, #3
 8005282:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005284:	193a      	adds	r2, r7, r4
 8005286:	2390      	movs	r3, #144	; 0x90
 8005288:	05db      	lsls	r3, r3, #23
 800528a:	0011      	movs	r1, r2
 800528c:	0018      	movs	r0, r3
 800528e:	f7fb f905 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005292:	0021      	movs	r1, r4
 8005294:	187b      	adds	r3, r7, r1
 8005296:	2202      	movs	r2, #2
 8005298:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800529a:	187b      	adds	r3, r7, r1
 800529c:	2211      	movs	r2, #17
 800529e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a0:	187b      	adds	r3, r7, r1
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	2203      	movs	r2, #3
 80052aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <MX_GPIO_Init+0xdc>)
 80052b0:	0019      	movs	r1, r3
 80052b2:	0010      	movs	r0, r2
 80052b4:	f7fb f8f2 	bl	800049c <HAL_GPIO_Init>

}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b009      	add	sp, #36	; 0x24
 80052be:	bd90      	pop	{r4, r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	48000400 	.word	0x48000400

080052c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <HAL_MspInit+0x50>)
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_MspInit+0x50>)
 80052e0:	2101      	movs	r1, #1
 80052e2:	430a      	orrs	r2, r1
 80052e4:	619a      	str	r2, [r3, #24]
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_MspInit+0x50>)
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2201      	movs	r2, #1
 80052ec:	4013      	ands	r3, r2
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_MspInit+0x50>)
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_MspInit+0x50>)
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	0549      	lsls	r1, r1, #21
 80052fc:	430a      	orrs	r2, r1
 80052fe:	61da      	str	r2, [r3, #28]
 8005300:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_MspInit+0x50>)
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	055b      	lsls	r3, r3, #21
 8005308:	4013      	ands	r3, r2
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_MspInit+0x54>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_MspInit+0x54>)
 8005314:	2110      	movs	r1, #16
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b002      	add	sp, #8
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	40021000 	.word	0x40021000
 8005328:	40010000 	.word	0x40010000

0800532c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b08b      	sub	sp, #44	; 0x2c
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005334:	2414      	movs	r4, #20
 8005336:	193b      	adds	r3, r7, r4
 8005338:	0018      	movs	r0, r3
 800533a:	2314      	movs	r3, #20
 800533c:	001a      	movs	r2, r3
 800533e:	2100      	movs	r1, #0
 8005340:	f000 fe70 	bl	8006024 <memset>
  if(hspi->Instance==SPI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <HAL_SPI_MspInit+0x90>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d132      	bne.n	80053b4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_SPI_MspInit+0x94>)
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_SPI_MspInit+0x94>)
 8005354:	2180      	movs	r1, #128	; 0x80
 8005356:	0149      	lsls	r1, r1, #5
 8005358:	430a      	orrs	r2, r1
 800535a:	619a      	str	r2, [r3, #24]
 800535c:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <HAL_SPI_MspInit+0x94>)
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	015b      	lsls	r3, r3, #5
 8005364:	4013      	ands	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_SPI_MspInit+0x94>)
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <HAL_SPI_MspInit+0x94>)
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	0289      	lsls	r1, r1, #10
 8005374:	430a      	orrs	r2, r1
 8005376:	615a      	str	r2, [r3, #20]
 8005378:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_SPI_MspInit+0x94>)
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	4013      	ands	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005386:	0021      	movs	r1, r4
 8005388:	187b      	adds	r3, r7, r1
 800538a:	22e0      	movs	r2, #224	; 0xe0
 800538c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538e:	187b      	adds	r3, r7, r1
 8005390:	2202      	movs	r2, #2
 8005392:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005394:	187b      	adds	r3, r7, r1
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800539a:	187b      	adds	r3, r7, r1
 800539c:	2203      	movs	r2, #3
 800539e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80053a0:	187b      	adds	r3, r7, r1
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	187a      	adds	r2, r7, r1
 80053a8:	2390      	movs	r3, #144	; 0x90
 80053aa:	05db      	lsls	r3, r3, #23
 80053ac:	0011      	movs	r1, r2
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7fb f874 	bl	800049c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b00b      	add	sp, #44	; 0x2c
 80053ba:	bd90      	pop	{r4, r7, pc}
 80053bc:	40013000 	.word	0x40013000
 80053c0:	40021000 	.word	0x40021000

080053c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b08b      	sub	sp, #44	; 0x2c
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053cc:	2414      	movs	r4, #20
 80053ce:	193b      	adds	r3, r7, r4
 80053d0:	0018      	movs	r0, r3
 80053d2:	2314      	movs	r3, #20
 80053d4:	001a      	movs	r2, r3
 80053d6:	2100      	movs	r1, #0
 80053d8:	f000 fe24 	bl	8006024 <memset>
  if(huart->Instance==USART2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_UART_MspInit+0x90>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d132      	bne.n	800544c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053e6:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <HAL_UART_MspInit+0x94>)
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_UART_MspInit+0x94>)
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	0289      	lsls	r1, r1, #10
 80053f0:	430a      	orrs	r2, r1
 80053f2:	61da      	str	r2, [r3, #28]
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_UART_MspInit+0x94>)
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	4013      	ands	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <HAL_UART_MspInit+0x94>)
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <HAL_UART_MspInit+0x94>)
 8005408:	2180      	movs	r1, #128	; 0x80
 800540a:	0289      	lsls	r1, r1, #10
 800540c:	430a      	orrs	r2, r1
 800540e:	615a      	str	r2, [r3, #20]
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <HAL_UART_MspInit+0x94>)
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	4013      	ands	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800541e:	0021      	movs	r1, r4
 8005420:	187b      	adds	r3, r7, r1
 8005422:	221c      	movs	r2, #28
 8005424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005426:	187b      	adds	r3, r7, r1
 8005428:	2202      	movs	r2, #2
 800542a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542c:	187b      	adds	r3, r7, r1
 800542e:	2200      	movs	r2, #0
 8005430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005432:	187b      	adds	r3, r7, r1
 8005434:	2203      	movs	r2, #3
 8005436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005438:	187b      	adds	r3, r7, r1
 800543a:	2201      	movs	r2, #1
 800543c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800543e:	187a      	adds	r2, r7, r1
 8005440:	2390      	movs	r3, #144	; 0x90
 8005442:	05db      	lsls	r3, r3, #23
 8005444:	0011      	movs	r1, r2
 8005446:	0018      	movs	r0, r3
 8005448:	f7fb f828 	bl	800049c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b00b      	add	sp, #44	; 0x2c
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	40004400 	.word	0x40004400
 8005458:	40021000 	.word	0x40021000

0800545c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800546a:	e7fe      	b.n	800546a <HardFault_Handler+0x4>

0800546c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005470:	46c0      	nop			; (mov r8, r8)
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005484:	f7fa fefc 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005494:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <USB_IRQHandler+0x14>)
 8005496:	0018      	movs	r0, r3
 8005498:	f7fb faac 	bl	80009f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	20000ab0 	.word	0x20000ab0

080054a8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <SystemInit+0x7c>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <SystemInit+0x7c>)
 80054b2:	2101      	movs	r1, #1
 80054b4:	430a      	orrs	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <SystemInit+0x7c>)
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b19      	ldr	r3, [pc, #100]	; (8005524 <SystemInit+0x7c>)
 80054be:	491a      	ldr	r1, [pc, #104]	; (8005528 <SystemInit+0x80>)
 80054c0:	400a      	ands	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <SystemInit+0x7c>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b16      	ldr	r3, [pc, #88]	; (8005524 <SystemInit+0x7c>)
 80054ca:	4918      	ldr	r1, [pc, #96]	; (800552c <SystemInit+0x84>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80054d0:	4b14      	ldr	r3, [pc, #80]	; (8005524 <SystemInit+0x7c>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <SystemInit+0x7c>)
 80054d6:	4916      	ldr	r1, [pc, #88]	; (8005530 <SystemInit+0x88>)
 80054d8:	400a      	ands	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <SystemInit+0x7c>)
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <SystemInit+0x7c>)
 80054e2:	4914      	ldr	r1, [pc, #80]	; (8005534 <SystemInit+0x8c>)
 80054e4:	400a      	ands	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80054e8:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <SystemInit+0x7c>)
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <SystemInit+0x7c>)
 80054ee:	210f      	movs	r1, #15
 80054f0:	438a      	bics	r2, r1
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <SystemInit+0x7c>)
 80054f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <SystemInit+0x7c>)
 80054fa:	490f      	ldr	r1, [pc, #60]	; (8005538 <SystemInit+0x90>)
 80054fc:	400a      	ands	r2, r1
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <SystemInit+0x7c>)
 8005502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005504:	4b07      	ldr	r3, [pc, #28]	; (8005524 <SystemInit+0x7c>)
 8005506:	2180      	movs	r1, #128	; 0x80
 8005508:	430a      	orrs	r2, r1
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <SystemInit+0x7c>)
 800550e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <SystemInit+0x7c>)
 8005512:	2101      	movs	r1, #1
 8005514:	438a      	bics	r2, r1
 8005516:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <SystemInit+0x7c>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]

}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40021000 	.word	0x40021000
 8005528:	08ffb80c 	.word	0x08ffb80c
 800552c:	fef6ffff 	.word	0xfef6ffff
 8005530:	fffbffff 	.word	0xfffbffff
 8005534:	ffc0ffff 	.word	0xffc0ffff
 8005538:	fffffe6c 	.word	0xfffffe6c

0800553c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005540:	4914      	ldr	r1, [pc, #80]	; (8005594 <MX_USB_DEVICE_Init+0x58>)
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <MX_USB_DEVICE_Init+0x5c>)
 8005544:	2200      	movs	r2, #0
 8005546:	0018      	movs	r0, r3
 8005548:	f7fe fd35 	bl	8003fb6 <USBD_Init>
 800554c:	1e03      	subs	r3, r0, #0
 800554e:	d001      	beq.n	8005554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005550:	f7ff feba 	bl	80052c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005554:	4a11      	ldr	r2, [pc, #68]	; (800559c <MX_USB_DEVICE_Init+0x60>)
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <MX_USB_DEVICE_Init+0x5c>)
 8005558:	0011      	movs	r1, r2
 800555a:	0018      	movs	r0, r3
 800555c:	f7fe fd5c 	bl	8004018 <USBD_RegisterClass>
 8005560:	1e03      	subs	r3, r0, #0
 8005562:	d001      	beq.n	8005568 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8005564:	f7ff feb0 	bl	80052c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005568:	4a0d      	ldr	r2, [pc, #52]	; (80055a0 <MX_USB_DEVICE_Init+0x64>)
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <MX_USB_DEVICE_Init+0x5c>)
 800556c:	0011      	movs	r1, r2
 800556e:	0018      	movs	r0, r3
 8005570:	f7fe fca8 	bl	8003ec4 <USBD_CDC_RegisterInterface>
 8005574:	1e03      	subs	r3, r0, #0
 8005576:	d001      	beq.n	800557c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8005578:	f7ff fea6 	bl	80052c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <MX_USB_DEVICE_Init+0x5c>)
 800557e:	0018      	movs	r0, r3
 8005580:	f7fe fd6a 	bl	8004058 <USBD_Start>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d001      	beq.n	800558c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8005588:	f7ff fe9e 	bl	80052c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	20000124 	.word	0x20000124
 8005598:	2000048c 	.word	0x2000048c
 800559c:	2000000c 	.word	0x2000000c
 80055a0:	20000114 	.word	0x20000114

080055a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80055a8:	4907      	ldr	r1, [pc, #28]	; (80055c8 <CDC_Init_FS+0x24>)
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <CDC_Init_FS+0x28>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	0018      	movs	r0, r3
 80055b0:	f7fe fca3 	bl	8003efa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80055b4:	4a06      	ldr	r2, [pc, #24]	; (80055d0 <CDC_Init_FS+0x2c>)
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <CDC_Init_FS+0x28>)
 80055b8:	0011      	movs	r1, r2
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7fe fcb9 	bl	8003f32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80055c0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	200008b0 	.word	0x200008b0
 80055cc:	2000048c 	.word	0x2000048c
 80055d0:	200006b0 	.word	0x200006b0

080055d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80055d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80055da:	0018      	movs	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6039      	str	r1, [r7, #0]
 80055e8:	0011      	movs	r1, r2
 80055ea:	1dfb      	adds	r3, r7, #7
 80055ec:	1c02      	adds	r2, r0, #0
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	1c0a      	adds	r2, r1, #0
 80055f4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80055f6:	1dfb      	adds	r3, r7, #7
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b23      	cmp	r3, #35	; 0x23
 80055fc:	d804      	bhi.n	8005608 <CDC_Control_FS+0x28>
 80055fe:	009a      	lsls	r2, r3, #2
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <CDC_Control_FS+0x34>)
 8005602:	18d3      	adds	r3, r2, r3
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005608:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800560a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}
 8005614:	08006118 	.word	0x08006118

08005618 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <CDC_Receive_FS+0x28>)
 8005626:	0011      	movs	r1, r2
 8005628:	0018      	movs	r0, r3
 800562a:	f7fe fc82 	bl	8003f32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <CDC_Receive_FS+0x28>)
 8005630:	0018      	movs	r0, r3
 8005632:	f7fe fc92 	bl	8003f5a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005636:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2000048c 	.word	0x2000048c

08005644 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0e      	ldr	r2, [pc, #56]	; (800568c <HAL_PCD_MspInit+0x48>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d115      	bne.n	8005682 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005656:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <HAL_PCD_MspInit+0x4c>)
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <HAL_PCD_MspInit+0x4c>)
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	0409      	lsls	r1, r1, #16
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_PCD_MspInit+0x4c>)
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005672:	2200      	movs	r2, #0
 8005674:	2100      	movs	r1, #0
 8005676:	201f      	movs	r0, #31
 8005678:	f7fa fede 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800567c:	201f      	movs	r0, #31
 800567e:	f7fa fef0 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b004      	add	sp, #16
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	40005c00 	.word	0x40005c00
 8005690:	40021000 	.word	0x40021000

08005694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	2387      	movs	r3, #135	; 0x87
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	58d2      	ldr	r2, [r2, r3]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	33ed      	adds	r3, #237	; 0xed
 80056a8:	33ff      	adds	r3, #255	; 0xff
 80056aa:	0019      	movs	r1, r3
 80056ac:	0010      	movs	r0, r2
 80056ae:	f7fe fd27 	bl	8004100 <USBD_LL_SetupStage>
}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b002      	add	sp, #8
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056ba:	b590      	push	{r4, r7, lr}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	000a      	movs	r2, r1
 80056c4:	1cfb      	adds	r3, r7, #3
 80056c6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	2387      	movs	r3, #135	; 0x87
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	58d4      	ldr	r4, [r2, r3]
 80056d0:	1cfb      	adds	r3, r7, #3
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	238c      	movs	r3, #140	; 0x8c
 80056d8:	0059      	lsls	r1, r3, #1
 80056da:	0013      	movs	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	18c3      	adds	r3, r0, r3
 80056e4:	185b      	adds	r3, r3, r1
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	1cfb      	adds	r3, r7, #3
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	0019      	movs	r1, r3
 80056ee:	0020      	movs	r0, r4
 80056f0:	f7fe fd64 	bl	80041bc <USBD_LL_DataOutStage>
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b003      	add	sp, #12
 80056fa:	bd90      	pop	{r4, r7, pc}

080056fc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	000a      	movs	r2, r1
 8005706:	1cfb      	adds	r3, r7, #3
 8005708:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	2387      	movs	r3, #135	; 0x87
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	58d0      	ldr	r0, [r2, r3]
 8005712:	1cfb      	adds	r3, r7, #3
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	0013      	movs	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	18cb      	adds	r3, r1, r3
 8005722:	3338      	adds	r3, #56	; 0x38
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	1cfb      	adds	r3, r7, #3
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	0019      	movs	r1, r3
 800572c:	f7fe fdaf 	bl	800428e <USBD_LL_DataInStage>
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b002      	add	sp, #8
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	2387      	movs	r3, #135	; 0x87
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	58d3      	ldr	r3, [r2, r3]
 8005748:	0018      	movs	r0, r3
 800574a:	f7fe fead 	bl	80044a8 <USBD_LL_SOF>
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b002      	add	sp, #8
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800575e:	230f      	movs	r3, #15
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d001      	beq.n	8005772 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800576e:	f7ff fdab 	bl	80052c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	2387      	movs	r3, #135	; 0x87
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	58d2      	ldr	r2, [r2, r3]
 800577a:	230f      	movs	r3, #15
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	0019      	movs	r1, r3
 8005782:	0010      	movs	r0, r2
 8005784:	f7fe fe59 	bl	800443a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	2387      	movs	r3, #135	; 0x87
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	58d3      	ldr	r3, [r2, r3]
 8005790:	0018      	movs	r0, r3
 8005792:	f7fe fe1f 	bl	80043d4 <USBD_LL_Reset>
}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b004      	add	sp, #16
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	2387      	movs	r3, #135	; 0x87
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	58d3      	ldr	r3, [r2, r3]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7fe fe52 	bl	800445a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_PCD_SuspendCallback+0x34>)
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <HAL_PCD_SuspendCallback+0x34>)
 80057c4:	2106      	movs	r1, #6
 80057c6:	430a      	orrs	r2, r1
 80057c8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b002      	add	sp, #8
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_PCD_ResumeCallback+0x38>)
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <HAL_PCD_ResumeCallback+0x38>)
 80057ee:	2106      	movs	r1, #6
 80057f0:	438a      	bics	r2, r1
 80057f2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80057f4:	f000 fa44 	bl	8005c80 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	2387      	movs	r3, #135	; 0x87
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	58d3      	ldr	r3, [r2, r3]
 8005800:	0018      	movs	r0, r3
 8005802:	f7fe fe40 	bl	8004486 <USBD_LL_Resume>
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	b002      	add	sp, #8
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	e000ed00 	.word	0xe000ed00

08005814 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <USBD_LL_Init+0xc0>)
 800581e:	2387      	movs	r3, #135	; 0x87
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	2388      	movs	r3, #136	; 0x88
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4929      	ldr	r1, [pc, #164]	; (80058d4 <USBD_LL_Init+0xc0>)
 800582e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8005830:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <USBD_LL_Init+0xc0>)
 8005832:	4a29      	ldr	r2, [pc, #164]	; (80058d8 <USBD_LL_Init+0xc4>)
 8005834:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005836:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <USBD_LL_Init+0xc0>)
 8005838:	2208      	movs	r2, #8
 800583a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800583c:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <USBD_LL_Init+0xc0>)
 800583e:	2202      	movs	r2, #2
 8005840:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <USBD_LL_Init+0xc0>)
 8005844:	2202      	movs	r2, #2
 8005846:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005848:	4b22      	ldr	r3, [pc, #136]	; (80058d4 <USBD_LL_Init+0xc0>)
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <USBD_LL_Init+0xc0>)
 8005850:	2200      	movs	r2, #0
 8005852:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005854:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <USBD_LL_Init+0xc0>)
 8005856:	2200      	movs	r2, #0
 8005858:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800585a:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <USBD_LL_Init+0xc0>)
 800585c:	0018      	movs	r0, r3
 800585e:	f7fa ffc0 	bl	80007e2 <HAL_PCD_Init>
 8005862:	1e03      	subs	r3, r0, #0
 8005864:	d001      	beq.n	800586a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8005866:	f7ff fd2f 	bl	80052c8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	2388      	movs	r3, #136	; 0x88
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	58d0      	ldr	r0, [r2, r3]
 8005872:	2318      	movs	r3, #24
 8005874:	2200      	movs	r2, #0
 8005876:	2100      	movs	r1, #0
 8005878:	f7fd f88a 	bl	8002990 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	2388      	movs	r3, #136	; 0x88
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	58d0      	ldr	r0, [r2, r3]
 8005884:	2358      	movs	r3, #88	; 0x58
 8005886:	2200      	movs	r2, #0
 8005888:	2180      	movs	r1, #128	; 0x80
 800588a:	f7fd f881 	bl	8002990 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	2388      	movs	r3, #136	; 0x88
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	58d0      	ldr	r0, [r2, r3]
 8005896:	23c0      	movs	r3, #192	; 0xc0
 8005898:	2200      	movs	r2, #0
 800589a:	2181      	movs	r1, #129	; 0x81
 800589c:	f7fd f878 	bl	8002990 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	2388      	movs	r3, #136	; 0x88
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	58d0      	ldr	r0, [r2, r3]
 80058a8:	2388      	movs	r3, #136	; 0x88
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	2200      	movs	r2, #0
 80058ae:	2101      	movs	r1, #1
 80058b0:	f7fd f86e 	bl	8002990 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	2388      	movs	r3, #136	; 0x88
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	58d0      	ldr	r0, [r2, r3]
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	2200      	movs	r2, #0
 80058c2:	2182      	movs	r1, #130	; 0x82
 80058c4:	f7fd f864 	bl	8002990 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	0018      	movs	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b002      	add	sp, #8
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	20000ab0 	.word	0x20000ab0
 80058d8:	40005c00 	.word	0x40005c00

080058dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058e4:	210f      	movs	r1, #15
 80058e6:	187b      	adds	r3, r7, r1
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058ec:	260e      	movs	r6, #14
 80058ee:	19bb      	adds	r3, r7, r6
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	2388      	movs	r3, #136	; 0x88
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	58d3      	ldr	r3, [r2, r3]
 80058fc:	000d      	movs	r5, r1
 80058fe:	187c      	adds	r4, r7, r1
 8005900:	0018      	movs	r0, r3
 8005902:	f7fb f85f 	bl	80009c4 <HAL_PCD_Start>
 8005906:	0003      	movs	r3, r0
 8005908:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800590a:	19bc      	adds	r4, r7, r6
 800590c:	197b      	adds	r3, r7, r5
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	0018      	movs	r0, r3
 8005912:	f000 f9bc 	bl	8005c8e <USBD_Get_USB_Status>
 8005916:	0003      	movs	r3, r0
 8005918:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 800591a:	19bb      	adds	r3, r7, r6
 800591c:	781b      	ldrb	r3, [r3, #0]
}
 800591e:	0018      	movs	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	b005      	add	sp, #20
 8005924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005926 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	000c      	movs	r4, r1
 8005930:	0010      	movs	r0, r2
 8005932:	0019      	movs	r1, r3
 8005934:	1cfb      	adds	r3, r7, #3
 8005936:	1c22      	adds	r2, r4, #0
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	1cbb      	adds	r3, r7, #2
 800593c:	1c02      	adds	r2, r0, #0
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	003b      	movs	r3, r7
 8005942:	1c0a      	adds	r2, r1, #0
 8005944:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005946:	260f      	movs	r6, #15
 8005948:	19bb      	adds	r3, r7, r6
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800594e:	250e      	movs	r5, #14
 8005950:	197b      	adds	r3, r7, r5
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	2388      	movs	r3, #136	; 0x88
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	58d0      	ldr	r0, [r2, r3]
 800595e:	19bc      	adds	r4, r7, r6
 8005960:	1cbb      	adds	r3, r7, #2
 8005962:	781d      	ldrb	r5, [r3, #0]
 8005964:	003b      	movs	r3, r7
 8005966:	881a      	ldrh	r2, [r3, #0]
 8005968:	1cfb      	adds	r3, r7, #3
 800596a:	7819      	ldrb	r1, [r3, #0]
 800596c:	002b      	movs	r3, r5
 800596e:	f7fb f997 	bl	8000ca0 <HAL_PCD_EP_Open>
 8005972:	0003      	movs	r3, r0
 8005974:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005976:	250e      	movs	r5, #14
 8005978:	197c      	adds	r4, r7, r5
 800597a:	19bb      	adds	r3, r7, r6
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	0018      	movs	r0, r3
 8005980:	f000 f985 	bl	8005c8e <USBD_Get_USB_Status>
 8005984:	0003      	movs	r3, r0
 8005986:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8005988:	197b      	adds	r3, r7, r5
 800598a:	781b      	ldrb	r3, [r3, #0]
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b005      	add	sp, #20
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005994 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	000a      	movs	r2, r1
 800599e:	1cfb      	adds	r3, r7, #3
 80059a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059a2:	210f      	movs	r1, #15
 80059a4:	187b      	adds	r3, r7, r1
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059aa:	260e      	movs	r6, #14
 80059ac:	19bb      	adds	r3, r7, r6
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	2388      	movs	r3, #136	; 0x88
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	58d2      	ldr	r2, [r2, r3]
 80059ba:	000d      	movs	r5, r1
 80059bc:	187c      	adds	r4, r7, r1
 80059be:	1cfb      	adds	r3, r7, #3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	0019      	movs	r1, r3
 80059c4:	0010      	movs	r0, r2
 80059c6:	f7fb fd05 	bl	80013d4 <HAL_PCD_EP_Close>
 80059ca:	0003      	movs	r3, r0
 80059cc:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80059ce:	19bc      	adds	r4, r7, r6
 80059d0:	197b      	adds	r3, r7, r5
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 f95a 	bl	8005c8e <USBD_Get_USB_Status>
 80059da:	0003      	movs	r3, r0
 80059dc:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 80059de:	19bb      	adds	r3, r7, r6
 80059e0:	781b      	ldrb	r3, [r3, #0]
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b005      	add	sp, #20
 80059e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059ea <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ec:	b085      	sub	sp, #20
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	000a      	movs	r2, r1
 80059f4:	1cfb      	adds	r3, r7, #3
 80059f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059f8:	210f      	movs	r1, #15
 80059fa:	187b      	adds	r3, r7, r1
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a00:	260e      	movs	r6, #14
 8005a02:	19bb      	adds	r3, r7, r6
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	2388      	movs	r3, #136	; 0x88
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	58d2      	ldr	r2, [r2, r3]
 8005a10:	000d      	movs	r5, r1
 8005a12:	187c      	adds	r4, r7, r1
 8005a14:	1cfb      	adds	r3, r7, #3
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	0019      	movs	r1, r3
 8005a1a:	0010      	movs	r0, r2
 8005a1c:	f7fc fa20 	bl	8001e60 <HAL_PCD_EP_SetStall>
 8005a20:	0003      	movs	r3, r0
 8005a22:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a24:	19bc      	adds	r4, r7, r6
 8005a26:	197b      	adds	r3, r7, r5
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 f92f 	bl	8005c8e <USBD_Get_USB_Status>
 8005a30:	0003      	movs	r3, r0
 8005a32:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8005a34:	19bb      	adds	r3, r7, r6
 8005a36:	781b      	ldrb	r3, [r3, #0]
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b005      	add	sp, #20
 8005a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a40 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	000a      	movs	r2, r1
 8005a4a:	1cfb      	adds	r3, r7, #3
 8005a4c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a4e:	210f      	movs	r1, #15
 8005a50:	187b      	adds	r3, r7, r1
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a56:	260e      	movs	r6, #14
 8005a58:	19bb      	adds	r3, r7, r6
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	2388      	movs	r3, #136	; 0x88
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	58d2      	ldr	r2, [r2, r3]
 8005a66:	000d      	movs	r5, r1
 8005a68:	187c      	adds	r4, r7, r1
 8005a6a:	1cfb      	adds	r3, r7, #3
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	0019      	movs	r1, r3
 8005a70:	0010      	movs	r0, r2
 8005a72:	f7fc faab 	bl	8001fcc <HAL_PCD_EP_ClrStall>
 8005a76:	0003      	movs	r3, r0
 8005a78:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a7a:	19bc      	adds	r4, r7, r6
 8005a7c:	197b      	adds	r3, r7, r5
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f000 f904 	bl	8005c8e <USBD_Get_USB_Status>
 8005a86:	0003      	movs	r3, r0
 8005a88:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8005a8a:	19bb      	adds	r3, r7, r6
 8005a8c:	781b      	ldrb	r3, [r3, #0]
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b005      	add	sp, #20
 8005a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a96 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	000a      	movs	r2, r1
 8005aa0:	1cfb      	adds	r3, r7, #3
 8005aa2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	2388      	movs	r3, #136	; 0x88
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	58d3      	ldr	r3, [r2, r3]
 8005aac:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005aae:	1cfb      	adds	r3, r7, #3
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	da0d      	bge.n	8005ad4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005ab8:	1cfb      	adds	r3, r7, #3
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	227f      	movs	r2, #127	; 0x7f
 8005abe:	401a      	ands	r2, r3
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	202a      	movs	r0, #42	; 0x2a
 8005ac4:	0013      	movs	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	18cb      	adds	r3, r1, r3
 8005ace:	181b      	adds	r3, r3, r0
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	e00d      	b.n	8005af0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005ad4:	1cfb      	adds	r3, r7, #3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	227f      	movs	r2, #127	; 0x7f
 8005ada:	401a      	ands	r2, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	2385      	movs	r3, #133	; 0x85
 8005ae0:	0059      	lsls	r1, r3, #1
 8005ae2:	0013      	movs	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	18c3      	adds	r3, r0, r3
 8005aec:	185b      	adds	r3, r3, r1
 8005aee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005af0:	0018      	movs	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b004      	add	sp, #16
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	000a      	movs	r2, r1
 8005b02:	1cfb      	adds	r3, r7, #3
 8005b04:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b06:	210f      	movs	r1, #15
 8005b08:	187b      	adds	r3, r7, r1
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b0e:	260e      	movs	r6, #14
 8005b10:	19bb      	adds	r3, r7, r6
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	2388      	movs	r3, #136	; 0x88
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	58d2      	ldr	r2, [r2, r3]
 8005b1e:	000d      	movs	r5, r1
 8005b20:	187c      	adds	r4, r7, r1
 8005b22:	1cfb      	adds	r3, r7, #3
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	0019      	movs	r1, r3
 8005b28:	0010      	movs	r0, r2
 8005b2a:	f7fb f88b 	bl	8000c44 <HAL_PCD_SetAddress>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b32:	19bc      	adds	r4, r7, r6
 8005b34:	197b      	adds	r3, r7, r5
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 f8a8 	bl	8005c8e <USBD_Get_USB_Status>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8005b42:	19bb      	adds	r3, r7, r6
 8005b44:	781b      	ldrb	r3, [r3, #0]
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b005      	add	sp, #20
 8005b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	0008      	movs	r0, r1
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	230b      	movs	r3, #11
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	1c02      	adds	r2, r0, #0
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	2408      	movs	r4, #8
 8005b66:	193b      	adds	r3, r7, r4
 8005b68:	1c0a      	adds	r2, r1, #0
 8005b6a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b6c:	2117      	movs	r1, #23
 8005b6e:	187b      	adds	r3, r7, r1
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b74:	2516      	movs	r5, #22
 8005b76:	197b      	adds	r3, r7, r5
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	2388      	movs	r3, #136	; 0x88
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	58d0      	ldr	r0, [r2, r3]
 8005b84:	193b      	adds	r3, r7, r4
 8005b86:	881d      	ldrh	r5, [r3, #0]
 8005b88:	000e      	movs	r6, r1
 8005b8a:	187c      	adds	r4, r7, r1
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	230b      	movs	r3, #11
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	7819      	ldrb	r1, [r3, #0]
 8005b94:	002b      	movs	r3, r5
 8005b96:	f7fb ffad 	bl	8001af4 <HAL_PCD_EP_Transmit>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b9e:	2516      	movs	r5, #22
 8005ba0:	197c      	adds	r4, r7, r5
 8005ba2:	19bb      	adds	r3, r7, r6
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f000 f871 	bl	8005c8e <USBD_Get_USB_Status>
 8005bac:	0003      	movs	r3, r0
 8005bae:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8005bb0:	197b      	adds	r3, r7, r5
 8005bb2:	781b      	ldrb	r3, [r3, #0]
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b007      	add	sp, #28
 8005bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	0008      	movs	r0, r1
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	0019      	movs	r1, r3
 8005bca:	230b      	movs	r3, #11
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	1c02      	adds	r2, r0, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	2408      	movs	r4, #8
 8005bd4:	193b      	adds	r3, r7, r4
 8005bd6:	1c0a      	adds	r2, r1, #0
 8005bd8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bda:	2117      	movs	r1, #23
 8005bdc:	187b      	adds	r3, r7, r1
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005be2:	2516      	movs	r5, #22
 8005be4:	197b      	adds	r3, r7, r5
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	2388      	movs	r3, #136	; 0x88
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	58d0      	ldr	r0, [r2, r3]
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	881d      	ldrh	r5, [r3, #0]
 8005bf6:	000e      	movs	r6, r1
 8005bf8:	187c      	adds	r4, r7, r1
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	230b      	movs	r3, #11
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	7819      	ldrb	r1, [r3, #0]
 8005c02:	002b      	movs	r3, r5
 8005c04:	f7fb fde4 	bl	80017d0 <HAL_PCD_EP_Receive>
 8005c08:	0003      	movs	r3, r0
 8005c0a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c0c:	2516      	movs	r5, #22
 8005c0e:	197c      	adds	r4, r7, r5
 8005c10:	19bb      	adds	r3, r7, r6
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 f83a 	bl	8005c8e <USBD_Get_USB_Status>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8005c1e:	197b      	adds	r3, r7, r5
 8005c20:	781b      	ldrb	r3, [r3, #0]
}
 8005c22:	0018      	movs	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b007      	add	sp, #28
 8005c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	000a      	movs	r2, r1
 8005c34:	1cfb      	adds	r3, r7, #3
 8005c36:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	2388      	movs	r3, #136	; 0x88
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	58d2      	ldr	r2, [r2, r3]
 8005c40:	1cfb      	adds	r3, r7, #3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	0019      	movs	r1, r3
 8005c46:	0010      	movs	r0, r2
 8005c48:	f7fb ff3a 	bl	8001ac0 <HAL_PCD_EP_GetRxCount>
 8005c4c:	0003      	movs	r3, r0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b002      	add	sp, #8
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005c60:	4b02      	ldr	r3, [pc, #8]	; (8005c6c <USBD_static_malloc+0x14>)
}
 8005c62:	0018      	movs	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b002      	add	sp, #8
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	20000194 	.word	0x20000194

08005c70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8005c84:	f7ff f9e2 	bl	800504c <SystemClock_Config>
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	0002      	movs	r2, r0
 8005c96:	1dfb      	adds	r3, r7, #7
 8005c98:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c9a:	230f      	movs	r3, #15
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8005ca2:	1dfb      	adds	r3, r7, #7
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d017      	beq.n	8005cda <USBD_Get_USB_Status+0x4c>
 8005caa:	dc1b      	bgt.n	8005ce4 <USBD_Get_USB_Status+0x56>
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d00f      	beq.n	8005cd0 <USBD_Get_USB_Status+0x42>
 8005cb0:	dc18      	bgt.n	8005ce4 <USBD_Get_USB_Status+0x56>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <USBD_Get_USB_Status+0x2e>
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d005      	beq.n	8005cc6 <USBD_Get_USB_Status+0x38>
 8005cba:	e013      	b.n	8005ce4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
    break;
 8005cc4:	e013      	b.n	8005cee <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005cc6:	230f      	movs	r3, #15
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	2202      	movs	r2, #2
 8005ccc:	701a      	strb	r2, [r3, #0]
    break;
 8005cce:	e00e      	b.n	8005cee <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	701a      	strb	r2, [r3, #0]
    break;
 8005cd8:	e009      	b.n	8005cee <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005cda:	230f      	movs	r3, #15
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	2202      	movs	r2, #2
 8005ce0:	701a      	strb	r2, [r3, #0]
    break;
 8005ce2:	e004      	b.n	8005cee <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8005ce4:	230f      	movs	r3, #15
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	2202      	movs	r2, #2
 8005cea:	701a      	strb	r2, [r3, #0]
    break;
 8005cec:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8005cee:	230f      	movs	r3, #15
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	781b      	ldrb	r3, [r3, #0]
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b004      	add	sp, #16
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	0002      	movs	r2, r0
 8005d04:	6039      	str	r1, [r7, #0]
 8005d06:	1dfb      	adds	r3, r7, #7
 8005d08:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2212      	movs	r2, #18
 8005d0e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d10:	4b02      	ldr	r3, [pc, #8]	; (8005d1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d12:	0018      	movs	r0, r3
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b002      	add	sp, #8
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	20000140 	.word	0x20000140

08005d20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	0002      	movs	r2, r0
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	1dfb      	adds	r3, r7, #7
 8005d2c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2204      	movs	r2, #4
 8005d32:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d34:	4b02      	ldr	r3, [pc, #8]	; (8005d40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d36:	0018      	movs	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b002      	add	sp, #8
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	20000154 	.word	0x20000154

08005d44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	1dfb      	adds	r3, r7, #7
 8005d50:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8005d52:	1dfb      	adds	r3, r7, #7
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	4908      	ldr	r1, [pc, #32]	; (8005d80 <USBD_FS_ProductStrDescriptor+0x3c>)
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <USBD_FS_ProductStrDescriptor+0x40>)
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff f858 	bl	8004e16 <USBD_GetString>
 8005d66:	e005      	b.n	8005d74 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4905      	ldr	r1, [pc, #20]	; (8005d80 <USBD_FS_ProductStrDescriptor+0x3c>)
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <USBD_FS_ProductStrDescriptor+0x40>)
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f7ff f851 	bl	8004e16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d74:	4b02      	ldr	r3, [pc, #8]	; (8005d80 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b002      	add	sp, #8
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	20000cd0 	.word	0x20000cd0
 8005d84:	0800606c 	.word	0x0800606c

08005d88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	0002      	movs	r2, r0
 8005d90:	6039      	str	r1, [r7, #0]
 8005d92:	1dfb      	adds	r3, r7, #7
 8005d94:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	4904      	ldr	r1, [pc, #16]	; (8005dac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f7ff f83a 	bl	8004e16 <USBD_GetString>
  return USBD_StrDesc;
 8005da2:	4b02      	ldr	r3, [pc, #8]	; (8005dac <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8005da4:	0018      	movs	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000cd0 	.word	0x20000cd0
 8005db0:	0800607c 	.word	0x0800607c

08005db4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	0002      	movs	r2, r0
 8005dbc:	6039      	str	r1, [r7, #0]
 8005dbe:	1dfb      	adds	r3, r7, #7
 8005dc0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	221a      	movs	r2, #26
 8005dc6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005dc8:	f000 f84c 	bl	8005e64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b002      	add	sp, #8
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	20000158 	.word	0x20000158

08005ddc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	0002      	movs	r2, r0
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	1dfb      	adds	r3, r7, #7
 8005de8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8005dea:	1dfb      	adds	r3, r7, #7
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4908      	ldr	r1, [pc, #32]	; (8005e18 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <USBD_FS_ConfigStrDescriptor+0x40>)
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff f80c 	bl	8004e16 <USBD_GetString>
 8005dfe:	e005      	b.n	8005e0c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	4905      	ldr	r1, [pc, #20]	; (8005e18 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <USBD_FS_ConfigStrDescriptor+0x40>)
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7ff f805 	bl	8004e16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e0c:	4b02      	ldr	r3, [pc, #8]	; (8005e18 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8005e0e:	0018      	movs	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b002      	add	sp, #8
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	20000cd0 	.word	0x20000cd0
 8005e1c:	08006084 	.word	0x08006084

08005e20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	0002      	movs	r2, r0
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	1dfb      	adds	r3, r7, #7
 8005e2c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4908      	ldr	r1, [pc, #32]	; (8005e5c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f7fe ffea 	bl	8004e16 <USBD_GetString>
 8005e42:	e005      	b.n	8005e50 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	4905      	ldr	r1, [pc, #20]	; (8005e5c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7fe ffe3 	bl	8004e16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8005e52:	0018      	movs	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b002      	add	sp, #8
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	20000cd0 	.word	0x20000cd0
 8005e60:	08006090 	.word	0x08006090

08005e64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <Get_SerialNum+0x48>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <Get_SerialNum+0x4c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e76:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <Get_SerialNum+0x50>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	18d3      	adds	r3, r2, r3
 8005e82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e8a:	490b      	ldr	r1, [pc, #44]	; (8005eb8 <Get_SerialNum+0x54>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2208      	movs	r2, #8
 8005e90:	0018      	movs	r0, r3
 8005e92:	f000 f815 	bl	8005ec0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e96:	4909      	ldr	r1, [pc, #36]	; (8005ebc <Get_SerialNum+0x58>)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f80f 	bl	8005ec0 <IntToUnicode>
  }
}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b004      	add	sp, #16
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	1ffff7ac 	.word	0x1ffff7ac
 8005eb0:	1ffff7b0 	.word	0x1ffff7b0
 8005eb4:	1ffff7b4 	.word	0x1ffff7b4
 8005eb8:	2000015a 	.word	0x2000015a
 8005ebc:	2000016a 	.word	0x2000016a

08005ec0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	1dfb      	adds	r3, r7, #7
 8005ecc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8005ece:	2117      	movs	r1, #23
 8005ed0:	187b      	adds	r3, r7, r1
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8005ed6:	187b      	adds	r3, r7, r1
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e02f      	b.n	8005f3e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	0f1b      	lsrs	r3, r3, #28
 8005ee2:	2b09      	cmp	r3, #9
 8005ee4:	d80d      	bhi.n	8005f02 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	0f1b      	lsrs	r3, r3, #28
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	2317      	movs	r3, #23
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	185b      	adds	r3, r3, r1
 8005efa:	3230      	adds	r2, #48	; 0x30
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e00c      	b.n	8005f1c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	0f1b      	lsrs	r3, r3, #28
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	2317      	movs	r3, #23
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	0019      	movs	r1, r3
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	185b      	adds	r3, r3, r1
 8005f16:	3237      	adds	r2, #55	; 0x37
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f22:	2117      	movs	r1, #23
 8005f24:	187b      	adds	r3, r7, r1
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	18d3      	adds	r3, r2, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	3201      	adds	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	2317      	movs	r3, #23
 8005f40:	18fa      	adds	r2, r7, r3
 8005f42:	1dfb      	adds	r3, r7, #7
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d3c8      	bcc.n	8005ede <IntToUnicode+0x1e>
  }
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b006      	add	sp, #24
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f58:	4813      	ldr	r0, [pc, #76]	; (8005fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f5a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8005f5c:	4813      	ldr	r0, [pc, #76]	; (8005fac <LoopForever+0x6>)
    LDR R1, [R0]
 8005f5e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8005f60:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8005f62:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <LoopForever+0xa>)
    CMP R1, R2
 8005f64:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8005f66:	d105      	bne.n	8005f74 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8005f68:	4812      	ldr	r0, [pc, #72]	; (8005fb4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8005f6a:	4913      	ldr	r1, [pc, #76]	; (8005fb8 <LoopForever+0x12>)
    STR R1, [R0]
 8005f6c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8005f6e:	4813      	ldr	r0, [pc, #76]	; (8005fbc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8005f70:	4913      	ldr	r1, [pc, #76]	; (8005fc0 <LoopForever+0x1a>)
    STR R1, [R0]
 8005f72:	6001      	str	r1, [r0, #0]

08005f74 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f74:	4813      	ldr	r0, [pc, #76]	; (8005fc4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8005f76:	4914      	ldr	r1, [pc, #80]	; (8005fc8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8005f78:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <LoopForever+0x26>)
  movs r3, #0
 8005f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f7c:	e002      	b.n	8005f84 <LoopCopyDataInit>

08005f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f82:	3304      	adds	r3, #4

08005f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f88:	d3f9      	bcc.n	8005f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f8a:	4a11      	ldr	r2, [pc, #68]	; (8005fd0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8005f8c:	4c11      	ldr	r4, [pc, #68]	; (8005fd4 <LoopForever+0x2e>)
  movs r3, #0
 8005f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f90:	e001      	b.n	8005f96 <LoopFillZerobss>

08005f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f94:	3204      	adds	r2, #4

08005f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f98:	d3fb      	bcc.n	8005f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005f9a:	f7ff fa85 	bl	80054a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005f9e:	f000 f81d 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fa2:	f7ff f837 	bl	8005014 <main>

08005fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8005fa6:	e7fe      	b.n	8005fa6 <LoopForever>
  ldr   r0, =_estack
 8005fa8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8005fac:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8005fb0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8005fb4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8005fb8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8005fbc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8005fc0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8005fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fc8:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8005fcc:	080061b0 	.word	0x080061b0
  ldr r2, =_sbss
 8005fd0:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8005fd4:	20000ed0 	.word	0x20000ed0

08005fd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fd8:	e7fe      	b.n	8005fd8 <ADC1_IRQHandler>
	...

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	2600      	movs	r6, #0
 8005fe0:	4d0c      	ldr	r5, [pc, #48]	; (8006014 <__libc_init_array+0x38>)
 8005fe2:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe4:	1b64      	subs	r4, r4, r5
 8005fe6:	10a4      	asrs	r4, r4, #2
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	2600      	movs	r6, #0
 8005fee:	f000 f821 	bl	8006034 <_init>
 8005ff2:	4d0a      	ldr	r5, [pc, #40]	; (800601c <__libc_init_array+0x40>)
 8005ff4:	4c0a      	ldr	r4, [pc, #40]	; (8006020 <__libc_init_array+0x44>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	00b3      	lsls	r3, r6, #2
 8006002:	58eb      	ldr	r3, [r5, r3]
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	00b3      	lsls	r3, r6, #2
 800600c:	58eb      	ldr	r3, [r5, r3]
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	080061a8 	.word	0x080061a8
 8006018:	080061a8 	.word	0x080061a8
 800601c:	080061a8 	.word	0x080061a8
 8006020:	080061ac 	.word	0x080061ac

08006024 <memset>:
 8006024:	0003      	movs	r3, r0
 8006026:	1882      	adds	r2, r0, r2
 8006028:	4293      	cmp	r3, r2
 800602a:	d100      	bne.n	800602e <memset+0xa>
 800602c:	4770      	bx	lr
 800602e:	7019      	strb	r1, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	e7f9      	b.n	8006028 <memset+0x4>

08006034 <_init>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr

08006040 <_fini>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	469e      	mov	lr, r3
 800604a:	4770      	bx	lr
